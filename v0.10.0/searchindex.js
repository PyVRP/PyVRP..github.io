Search.setIndex({"alltitles": {"A brief introduction to HGS": [[19, null]], "A brief introduction to VRP": [[20, null]], "A quick tutorial": [[12, null]], "A tour of PyVRP": [[13, "A-tour-of-PyVRP"]], "API reference": [[14, null]], "Benchmarking": [[7, null]], "Benchmarks": [[15, null]], "Building the extensions": [[8, "building-the-extensions"]], "Capacitated VRP": [[12, "Capacitated-VRP"]], "Capacitated vehicle routing problem": [[20, "capacitated-vehicle-routing-problem"]], "Citing PyVRP": [[16, null]], "Classic VRPs": [[11, null]], "Committing changes": [[8, "committing-changes"]], "Conclusion": [[11, "Conclusion"], [13, "Conclusion"]], "Contents": [[14, "contents"]], "Contributing": [[8, null]], "Crossover operators": [[0, null]], "Data sections": [[10, "data-sections"]], "Debugging the extensions": [[8, "debugging-the-extensions"]], "Developing PyVRP": [[14, null]], "Diversity measures": [[1, null]], "Examples": [[14, null]], "Getting help": [[17, null]], "Getting started": [[14, null]], "Hint": [[3, null], [9, null], [9, null], [9, null], [9, null], [9, null], [9, null], [14, null], [15, null], [19, null], [20, null]], "Installation instructions": [[18, null]], "Installing from source": [[18, "installing-from-source"]], "Licensing": [[8, "licensing"]], "Multi-depot VRP with time windows": [[12, "Multi-depot-VRP-with-time-windows"]], "Multi-depot vehicle routing problem": [[20, "multi-depot-vehicle-routing-problem"]], "Node operators": [[5, "node-operators"]], "Note": [[0, null], [1, null], [1, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [5, null], [8, null], [8, null], [9, null], [9, null], [10, null], [15, null], [17, null], [19, null], [20, null], [20, null]], "Plotting tools": [[2, null]], "Population management": [[13, "Population-management"]], "Prize-collecting VRP": [[12, "Prize-collecting-VRP"]], "Prize-collecting vehicle routing problem": [[20, "prize-collecting-vehicle-routing-problem"]], "Profiling the extensions": [[8, "profiling-the-extensions"]], "PyVRP": [[3, null], [15, "pyvrp"]], "Random number generator": [[13, "Random-number-generator"]], "Reading the instance": [[11, "Reading-the-instance"], [11, "id1"]], "Reference VRP solvers": [[15, "reference-vrp-solvers"]], "Repair operators": [[4, null]], "Route operators": [[5, "route-operators"]], "Running the examples locally": [[18, "running-the-examples-locally"]], "Search method": [[13, "Search-method"]], "Search methods": [[5, null]], "Setting up Github Codespaces": [[8, "setting-up-github-codespaces"]], "Setting up a local installation": [[8, "setting-up-a-local-installation"]], "Solution representation and evaluation": [[13, "Solution-representation-and-evaluation"]], "Solving a larger VRPTW instance": [[11, "Solving-a-larger-VRPTW-instance"]], "Solving the instance": [[11, "Solving-the-instance"], [11, "id2"]], "Specifications": [[10, "specifications"]], "Stopping criteria": [[6, null]], "Submitting a bug report": [[17, "submitting-a-bug-report"]], "Submitting a feature request": [[17, "submitting-a-feature-request"]], "Supported VRP variants": [[20, "supported-vrp-variants"]], "Supporting new VRP variants": [[9, null]], "The VRP with time windows": [[11, "The-VRP-with-time-windows"]], "The VRPLIB format": [[10, null]], "The capacitated VRP": [[11, "The-capacitated-VRP"]], "The genetic algorithm and crossover": [[13, "The-genetic-algorithm-and-crossover"]], "The solve function": [[13, "The-solve-function"]], "Using PyVRP\u2019s components": [[13, null]], "VRP with simultaneous pickup and delivery": [[12, "VRP-with-simultaneous-pickup-and-delivery"]], "VRP with time windows": [[12, "VRP-with-time-windows"]], "VRP with zone restrictions": [[12, "VRP-with-zone-restrictions"]], "Vehicle routing problem with time windows": [[20, "vehicle-routing-problem-with-time-windows"]], "Warning": [[0, null], [3, null], [3, null], [12, null]]}, "docurls": ["api/crossover.html", "api/diversity.html", "api/plotting.html", "api/pyvrp.html", "api/repair.html", "api/search.html", "api/stop.html", "dev/benchmarking.html", "dev/contributing.html", "dev/new_vrp_variants.html", "dev/supported_vrplib_fields.html", "examples/basic_vrps.html", "examples/quick_tutorial.html", "examples/using_pyvrp_components.html", "index.html", "setup/benchmarks.html", "setup/citing.html", "setup/getting_help.html", "setup/installation.html", "setup/introduction_to_hgs.html", "setup/introduction_to_vrp.html"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "indexentries": {"__and__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__and__", false]], "__call__() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.__call__", false]], "__call__() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.__call__", false]], "__call__() (searchmethod method)": [[5, "pyvrp.search.SearchMethod.SearchMethod.__call__", false]], "__call__() (stoppingcriterion method)": [[6, "pyvrp.stop.StoppingCriterion.StoppingCriterion.__call__", false]], "__eq__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__eq__", false]], "__getitem__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__getitem__", false]], "__invert__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__invert__", false]], "__iter__() (clientgroup method)": [[3, "pyvrp._pyvrp.ClientGroup.__iter__", false]], "__iter__() (population method)": [[3, "pyvrp.Population.Population.__iter__", false]], "__len__() (clientgroup method)": [[3, "pyvrp._pyvrp.ClientGroup.__len__", false]], "__len__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__len__", false]], "__len__() (population method)": [[3, "pyvrp.Population.Population.__len__", false]], "__or__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__or__", false]], "__setitem__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__setitem__", false]], "__xor__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__xor__", false]], "add() (population method)": [[3, "pyvrp.Population.Population.add", false]], "add_client() (clientgroup method)": [[3, "pyvrp._pyvrp.ClientGroup.add_client", false]], "add_client() (model method)": [[3, "pyvrp.Model.Model.add_client", false]], "add_client_group() (model method)": [[3, "pyvrp.Model.Model.add_client_group", false]], "add_depot() (model method)": [[3, "pyvrp.Model.Model.add_depot", false]], "add_edge() (model method)": [[3, "pyvrp.Model.Model.add_edge", false]], "add_edge() (profile method)": [[3, "pyvrp.Model.Profile.add_edge", false]], "add_node_operator() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.add_node_operator", false]], "add_profile() (model method)": [[3, "pyvrp.Model.Model.add_profile", false]], "add_route_operator() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.add_route_operator", false]], "add_vehicle_type() (model method)": [[3, "pyvrp.Model.Model.add_vehicle_type", false]], "all() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.all", false]], "any() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.any", false]], "backhaul_section": [[10, "term-BACKHAUL_SECTION", true]], "booster_cost_evaluator() (penaltymanager method)": [[3, "pyvrp.PenaltyManager.PenaltyManager.booster_cost_evaluator", false]], "broken_pairs_distance() (in module pyvrp.diversity._diversity)": [[1, "pyvrp.diversity._diversity.broken_pairs_distance", false]], "capacity": [[10, "term-CAPACITY", true]], "capacity (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.capacity", false]], "capacity_section": [[10, "term-CAPACITY_SECTION", true]], "centroid() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.centroid", false]], "centroid() (route method)": [[3, "pyvrp._pyvrp.Route.centroid", false]], "clear() (clientgroup method)": [[3, "pyvrp._pyvrp.ClientGroup.clear", false]], "clear() (population method)": [[3, "pyvrp.Population.Population.clear", false]], "client (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.Client", false]], "clientgroup (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.ClientGroup", false]], "clients (clientgroup attribute)": [[3, "pyvrp._pyvrp.ClientGroup.clients", false]], "clients() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.clients", false]], "collect_from() (statistics method)": [[3, "pyvrp.Statistics.Statistics.collect_from", false]], "compute_neighbours() (in module pyvrp.search.neighbourhood)": [[5, "pyvrp.search.neighbourhood.compute_neighbours", false]], "cost() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.cost", false]], "cost() (result method)": [[3, "pyvrp.Result.Result.cost", false]], "cost_evaluator() (penaltymanager method)": [[3, "pyvrp.PenaltyManager.PenaltyManager.cost_evaluator", false]], "costevaluator (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.CostEvaluator", false]], "count() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.count", false]], "data() (model method)": [[3, "pyvrp.Model.Model.data", false]], "delivery (client attribute)": [[3, "pyvrp._pyvrp.Client.delivery", false]], "delivery() (route method)": [[3, "pyvrp._pyvrp.Route.delivery", false]], "demand_section": [[10, "term-DEMAND_SECTION", true]], "depot (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.Depot", false]], "depot_section": [[10, "term-DEPOT_SECTION", true]], "depots() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.depots", false]], "dimension": [[10, "term-DIMENSION", true]], "dist_penalty() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.dist_penalty", false]], "distance() (route method)": [[3, "pyvrp._pyvrp.Route.distance", false]], "distance() (solution method)": [[3, "pyvrp._pyvrp.Solution.distance", false]], "distance_cost() (route method)": [[3, "pyvrp._pyvrp.Route.distance_cost", false]], "distance_cost() (solution method)": [[3, "pyvrp._pyvrp.Solution.distance_cost", false]], "distance_matrices() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.distance_matrices", false]], "distance_matrix() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.distance_matrix", false]], "duration() (route method)": [[3, "pyvrp._pyvrp.Route.duration", false]], "duration() (solution method)": [[3, "pyvrp._pyvrp.Solution.duration", false]], "duration_cost() (route method)": [[3, "pyvrp._pyvrp.Route.duration_cost", false]], "duration_cost() (solution method)": [[3, "pyvrp._pyvrp.Solution.duration_cost", false]], "duration_matrices() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.duration_matrices", false]], "duration_matrix() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.duration_matrix", false]], "dynamicbitset (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.DynamicBitset", false]], "edge (class in pyvrp.model)": [[3, "pyvrp.Model.Edge", false]], "edge_weight_format": [[10, "term-EDGE_WEIGHT_FORMAT", true]], "edge_weight_section": [[10, "term-EDGE_WEIGHT_SECTION", true]], "edge_weight_type": [[10, "term-EDGE_WEIGHT_TYPE", true]], "end_depot (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.end_depot", false]], "end_depot() (route method)": [[3, "pyvrp._pyvrp.Route.end_depot", false]], "end_time() (route method)": [[3, "pyvrp._pyvrp.Route.end_time", false]], "excess_distance() (route method)": [[3, "pyvrp._pyvrp.Route.excess_distance", false]], "excess_distance() (solution method)": [[3, "pyvrp._pyvrp.Solution.excess_distance", false]], "excess_load() (route method)": [[3, "pyvrp._pyvrp.Route.excess_load", false]], "excess_load() (solution method)": [[3, "pyvrp._pyvrp.Solution.excess_load", false]], "exchange10 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange10", false]], "exchange11 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange11", false]], "exchange20 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange20", false]], "exchange21 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange21", false]], "exchange22 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange22", false]], "exchange30 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange30", false]], "exchange31 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange31", false]], "exchange32 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange32", false]], "exchange33 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange33", false]], "firstfeasible (class in pyvrp.stop.firstfeasible)": [[6, "pyvrp.stop.FirstFeasible.FirstFeasible", false]], "fixed_cost (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.fixed_cost", false]], "fixed_vehicle_cost() (solution method)": [[3, "pyvrp._pyvrp.Solution.fixed_vehicle_cost", false]], "from_csv() (statistics class method)": [[3, "pyvrp.Statistics.Statistics.from_csv", false]], "from_data() (model class method)": [[3, "pyvrp.Model.Model.from_data", false]], "from_file() (solveparams class method)": [[3, "pyvrp.solve.SolveParams.from_file", false]], "generation_size (populationparams attribute)": [[3, "pyvrp.Population.PopulationParams.generation_size", false]], "geneticalgorithm (class in pyvrp.geneticalgorithm)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithm", false]], "geneticalgorithmparams (class in pyvrp.geneticalgorithm)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithmParams", false]], "greedy_repair() (in module pyvrp.repair._repair)": [[4, "pyvrp.repair._repair.greedy_repair", false]], "group (client attribute)": [[3, "pyvrp._pyvrp.Client.group", false]], "group() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.group", false]], "groups (model property)": [[3, "pyvrp.Model.Model.groups", false]], "groups() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.groups", false]], "has_excess_distance() (route method)": [[3, "pyvrp._pyvrp.Route.has_excess_distance", false]], "has_excess_distance() (solution method)": [[3, "pyvrp._pyvrp.Solution.has_excess_distance", false]], "has_excess_load() (route method)": [[3, "pyvrp._pyvrp.Route.has_excess_load", false]], "has_excess_load() (solution method)": [[3, "pyvrp._pyvrp.Solution.has_excess_load", false]], "has_time_warp() (route method)": [[3, "pyvrp._pyvrp.Route.has_time_warp", false]], "has_time_warp() (solution method)": [[3, "pyvrp._pyvrp.Solution.has_time_warp", false]], "init_from() (penaltymanager class method)": [[3, "pyvrp.PenaltyManager.PenaltyManager.init_from", false]], "intensify() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.intensify", false]], "is_complete() (solution method)": [[3, "pyvrp._pyvrp.Solution.is_complete", false]], "is_feasible() (result method)": [[3, "pyvrp.Result.Result.is_feasible", false]], "is_feasible() (route method)": [[3, "pyvrp._pyvrp.Route.is_feasible", false]], "is_feasible() (solution method)": [[3, "pyvrp._pyvrp.Solution.is_feasible", false]], "is_group_feasible() (solution method)": [[3, "pyvrp._pyvrp.Solution.is_group_feasible", false]], "lb_diversity (populationparams attribute)": [[3, "pyvrp.Population.PopulationParams.lb_diversity", false]], "linehaul_section": [[10, "term-LINEHAUL_SECTION", true]], "load_penalty() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.load_penalty", false]], "localsearch (class in pyvrp.search.localsearch)": [[5, "pyvrp.search.LocalSearch.LocalSearch", false]], "location() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.location", false]], "locations (model property)": [[3, "pyvrp.Model.Model.locations", false]], "make_random() (solution method)": [[3, "pyvrp._pyvrp.Solution.make_random", false]], "max() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.max", false]], "max_distance (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.max_distance", false]], "max_duration (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.max_duration", false]], "max_pop_size (populationparams property)": [[3, "pyvrp.Population.PopulationParams.max_pop_size", false]], "maxiterations (class in pyvrp.stop.maxiterations)": [[6, "pyvrp.stop.MaxIterations.MaxIterations", false]], "maxruntime (class in pyvrp.stop.maxruntime)": [[6, "pyvrp.stop.MaxRuntime.MaxRuntime", false]], "min() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.min", false]], "min_pop_size (populationparams attribute)": [[3, "pyvrp.Population.PopulationParams.min_pop_size", false]], "minimise_fleet() (in module pyvrp.minimise_fleet)": [[3, "pyvrp.minimise_fleet.minimise_fleet", false]], "model (class in pyvrp.model)": [[3, "pyvrp.Model.Model", false]], "module": [[0, "module-pyvrp.crossover", false], [0, "module-pyvrp.crossover.ordered_crossover", false], [0, "module-pyvrp.crossover.selective_route_exchange", false], [1, "module-pyvrp.diversity", false], [1, "module-pyvrp.diversity._diversity", false], [2, "module-pyvrp.plotting", false], [2, "module-pyvrp.plotting.plot_coordinates", false], [2, "module-pyvrp.plotting.plot_demands", false], [2, "module-pyvrp.plotting.plot_diversity", false], [2, "module-pyvrp.plotting.plot_instance", false], [2, "module-pyvrp.plotting.plot_objectives", false], [2, "module-pyvrp.plotting.plot_result", false], [2, "module-pyvrp.plotting.plot_route_schedule", false], [2, "module-pyvrp.plotting.plot_runtimes", false], [2, "module-pyvrp.plotting.plot_solution", false], [2, "module-pyvrp.plotting.plot_time_windows", false], [3, "module-pyvrp", false], [3, "module-pyvrp.GeneticAlgorithm", false], [3, "module-pyvrp.Model", false], [3, "module-pyvrp.PenaltyManager", false], [3, "module-pyvrp.Population", false], [3, "module-pyvrp.Result", false], [3, "module-pyvrp.Statistics", false], [3, "module-pyvrp._pyvrp", false], [3, "module-pyvrp.exceptions", false], [3, "module-pyvrp.minimise_fleet", false], [3, "module-pyvrp.read", false], [3, "module-pyvrp.show_versions", false], [3, "module-pyvrp.solve", false], [4, "module-pyvrp.repair", false], [4, "module-pyvrp.repair._repair", false], [5, "module-pyvrp.search", false], [5, "module-pyvrp.search.LocalSearch", false], [5, "module-pyvrp.search.SearchMethod", false], [5, "module-pyvrp.search._search", false], [5, "module-pyvrp.search.neighbourhood", false], [6, "module-pyvrp.stop", false], [6, "module-pyvrp.stop.FirstFeasible", false], [6, "module-pyvrp.stop.MaxIterations", false], [6, "module-pyvrp.stop.MaxRuntime", false], [6, "module-pyvrp.stop.MultipleCriteria", false], [6, "module-pyvrp.stop.NoImprovement", false], [6, "module-pyvrp.stop.StoppingCriterion", false]], "multiplecriteria (class in pyvrp.stop.multiplecriteria)": [[6, "pyvrp.stop.MultipleCriteria.MultipleCriteria", false]], "mutually_exclusive (clientgroup attribute)": [[3, "pyvrp._pyvrp.ClientGroup.mutually_exclusive", false]], "mutually_exclusive_group_section": [[10, "term-MUTUALLY_EXCLUSIVE_GROUP_SECTION", true]], "name (client attribute)": [[3, "pyvrp._pyvrp.Client.name", false]], "name (depot attribute)": [[3, "pyvrp._pyvrp.Depot.name", false]], "name (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.name", false]], "nb_close (populationparams attribute)": [[3, "pyvrp.Population.PopulationParams.nb_close", false]], "nb_elite (populationparams attribute)": [[3, "pyvrp.Population.PopulationParams.nb_elite", false]], "nb_granular (neighbourhoodparams attribute)": [[5, "pyvrp.search.neighbourhood.NeighbourhoodParams.nb_granular", false]], "nb_iter_no_improvement (geneticalgorithmparams attribute)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithmParams.nb_iter_no_improvement", false]], "nearest_route_insert() (in module pyvrp.repair._repair)": [[4, "pyvrp.repair._repair.nearest_route_insert", false]], "neighbourhoodparams (class in pyvrp.search.neighbourhood)": [[5, "pyvrp.search.neighbourhood.NeighbourhoodParams", false]], "neighbours() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.neighbours", false]], "neighbours() (solution method)": [[3, "pyvrp._pyvrp.Solution.neighbours", false]], "node_coord_section": [[10, "term-NODE_COORD_SECTION", true]], "nodeoperator (class in pyvrp.search._search)": [[5, "pyvrp.search._search.NodeOperator", false]], "noimprovement (class in pyvrp.stop.noimprovement)": [[6, "pyvrp.stop.NoImprovement.NoImprovement", false]], "none() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.none", false]], "num_available (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.num_available", false]], "num_clients (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_clients", false]], "num_clients() (solution method)": [[3, "pyvrp._pyvrp.Solution.num_clients", false]], "num_depots (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_depots", false]], "num_feasible() (population method)": [[3, "pyvrp.Population.Population.num_feasible", false]], "num_groups (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_groups", false]], "num_infeasible() (population method)": [[3, "pyvrp.Population.Population.num_infeasible", false]], "num_load_dimensions (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_load_dimensions", false]], "num_locations (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_locations", false]], "num_missing_clients() (solution method)": [[3, "pyvrp._pyvrp.Solution.num_missing_clients", false]], "num_profiles (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_profiles", false]], "num_routes() (solution method)": [[3, "pyvrp._pyvrp.Solution.num_routes", false]], "num_vehicle_types (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_vehicle_types", false]], "num_vehicles (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_vehicles", false]], "ordered_crossover() (in module pyvrp.crossover.ordered_crossover)": [[0, "pyvrp.crossover.ordered_crossover.ordered_crossover", false]], "penalised_cost() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.penalised_cost", false]], "penalty_decrease (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.penalty_decrease", false]], "penalty_increase (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.penalty_increase", false]], "penaltyboundwarning": [[3, "pyvrp.exceptions.PenaltyBoundWarning", false]], "penaltymanager (class in pyvrp.penaltymanager)": [[3, "pyvrp.PenaltyManager.PenaltyManager", false]], "penaltyparams (class in pyvrp.penaltymanager)": [[3, "pyvrp.PenaltyManager.PenaltyParams", false]], "pickup (client attribute)": [[3, "pyvrp._pyvrp.Client.pickup", false]], "pickup() (route method)": [[3, "pyvrp._pyvrp.Route.pickup", false]], "plot_coordinates() (in module pyvrp.plotting.plot_coordinates)": [[2, "pyvrp.plotting.plot_coordinates.plot_coordinates", false]], "plot_demands() (in module pyvrp.plotting.plot_demands)": [[2, "pyvrp.plotting.plot_demands.plot_demands", false]], "plot_diversity() (in module pyvrp.plotting.plot_diversity)": [[2, "pyvrp.plotting.plot_diversity.plot_diversity", false]], "plot_instance() (in module pyvrp.plotting.plot_instance)": [[2, "pyvrp.plotting.plot_instance.plot_instance", false]], "plot_objectives() (in module pyvrp.plotting.plot_objectives)": [[2, "pyvrp.plotting.plot_objectives.plot_objectives", false]], "plot_result() (in module pyvrp.plotting.plot_result)": [[2, "pyvrp.plotting.plot_result.plot_result", false]], "plot_route_schedule() (in module pyvrp.plotting.plot_route_schedule)": [[2, "pyvrp.plotting.plot_route_schedule.plot_route_schedule", false]], "plot_runtimes() (in module pyvrp.plotting.plot_runtimes)": [[2, "pyvrp.plotting.plot_runtimes.plot_runtimes", false]], "plot_solution() (in module pyvrp.plotting.plot_solution)": [[2, "pyvrp.plotting.plot_solution.plot_solution", false]], "plot_time_windows() (in module pyvrp.plotting.plot_time_windows)": [[2, "pyvrp.plotting.plot_time_windows.plot_time_windows", false]], "population (class in pyvrp.population)": [[3, "pyvrp.Population.Population", false]], "populationparams (class in pyvrp.population)": [[3, "pyvrp.Population.PopulationParams", false]], "prize (client attribute)": [[3, "pyvrp._pyvrp.Client.prize", false]], "prize_section": [[10, "term-PRIZE_SECTION", true]], "prizes() (route method)": [[3, "pyvrp._pyvrp.Route.prizes", false]], "prizes() (solution method)": [[3, "pyvrp._pyvrp.Solution.prizes", false]], "problemdata (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.ProblemData", false]], "profile (class in pyvrp.model)": [[3, "pyvrp.Model.Profile", false]], "profile (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.profile", false]], "profiles (model property)": [[3, "pyvrp.Model.Model.profiles", false]], "pyvrp": [[3, "module-pyvrp", false]], "pyvrp._pyvrp": [[3, "module-pyvrp._pyvrp", false]], "pyvrp.crossover": [[0, "module-pyvrp.crossover", false]], "pyvrp.crossover.ordered_crossover": [[0, "module-pyvrp.crossover.ordered_crossover", false]], "pyvrp.crossover.selective_route_exchange": [[0, "module-pyvrp.crossover.selective_route_exchange", false]], "pyvrp.diversity": [[1, "module-pyvrp.diversity", false]], "pyvrp.diversity._diversity": [[1, "module-pyvrp.diversity._diversity", false]], "pyvrp.exceptions": [[3, "module-pyvrp.exceptions", false]], "pyvrp.geneticalgorithm": [[3, "module-pyvrp.GeneticAlgorithm", false]], "pyvrp.minimise_fleet": [[3, "module-pyvrp.minimise_fleet", false]], "pyvrp.model": [[3, "module-pyvrp.Model", false]], "pyvrp.penaltymanager": [[3, "module-pyvrp.PenaltyManager", false]], "pyvrp.plotting": [[2, "module-pyvrp.plotting", false]], "pyvrp.plotting.plot_coordinates": [[2, "module-pyvrp.plotting.plot_coordinates", false]], "pyvrp.plotting.plot_demands": [[2, "module-pyvrp.plotting.plot_demands", false]], "pyvrp.plotting.plot_diversity": [[2, "module-pyvrp.plotting.plot_diversity", false]], "pyvrp.plotting.plot_instance": [[2, "module-pyvrp.plotting.plot_instance", false]], "pyvrp.plotting.plot_objectives": [[2, "module-pyvrp.plotting.plot_objectives", false]], "pyvrp.plotting.plot_result": [[2, "module-pyvrp.plotting.plot_result", false]], "pyvrp.plotting.plot_route_schedule": [[2, "module-pyvrp.plotting.plot_route_schedule", false]], "pyvrp.plotting.plot_runtimes": [[2, "module-pyvrp.plotting.plot_runtimes", false]], "pyvrp.plotting.plot_solution": [[2, "module-pyvrp.plotting.plot_solution", false]], "pyvrp.plotting.plot_time_windows": [[2, "module-pyvrp.plotting.plot_time_windows", false]], "pyvrp.population": [[3, "module-pyvrp.Population", false]], "pyvrp.read": [[3, "module-pyvrp.read", false]], "pyvrp.repair": [[4, "module-pyvrp.repair", false]], "pyvrp.repair._repair": [[4, "module-pyvrp.repair._repair", false]], "pyvrp.result": [[3, "module-pyvrp.Result", false]], "pyvrp.search": [[5, "module-pyvrp.search", false]], "pyvrp.search._search": [[5, "module-pyvrp.search._search", false]], "pyvrp.search.localsearch": [[5, "module-pyvrp.search.LocalSearch", false]], "pyvrp.search.neighbourhood": [[5, "module-pyvrp.search.neighbourhood", false]], "pyvrp.search.searchmethod": [[5, "module-pyvrp.search.SearchMethod", false]], "pyvrp.show_versions": [[3, "module-pyvrp.show_versions", false]], "pyvrp.solve": [[3, "module-pyvrp.solve", false]], "pyvrp.statistics": [[3, "module-pyvrp.Statistics", false]], "pyvrp.stop": [[6, "module-pyvrp.stop", false]], "pyvrp.stop.firstfeasible": [[6, "module-pyvrp.stop.FirstFeasible", false]], "pyvrp.stop.maxiterations": [[6, "module-pyvrp.stop.MaxIterations", false]], "pyvrp.stop.maxruntime": [[6, "module-pyvrp.stop.MaxRuntime", false]], "pyvrp.stop.multiplecriteria": [[6, "module-pyvrp.stop.MultipleCriteria", false]], "pyvrp.stop.noimprovement": [[6, "module-pyvrp.stop.NoImprovement", false]], "pyvrp.stop.stoppingcriterion": [[6, "module-pyvrp.stop.StoppingCriterion", false]], "rand() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.rand", false]], "randint() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.randint", false]], "randomnumbergenerator (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.RandomNumberGenerator", false]], "read() (in module pyvrp.read)": [[3, "pyvrp.read.read", false]], "read_solution() (in module pyvrp.read)": [[3, "pyvrp.read.read_solution", false]], "register() (penaltymanager method)": [[3, "pyvrp.PenaltyManager.PenaltyManager.register", false]], "release_time (client attribute)": [[3, "pyvrp._pyvrp.Client.release_time", false]], "release_time() (route method)": [[3, "pyvrp._pyvrp.Route.release_time", false]], "release_time_section": [[10, "term-RELEASE_TIME_SECTION", true]], "repair_booster (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.repair_booster", false]], "repair_probability (geneticalgorithmparams attribute)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithmParams.repair_probability", false]], "replace() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.replace", false]], "replace() (vehicletype method)": [[3, "pyvrp._pyvrp.VehicleType.replace", false]], "required (client attribute)": [[3, "pyvrp._pyvrp.Client.required", false]], "required (clientgroup attribute)": [[3, "pyvrp._pyvrp.ClientGroup.required", false]], "reset() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.reset", false]], "result (class in pyvrp.result)": [[3, "pyvrp.Result.Result", false]], "route (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.Route", false]], "routeoperator (class in pyvrp.search._search)": [[5, "pyvrp.search._search.RouteOperator", false]], "routes() (solution method)": [[3, "pyvrp._pyvrp.Solution.routes", false]], "run() (geneticalgorithm method)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithm.run", false]], "scalingwarning": [[3, "pyvrp.exceptions.ScalingWarning", false]], "search() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.search", false]], "searchmethod (class in pyvrp.search.searchmethod)": [[5, "pyvrp.search.SearchMethod.SearchMethod", false]], "select() (population method)": [[3, "pyvrp.Population.Population.select", false]], "selective_route_exchange() (in module pyvrp.crossover.selective_route_exchange)": [[0, "pyvrp.crossover.selective_route_exchange.selective_route_exchange", false]], "service_duration (client attribute)": [[3, "pyvrp._pyvrp.Client.service_duration", false]], "service_duration() (route method)": [[3, "pyvrp._pyvrp.Route.service_duration", false]], "service_time": [[10, "term-SERVICE_TIME", true]], "service_time_section": [[10, "term-SERVICE_TIME_SECTION", true]], "set_neighbours() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.set_neighbours", false]], "show_versions() (in module pyvrp.show_versions)": [[3, "pyvrp.show_versions.show_versions", false]], "slack() (route method)": [[3, "pyvrp._pyvrp.Route.slack", false]], "solution (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.Solution", false]], "solutions_between_updates (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.solutions_between_updates", false]], "solve() (in module pyvrp.solve)": [[3, "pyvrp.solve.solve", false]], "solve() (model method)": [[3, "pyvrp.Model.Model.solve", false]], "solveparams (class in pyvrp.solve)": [[3, "pyvrp.solve.SolveParams", false]], "start_depot (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.start_depot", false]], "start_depot() (route method)": [[3, "pyvrp._pyvrp.Route.start_depot", false]], "start_time() (route method)": [[3, "pyvrp._pyvrp.Route.start_time", false]], "state() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.state", false]], "statistics (class in pyvrp.statistics)": [[3, "pyvrp.Statistics.Statistics", false]], "stoppingcriterion (class in pyvrp.stop.stoppingcriterion)": [[6, "pyvrp.stop.StoppingCriterion.StoppingCriterion", false]], "summary() (result method)": [[3, "pyvrp.Result.Result.summary", false]], "swaproutes (class in pyvrp.search._search)": [[5, "pyvrp.search._search.SwapRoutes", false]], "swapstar (class in pyvrp.search._search)": [[5, "pyvrp.search._search.SwapStar", false]], "swaptails (class in pyvrp.search._search)": [[5, "pyvrp.search._search.SwapTails", false]], "symmetric_neighbours (neighbourhoodparams attribute)": [[5, "pyvrp.search.neighbourhood.NeighbourhoodParams.symmetric_neighbours", false]], "symmetric_proximity (neighbourhoodparams attribute)": [[5, "pyvrp.search.neighbourhood.NeighbourhoodParams.symmetric_proximity", false]], "target_feasible (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.target_feasible", false]], "time_warp() (route method)": [[3, "pyvrp._pyvrp.Route.time_warp", false]], "time_warp() (solution method)": [[3, "pyvrp._pyvrp.Solution.time_warp", false]], "time_window_section": [[10, "term-TIME_WINDOW_SECTION", true]], "to_csv() (statistics method)": [[3, "pyvrp.Statistics.Statistics.to_csv", false]], "tournament() (population method)": [[3, "pyvrp.Population.Population.tournament", false]], "travel_duration() (route method)": [[3, "pyvrp._pyvrp.Route.travel_duration", false]], "tspwarning": [[3, "pyvrp.exceptions.TspWarning", false]], "tw_early (client attribute)": [[3, "pyvrp._pyvrp.Client.tw_early", false]], "tw_early (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.tw_early", false]], "tw_late (client attribute)": [[3, "pyvrp._pyvrp.Client.tw_late", false]], "tw_late (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.tw_late", false]], "tw_penalty() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.tw_penalty", false]], "ub_diversity (populationparams attribute)": [[3, "pyvrp.Population.PopulationParams.ub_diversity", false]], "uncollected_prizes() (solution method)": [[3, "pyvrp._pyvrp.Solution.uncollected_prizes", false]], "unit_distance_cost (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.unit_distance_cost", false]], "unit_duration_cost (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.unit_duration_cost", false]], "vehicle_type() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.vehicle_type", false]], "vehicle_type() (route method)": [[3, "pyvrp._pyvrp.Route.vehicle_type", false]], "vehicle_types (model property)": [[3, "pyvrp.Model.Model.vehicle_types", false]], "vehicle_types() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.vehicle_types", false]], "vehicles": [[10, "term-VEHICLES", true]], "vehicles_allowed_clients_section": [[10, "term-VEHICLES_ALLOWED_CLIENTS_SECTION", true]], "vehicles_depot_section": [[10, "term-VEHICLES_DEPOT_SECTION", true]], "vehicles_max_distance": [[10, "term-VEHICLES_MAX_DISTANCE", true]], "vehicles_max_distance_section": [[10, "term-VEHICLES_MAX_DISTANCE_SECTION", true]], "vehicles_max_duration": [[10, "term-VEHICLES_MAX_DURATION", true]], "vehicles_max_duration_section": [[10, "term-VEHICLES_MAX_DURATION_SECTION", true]], "vehicletype (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.VehicleType", false]], "visits() (route method)": [[3, "pyvrp._pyvrp.Route.visits", false]], "wait_duration() (route method)": [[3, "pyvrp._pyvrp.Route.wait_duration", false]], "weight_time_warp (neighbourhoodparams attribute)": [[5, "pyvrp.search.neighbourhood.NeighbourhoodParams.weight_time_warp", false]], "weight_wait_time (neighbourhoodparams attribute)": [[5, "pyvrp.search.neighbourhood.NeighbourhoodParams.weight_wait_time", false]], "x (client attribute)": [[3, "pyvrp._pyvrp.Client.x", false]], "x (depot attribute)": [[3, "pyvrp._pyvrp.Depot.x", false]], "y (client attribute)": [[3, "pyvrp._pyvrp.Client.y", false]], "y (depot attribute)": [[3, "pyvrp._pyvrp.Depot.y", false]]}, "objects": {"": [[3, 0, 0, 1, "pyvrp", ""]], "pyvrp": [[3, 0, 0, 1, "GeneticAlgorithm", ""], [3, 0, 0, 1, "Model", ""], [3, 0, 0, 1, "PenaltyManager", ""], [3, 0, 0, 1, "Population", ""], [3, 0, 0, 1, "Result", ""], [3, 0, 0, 1, "Statistics", ""], [3, 0, 0, 1, "_pyvrp", ""], [0, 0, 0, 1, "crossover", ""], [1, 0, 0, 1, "diversity", ""], [3, 0, 0, 1, "exceptions", ""], [3, 0, 0, 1, "minimise_fleet", ""], [2, 0, 0, 1, "plotting", ""], [3, 0, 0, 1, "read", ""], [4, 0, 0, 1, "repair", ""], [5, 0, 0, 1, "search", ""], [3, 0, 0, 1, "show_versions", ""], [3, 0, 0, 1, "solve", ""], [6, 0, 0, 1, "stop", ""]], "pyvrp.GeneticAlgorithm": [[3, 1, 1, 0, "GeneticAlgorithm", "Creates a GeneticAlgorithm instance."], [3, 1, 1, 0, "GeneticAlgorithmParams", "Parameters for the genetic algorithm."]], "pyvrp.GeneticAlgorithm.GeneticAlgorithm": [[3, 3, 1, 0, "run", "Runs the genetic algorithm with the provided stopping criterion."]], "pyvrp.GeneticAlgorithm.GeneticAlgorithm.__init__": [[3, 2, 2, 0, "crossover_op", "Crossover operator to use for generating offspring."], [3, 2, 2, 0, "data", "Data object describing the problem to be solved."], [3, 2, 2, 0, "initial_solutions", "Initial solutions to use to initialise the population."], [3, 2, 2, 0, "params", "Genetic algorithm parameters."], [3, 2, 2, 0, "penalty_manager", "Penalty manager to use."], [3, 2, 2, 0, "population", "Population to use."], [3, 2, 2, 0, "rng", "Random number generator."], [3, 2, 2, 0, "search_method", "Search method to use."]], "pyvrp.GeneticAlgorithm.GeneticAlgorithm.run": [[3, 2, 2, 0, "collect_stats", "Whether to collect statistics about the solver's progress."], [3, 2, 2, 0, "display", "Whether to display information about the solver progress."], [3, 2, 2, 0, "stop", "Stopping criterion to use."]], "pyvrp.GeneticAlgorithm.GeneticAlgorithmParams": [[3, 4, 1, 0, "nb_iter_no_improvement", "Number of iterations without improvement before a restart occurs."], [3, 4, 1, 0, "repair_probability", "Probability of repairing an infeasible solution."]], "pyvrp.GeneticAlgorithm.GeneticAlgorithmParams.__init__": [[3, 2, 2, 0, "nb_iter_no_improvement", "Number of iterations without any improvement needed before a restart occurs."], [3, 2, 2, 0, "repair_probability", "Probability (in [0, 1]) of repairing an infeasible solution. If the reparation makes the solution feasible, it is also added to the population in the same iteration."]], "pyvrp.Model": [[3, 1, 1, 0, "Edge", "Stores an edge connecting two locations."], [3, 1, 1, 0, "Model", "A simple interface for modelling vehicle routing problems with PyVRP."], [3, 1, 1, 0, "Profile", "Stores a routing profile."]], "pyvrp.Model.Edge.__init__": [[3, 2, 2, "pyvrp.Model.Edge", "distance", "Stores an edge connecting two locations."], [3, 2, 2, "pyvrp.Model.Edge", "duration", "Stores an edge connecting two locations."], [3, 2, 2, "pyvrp.Model.Edge", "frm", "Stores an edge connecting two locations."], [3, 2, 2, "pyvrp.Model.Edge", "to", "Stores an edge connecting two locations."]], "pyvrp.Model.Model": [[3, 3, 1, 0, "add_client", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 3, 1, 0, "add_client_group", "Adds a new, possibly optional, client group to the model. Returns the created group."], [3, 3, 1, 0, "add_depot", "Adds a depot with the given attributes to the model. Returns the created Depot instance."], [3, 3, 1, 0, "add_edge", "Adds an edge (i, j) between frm (i) and to (j). The edge can be given distance and duration attributes. Distance is required, but the default duration is zero. Returns the created edge."], [3, 3, 1, 0, "add_profile", "Adds a new routing profile to the model."], [3, 3, 1, 0, "add_vehicle_type", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 3, 1, 0, "data", "Creates and returns a ProblemData instance from this model's attributes."], [3, 3, 1, 0, "from_data", "Constructs a model instance from the given data."], [3, 5, 1, 0, "groups", "Returns all client groups currently in the model."], [3, 5, 1, 0, "locations", "Returns all locations (depots and clients) in the current model. The clients in the routes of the solution returned by solve() can be used to index these locations."], [3, 5, 1, 0, "profiles", "Returns all routing profiles currently in the model."], [3, 3, 1, 0, "solve", "Solve this model."], [3, 5, 1, 0, "vehicle_types", "Returns the vehicle types in the current model. The routes of the solution returned by solve() have a property vehicle_type() that can be used to index these vehicle types."]], "pyvrp.Model.Model.add_client": [[3, 2, 2, "pyvrp.Model.Model.add_client", "delivery", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 2, 2, "pyvrp.Model.Model.add_client", "group", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 2, 2, "pyvrp.Model.Model.add_client", "name", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 2, 2, "pyvrp.Model.Model.add_client", "pickup", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 2, 2, "pyvrp.Model.Model.add_client", "prize", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 2, 2, "pyvrp.Model.Model.add_client", "release_time", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 2, 2, "pyvrp.Model.Model.add_client", "required", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 2, 2, "pyvrp.Model.Model.add_client", "service_duration", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 2, 2, "pyvrp.Model.Model.add_client", "tw_early", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 2, 2, "pyvrp.Model.Model.add_client", "tw_late", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 2, 2, "pyvrp.Model.Model.add_client", "x", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 2, 2, "pyvrp.Model.Model.add_client", "y", "Adds a client with the given attributes to the model. Returns the created Client instance."]], "pyvrp.Model.Model.add_client_group": [[3, 2, 2, "pyvrp.Model.Model.add_client_group", "required", "Adds a new, possibly optional, client group to the model. Returns the created group."]], "pyvrp.Model.Model.add_depot": [[3, 2, 2, "pyvrp.Model.Model.add_depot", "name", "Adds a depot with the given attributes to the model. Returns the created Depot instance."], [3, 2, 2, "pyvrp.Model.Model.add_depot", "x", "Adds a depot with the given attributes to the model. Returns the created Depot instance."], [3, 2, 2, "pyvrp.Model.Model.add_depot", "y", "Adds a depot with the given attributes to the model. Returns the created Depot instance."]], "pyvrp.Model.Model.add_edge": [[3, 2, 2, "pyvrp.Model.Model.add_edge", "distance", "Adds an edge (i, j) between frm (i) and to (j). The edge can be given distance and duration attributes. Distance is required, but the default duration is zero. Returns the created edge."], [3, 2, 2, "pyvrp.Model.Model.add_edge", "duration", "Adds an edge (i, j) between frm (i) and to (j). The edge can be given distance and duration attributes. Distance is required, but the default duration is zero. Returns the created edge."], [3, 2, 2, "pyvrp.Model.Model.add_edge", "frm", "Adds an edge (i, j) between frm (i) and to (j). The edge can be given distance and duration attributes. Distance is required, but the default duration is zero. Returns the created edge."], [3, 2, 2, "pyvrp.Model.Model.add_edge", "profile", "Adds an edge (i, j) between frm (i) and to (j). The edge can be given distance and duration attributes. Distance is required, but the default duration is zero. Returns the created edge."], [3, 2, 2, "pyvrp.Model.Model.add_edge", "to", "Adds an edge (i, j) between frm (i) and to (j). The edge can be given distance and duration attributes. Distance is required, but the default duration is zero. Returns the created edge."]], "pyvrp.Model.Model.add_vehicle_type": [[3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "capacity", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "end_depot", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "fixed_cost", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "max_distance", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "max_duration", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "name", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "num_available", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "profile", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "start_depot", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "tw_early", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "tw_late", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "unit_distance_cost", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."], [3, 2, 2, "pyvrp.Model.Model.add_vehicle_type", "unit_duration_cost", "Adds a vehicle type with the given attributes to the model. Returns the created VehicleType instance."]], "pyvrp.Model.Model.from_data": [[3, 2, 2, 0, "data", "Problem data to feed into the model."]], "pyvrp.Model.Model.solve": [[3, 2, 2, 0, "collect_stats", "Whether to collect statistics about the solver's progress."], [3, 2, 2, 0, "display", "Whether to display information about the solver progress."], [3, 2, 2, 0, "params", "Solver parameters to use."], [3, 2, 2, 0, "seed", "Seed value to use for the random number stream."], [3, 2, 2, 0, "stop", "Stopping criterion to use."]], "pyvrp.Model.Profile": [[3, 3, 1, 0, "add_edge", "Adds a new edge to this routing profile."]], "pyvrp.Model.Profile.add_edge": [[3, 2, 2, "pyvrp.Model.Profile.add_edge", "distance", "Adds a new edge to this routing profile."], [3, 2, 2, "pyvrp.Model.Profile.add_edge", "duration", "Adds a new edge to this routing profile."], [3, 2, 2, "pyvrp.Model.Profile.add_edge", "frm", "Adds a new edge to this routing profile."], [3, 2, 2, "pyvrp.Model.Profile.add_edge", "to", "Adds a new edge to this routing profile."]], "pyvrp.PenaltyManager": [[3, 1, 1, 0, "PenaltyManager", "Creates a PenaltyManager instance."], [3, 1, 1, 0, "PenaltyParams", "The penalty manager parameters."]], "pyvrp.PenaltyManager.PenaltyManager": [[3, 3, 1, 0, "booster_cost_evaluator", "Get a cost evaluator using the boosted current penalty values."], [3, 3, 1, 0, "cost_evaluator", "Get a cost evaluator using the current penalty values."], [3, 3, 1, 0, "init_from", "Initialises from the given data instance and parameter object. The initial penalty values are computed from the problem data."], [3, 3, 1, 0, "register", "Registers the feasibility dimensions of the given solution."]], "pyvrp.PenaltyManager.PenaltyManager.__init__": [[3, 2, 2, 0, "initial_penalties", "Initial penalty values for unit load (idx 0), duration (1), and distance (2) violations."], [3, 2, 2, 0, "params", "PenaltyManager parameters."]], "pyvrp.PenaltyManager.PenaltyManager.init_from": [[3, 2, 2, 0, "data", "Data instance to use when computing penalty values."], [3, 2, 2, 0, "params", "PenaltyManager parameters."]], "pyvrp.PenaltyManager.PenaltyManager.register": [[3, 2, 2, "pyvrp.PenaltyManager.PenaltyManager.register", "sol", "Registers the feasibility dimensions of the given solution."]], "pyvrp.PenaltyManager.PenaltyParams": [[3, 4, 1, 0, "penalty_decrease", "Amount p_d \\in [0, 1] by which the current penalties are decreased when sufficient feasible solutions (see target_feasible) have been found amongst the most recent registrations."], [3, 4, 1, 0, "penalty_increase", "Amount p_i \\ge 1 by which the current penalties are increased when insufficient feasible solutions (see target_feasible) have been found amongst the most recent registrations."], [3, 4, 1, 0, "repair_booster", "A repair booster value."], [3, 4, 1, 0, "solutions_between_updates", "Number of feasibility registrations between penalty value updates."], [3, 4, 1, 0, "target_feasible", "Target percentage p_f \\in [0, 1] of feasible registrations in the last solutions_between_updates registrations."]], "pyvrp.PenaltyManager.PenaltyParams.__init__": [[3, 2, 2, 0, "penalty_decrease", "Amount p_d \\in [0, 1] by which the current penalties are decreased when sufficient feasible solutions (see target_feasible) have been found amongst the most recent registrations."], [3, 2, 2, 0, "penalty_increase", "Amount p_i \\ge 1 by which the current penalties are increased when insufficient feasible solutions (see target_feasible) have been found amongst the most recent registrations."], [3, 2, 2, 0, "repair_booster", "A repair booster value r \\ge 1."], [3, 2, 2, 0, "solutions_between_updates", "Number of feasibility registrations between penalty value updates."], [3, 2, 2, 0, "target_feasible", "Target percentage p_f \\in [0, 1] of feasible registrations in the last solutions_between_updates registrations."]], "pyvrp.Population": [[3, 1, 1, 0, "Population", "Creates a Population instance."], [3, 1, 1, 0, "PopulationParams", "Parameter configuration for the Population."]], "pyvrp.Population.Population": [[3, 3, 1, 0, "__iter__", "Iterates over the solutions contained in this population."], [3, 3, 1, 0, "__len__", "Returns the current population size."], [3, 3, 1, 0, "add", "Inserts the given solution in the appropriate feasible or infeasible (sub)population."], [3, 3, 1, 0, "clear", "Clears the population by removing all solutions currently in the population."], [3, 3, 1, 0, "num_feasible", "Returns the number of feasible solutions in the population."], [3, 3, 1, 0, "num_infeasible", "Returns the number of infeasible solutions in the population."], [3, 3, 1, 0, "select", "Selects two (if possible non-identical) parents by tournament, subject to a diversity restriction."], [3, 3, 1, 0, "tournament", "Selects a solution from this population by k-ary tournament, based on the (internal) fitness values of the selected solutions."]], "pyvrp.Population.Population.__init__": [[3, 2, 2, 0, "diversity_op", "Operator to use to determine pairwise diversity between solutions."], [3, 2, 2, 0, "params", "Population parameters."]], "pyvrp.Population.Population.add": [[3, 2, 2, 0, "cost_evaluator", "CostEvaluator to use to compute the cost."], [3, 2, 2, 0, "solution", "Solution to add to the population."]], "pyvrp.Population.Population.select": [[3, 2, 2, 0, "cost_evaluator", "Cost evaluator to use when computing the fitness."], [3, 2, 2, 0, "k", "The number of solutions to draw for the tournament."], [3, 2, 2, 0, "rng", "Random number generator."]], "pyvrp.Population.Population.tournament": [[3, 2, 2, 0, "cost_evaluator", "Cost evaluator to use when computing the fitness."], [3, 2, 2, 0, "k", "The number of solutions to draw for the tournament."], [3, 2, 2, 0, "rng", "Random number generator."]], "pyvrp.Population.PopulationParams": [[3, 4, 1, 0, "generation_size", "The size of a single generation, that is, the number of new solutions inserted into a subpopulation between survivor selections."], [3, 4, 1, 0, "lb_diversity", "A lower bound on the diversity of the solutions selected for tournament. See select() for details."], [3, 5, 1, 0, "max_pop_size", "Returns the maximum subpopulation size."], [3, 4, 1, 0, "min_pop_size", "Minimum subpopulation size. This is the size of the subpopulation after survivor selection."], [3, 4, 1, 0, "nb_close", "Number of close solutions. These are used to determine similarity between solutions, which is an important component of fitness."], [3, 4, 1, 0, "nb_elite", "Number of elite solutions. This number of fittest solutions are always survivors."], [3, 4, 1, 0, "ub_diversity", "An upper bound on the diversity of the solutions selected for tournament. See select() for details."]], "pyvrp.Population.PopulationParams.__init__": [[3, 2, 2, "pyvrp.Population.PopulationParams", "generation_size", "Parameter configuration for the Population."], [3, 2, 2, "pyvrp.Population.PopulationParams", "lb_diversity", "Parameter configuration for the Population."], [3, 2, 2, "pyvrp.Population.PopulationParams", "min_pop_size", "Parameter configuration for the Population."], [3, 2, 2, "pyvrp.Population.PopulationParams", "nb_close", "Parameter configuration for the Population."], [3, 2, 2, "pyvrp.Population.PopulationParams", "nb_elite", "Parameter configuration for the Population."], [3, 2, 2, "pyvrp.Population.PopulationParams", "ub_diversity", "Parameter configuration for the Population."]], "pyvrp.Result": [[3, 1, 1, 0, "Result", "Stores the outcomes of a single run. An instance of this class is returned once the GeneticAlgorithm completes."]], "pyvrp.Result.Result": [[3, 3, 1, 0, "cost", "Returns the cost (objective) value of the best solution. Returns inf if the best solution is infeasible."], [3, 3, 1, 0, "is_feasible", "Returns whether the best solution is feasible."], [3, 3, 1, 0, "summary", "Returns a nicely formatted result summary."]], "pyvrp.Result.Result.__init__": [[3, 2, 2, 0, "best", "The best observed solution."], [3, 2, 2, 0, "num_iterations", "Number of iterations performed by the genetic algorithm."], [3, 2, 2, 0, "runtime", "Total runtime of the main genetic algorithm loop."], [3, 2, 2, 0, "stats", "A Statistics object containing runtime statistics."]], "pyvrp.Statistics": [[3, 1, 1, 0, "Statistics", "The Statistics object tracks various (population-level) statistics of genetic algorithm runs. This can be helpful in analysing the algorithm's performance."]], "pyvrp.Statistics.Statistics": [[3, 3, 1, 0, "collect_from", "Collects statistics from the given population object."], [3, 3, 1, 0, "from_csv", "Reads a Statistics object from the CSV file at the given filesystem location."], [3, 3, 1, 0, "to_csv", "Writes this Statistics object to the given location, as a CSV file."]], "pyvrp.Statistics.Statistics.__init__": [[3, 2, 2, 0, "collect_stats", "Whether to collect statistics at all."]], "pyvrp.Statistics.Statistics.collect_from": [[3, 2, 2, 0, "cost_evaluator", "CostEvaluator used to compute costs for solutions."], [3, 2, 2, 0, "population", "Population instance to collect statistics from."]], "pyvrp.Statistics.Statistics.from_csv": [[3, 2, 2, 0, "delimiter", "Value separator."], [3, 2, 2, 0, "kwargs", "Additional keyword arguments."], [3, 2, 2, 0, "where", "Filesystem location to read from."]], "pyvrp.Statistics.Statistics.to_csv": [[3, 2, 2, 0, "delimiter", "Value separator."], [3, 2, 2, 0, "kwargs", "Additional keyword arguments."], [3, 2, 2, 0, "quoting", "Quoting strategy."], [3, 2, 2, 0, "where", "Filesystem location to write to."]], "pyvrp._pyvrp": [[3, 1, 1, 0, "Client", "Simple data object storing all client data as (read-only) properties."], [3, 1, 1, 0, "ClientGroup", "A client group that imposes additional restrictions on visits to clients in the group."], [3, 1, 1, 0, "CostEvaluator", "Creates a CostEvaluator instance."], [3, 1, 1, 0, "Depot", "Simple data object storing all depot data as (read-only) properties."], [3, 1, 1, 0, "DynamicBitset", "A simple dynamic bitset implementation. This class functions as a fast set for membership checks on the integers. That is particularly useful for testing if e.g. clients are in a solution or not."], [3, 1, 1, 0, "ProblemData", "Creates a problem data instance. This instance contains all information needed to solve the vehicle routing problem."], [3, 1, 1, 0, "RandomNumberGenerator", "This class implements a XOR-shift pseudo-random number generator (RNG). It generates the next number of a sequence by repeatedly taking the 'exclusive or' (the ^ operator) of a number with a bit-shifted version of itself. See here for more details."], [3, 1, 1, 0, "Route", "A simple class that stores the route plan and some statistics."], [3, 1, 1, 0, "Solution", "Encodes VRP solutions."], [3, 1, 1, 0, "VehicleType", "Simple data object storing all vehicle type data as properties."]], "pyvrp._pyvrp.Client": [[3, 4, 1, 0, "delivery", "Client delivery amounts shipped from the depot."], [3, 4, 1, 0, "group", "Indicates membership of the given client group, if any."], [3, 4, 1, 0, "name", "Free-form name field for this client."], [3, 4, 1, 0, "pickup", "Client pickup amounts returned to the depot."], [3, 4, 1, 0, "prize", "Prize collected by visiting this client."], [3, 4, 1, 0, "release_time", "Earliest time at which a vehicle may leave the depot to visit this client."], [3, 4, 1, 0, "required", "Whether visiting this client is required."], [3, 4, 1, 0, "service_duration", "Amount of time a vehicle needs to spend at this client before resuming its route."], [3, 4, 1, 0, "tw_early", "Earliest time at which this client may be visited to start service."], [3, 4, 1, 0, "tw_late", "Latest time at which this client may be visited to start service."], [3, 4, 1, 0, "x", "Horizontal coordinate of this client."], [3, 4, 1, 0, "y", "Vertical coordinate of this client."]], "pyvrp._pyvrp.Client.__init__": [[3, 2, 2, 0, "delivery", "The amounts this client demands from the depot."], [3, 2, 2, 0, "group", "Indicates membership of the given client group, if any."], [3, 2, 2, 0, "name", "Free-form name field for this client."], [3, 2, 2, 0, "pickup", "The amounts this client ships back to the depot."], [3, 2, 2, 0, "prize", "Prize collected by visiting this client."], [3, 2, 2, 0, "release_time", "Earliest time at which this client is released, that is, the earliest time at which a vehicle may leave the depot to visit this client. Default 0."], [3, 2, 2, 0, "required", "Whether this client must be part of a feasible solution."], [3, 2, 2, 0, "service_duration", "Amount of time a vehicle needs to spend at this client before resuming its route."], [3, 2, 2, 0, "tw_early", "Earliest time at which this client may be visited to start service. Default 0."], [3, 2, 2, 0, "tw_late", "Latest time at which this client may be visited to start service. Unconstrained if not provided."], [3, 2, 2, 0, "x", "Horizontal coordinate of this client, that is, the 'x' part of the client's (x, y) location tuple."], [3, 2, 2, 0, "y", "Vertical coordinate of this client, that is, the 'y' part of the client's (x, y) location tuple."]], "pyvrp._pyvrp.ClientGroup": [[3, 3, 1, 0, "__iter__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__len__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "add_client", "!! processed by numpydoc !!"], [3, 3, 1, 0, "clear", "!! processed by numpydoc !!"], [3, 4, 1, 0, "clients", "The clients in the group."], [3, 4, 1, 0, "mutually_exclusive", "When True, exactly one of the clients in this group must be visited if the group is required, and at most one if the group is not required."], [3, 4, 1, 0, "required", "Whether visiting this client group is required."]], "pyvrp._pyvrp.ClientGroup.__init__": [[3, 2, 2, 0, "clients", "The clients in the group."], [3, 2, 2, 0, "required", "Whether visiting this client group is required."]], "pyvrp._pyvrp.ClientGroup.__iter__": [[3, 2, 2, "pyvrp._pyvrp.ClientGroup.__iter__", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.ClientGroup.__len__": [[3, 2, 2, "pyvrp._pyvrp.ClientGroup.__len__", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.ClientGroup.add_client": [[3, 2, 2, "pyvrp._pyvrp.ClientGroup.add_client", "client", "!! processed by numpydoc !!"], [3, 2, 2, "pyvrp._pyvrp.ClientGroup.add_client", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.ClientGroup.clear": [[3, 2, 2, "pyvrp._pyvrp.ClientGroup.clear", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.CostEvaluator": [[3, 3, 1, 0, "cost", "Hand-waving some details, each solution consists of a set of non-empty routes \\mathcal{R}. Each route R \\in \\mathcal{R} is a sequence of edges, starting and ending at a depot. Each route R has an assigned vehicle type, through which the route is equipped with a fixed vehicle cost f_R, and unit distance and duration costs c^\\text{distance}_R and c^\\text{duration}_R, respectively. Let V_R = \\{i : (i, j) \\in R \\} be the set of locations visited by route R, and d_R and t_R the total route distance and duration, respectively. The objective value is then given by"], [3, 3, 1, 0, "dist_penalty", "Computes the time warp penalty for the given time warp."], [3, 3, 1, 0, "load_penalty", "Computes the total excess load penalty for the given load and vehicle capacity."], [3, 3, 1, 0, "penalised_cost", "Computes a smoothed objective (penalised cost) for a given solution."], [3, 3, 1, 0, "tw_penalty", "Computes the time warp penalty for the given time warp."]], "pyvrp._pyvrp.CostEvaluator.__init__": [[3, 2, 2, 0, "dist_penalty", "The penalty for each unit of distance in excess of the vehicle's maximum distance constraint."], [3, 2, 2, 0, "load_penalty", "The penalty for each unit of excess load over the vehicle capacity."], [3, 2, 2, 0, "tw_penalty", "The penalty for each unit of time warp."]], "pyvrp._pyvrp.CostEvaluator.cost": [[3, 2, 2, "pyvrp._pyvrp.CostEvaluator.cost", "self", "Hand-waving some details, each solution consists of a set of non-empty routes \\mathcal{R}. Each route R \\in \\mathcal{R} is a sequence of edges, starting and ending at a depot. Each route R has an assigned vehicle type, through which the route is equipped with a fixed vehicle cost f_R, and unit distance and duration costs c^\\text{distance}_R and c^\\text{duration}_R, respectively. Let V_R = \\{i : (i, j) \\in R \\} be the set of locations visited by route R, and d_R and t_R the total route distance and duration, respectively. The objective value is then given by"], [3, 2, 2, "pyvrp._pyvrp.CostEvaluator.cost", "solution", "Hand-waving some details, each solution consists of a set of non-empty routes \\mathcal{R}. Each route R \\in \\mathcal{R} is a sequence of edges, starting and ending at a depot. Each route R has an assigned vehicle type, through which the route is equipped with a fixed vehicle cost f_R, and unit distance and duration costs c^\\text{distance}_R and c^\\text{duration}_R, respectively. Let V_R = \\{i : (i, j) \\in R \\} be the set of locations visited by route R, and d_R and t_R the total route distance and duration, respectively. The objective value is then given by"]], "pyvrp._pyvrp.CostEvaluator.dist_penalty": [[3, 2, 2, "pyvrp._pyvrp.CostEvaluator.dist_penalty", "distance", "Computes the time warp penalty for the given time warp."], [3, 2, 2, "pyvrp._pyvrp.CostEvaluator.dist_penalty", "max_distance", "Computes the time warp penalty for the given time warp."], [3, 2, 2, "pyvrp._pyvrp.CostEvaluator.dist_penalty", "self", "Computes the time warp penalty for the given time warp."]], "pyvrp._pyvrp.CostEvaluator.load_penalty": [[3, 2, 2, "pyvrp._pyvrp.CostEvaluator.load_penalty", "capacity", "Computes the total excess load penalty for the given load and vehicle capacity."], [3, 2, 2, "pyvrp._pyvrp.CostEvaluator.load_penalty", "load", "Computes the total excess load penalty for the given load and vehicle capacity."], [3, 2, 2, "pyvrp._pyvrp.CostEvaluator.load_penalty", "self", "Computes the total excess load penalty for the given load and vehicle capacity."]], "pyvrp._pyvrp.CostEvaluator.penalised_cost": [[3, 2, 2, "pyvrp._pyvrp.CostEvaluator.penalised_cost", "self", "Computes a smoothed objective (penalised cost) for a given solution."], [3, 2, 2, "pyvrp._pyvrp.CostEvaluator.penalised_cost", "solution", "Computes a smoothed objective (penalised cost) for a given solution."]], "pyvrp._pyvrp.CostEvaluator.tw_penalty": [[3, 2, 2, "pyvrp._pyvrp.CostEvaluator.tw_penalty", "self", "Computes the time warp penalty for the given time warp."], [3, 2, 2, "pyvrp._pyvrp.CostEvaluator.tw_penalty", "time_warp", "Computes the time warp penalty for the given time warp."]], "pyvrp._pyvrp.Depot": [[3, 4, 1, 0, "name", "Free-form name field for this depot."], [3, 4, 1, 0, "x", "Horizontal coordinate of this depot."], [3, 4, 1, 0, "y", "Vertical coordinate of this depot."]], "pyvrp._pyvrp.Depot.__init__": [[3, 2, 2, 0, "name", "Free-form name field for this depot."], [3, 2, 2, 0, "x", "Horizontal coordinate of this depot, that is, the 'x' part of the depot's (x, y) location tuple."], [3, 2, 2, 0, "y", "Vertical coordinate of this depot, that is, the 'y' part of the depot's (x, y) location tuple."]], "pyvrp._pyvrp.DynamicBitset": [[3, 3, 1, 0, "__and__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__eq__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__getitem__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__invert__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__len__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__or__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__setitem__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__xor__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "all", "!! processed by numpydoc !!"], [3, 3, 1, 0, "any", "!! processed by numpydoc !!"], [3, 3, 1, 0, "count", "!! processed by numpydoc !!"], [3, 3, 1, 0, "none", "!! processed by numpydoc !!"], [3, 3, 1, 0, "reset", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.__and__": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__and__", "other", "!! processed by numpydoc !!"], [3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__and__", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.__eq__": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__eq__", "other", "!! processed by numpydoc !!"], [3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__eq__", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.__getitem__": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__getitem__", "idx", "!! processed by numpydoc !!"], [3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__getitem__", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.__init__": [[3, 2, 2, 0, "num_bits", "Number of integers in [0, num_bits) this bitset must be able to store."]], "pyvrp._pyvrp.DynamicBitset.__invert__": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__invert__", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.__len__": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__len__", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.__or__": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__or__", "other", "!! processed by numpydoc !!"], [3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__or__", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.__setitem__": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__setitem__", "idx", "!! processed by numpydoc !!"], [3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__setitem__", "self", "!! processed by numpydoc !!"], [3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__setitem__", "value", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.__xor__": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__xor__", "other", "!! processed by numpydoc !!"], [3, 2, 2, "pyvrp._pyvrp.DynamicBitset.__xor__", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.all": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.all", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.any": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.any", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.count": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.count", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.none": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.none", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.reset": [[3, 2, 2, "pyvrp._pyvrp.DynamicBitset.reset", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.ProblemData": [[3, 3, 1, 0, "centroid", "Center point of all client locations (excluding depots)."], [3, 3, 1, 0, "clients", "Returns a list of all clients in the problem instance."], [3, 3, 1, 0, "depots", "Returns a list of all depots in the problem instance."], [3, 3, 1, 0, "distance_matrices", "Returns a list of all distance matrices in the problem instance."], [3, 3, 1, 0, "distance_matrix", "The full travel distance matrix associated with the given routing profile."], [3, 3, 1, 0, "duration_matrices", "Returns a list of all duration matrices in the problem instance."], [3, 3, 1, 0, "duration_matrix", "The full travel duration matrix associated with the given routing profile."], [3, 3, 1, 0, "group", "Returns the client group at the given index."], [3, 3, 1, 0, "groups", "Returns a list of all client groups in the problem instance."], [3, 3, 1, 0, "location", "Returns location data for the location at the given index. This can be a depot or a client: a depot if the idx argument is smaller than num_depots, and a client if the idx is bigger than that."], [3, 5, 1, 0, "num_clients", "Number of clients in this problem instance."], [3, 5, 1, 0, "num_depots", "Number of depots in this problem instance."], [3, 5, 1, 0, "num_groups", "Number of client groups in this problem instance."], [3, 5, 1, 0, "num_load_dimensions", "Number of load dimensions in this problem instance."], [3, 5, 1, 0, "num_locations", "Number of locations in this problem instance, that is, the number of depots plus the number of clients in the instance."], [3, 5, 1, 0, "num_profiles", "Number of routing profiles in this problem instance."], [3, 5, 1, 0, "num_vehicle_types", "Number of vehicle types in this problem instance."], [3, 5, 1, 0, "num_vehicles", "Number of vehicles in this problem instance."], [3, 3, 1, 0, "replace", "Returns a new ProblemData instance with the same data as this instance, except for the given parameters, which are used instead."], [3, 3, 1, 0, "vehicle_type", "Returns vehicle type data for the given vehicle type."], [3, 3, 1, 0, "vehicle_types", "Returns a list of all vehicle types in the problem instance."]], "pyvrp._pyvrp.ProblemData.__init__": [[3, 2, 2, 0, "clients", "List of clients to visit."], [3, 2, 2, 0, "depots", "List of depots."], [3, 2, 2, 0, "distance_matrices", "Distance matrices that give the travel distances between all locations (both depots and clients)."], [3, 2, 2, 0, "duration_matrices", "Duration matrices that give the travel durations between all locations (both depots and clients)."], [3, 2, 2, 0, "groups", "List of client groups."], [3, 2, 2, 0, "vehicle_types", "List of vehicle types in the problem instance."]], "pyvrp._pyvrp.ProblemData.centroid": [[3, 2, 2, "pyvrp._pyvrp.ProblemData.centroid", "self", "Center point of all client locations (excluding depots)."]], "pyvrp._pyvrp.ProblemData.clients": [[3, 2, 2, "pyvrp._pyvrp.ProblemData.clients", "self", "Returns a list of all clients in the problem instance."]], "pyvrp._pyvrp.ProblemData.depots": [[3, 2, 2, "pyvrp._pyvrp.ProblemData.depots", "self", "Returns a list of all depots in the problem instance."]], "pyvrp._pyvrp.ProblemData.distance_matrices": [[3, 2, 2, "pyvrp._pyvrp.ProblemData.distance_matrices", "self", "Returns a list of all distance matrices in the problem instance."]], "pyvrp._pyvrp.ProblemData.distance_matrix": [[3, 2, 2, 0, "profile", "Routing profile whose associated distance matrix to retrieve."], [3, 2, 2, "pyvrp._pyvrp.ProblemData.distance_matrix", "self", "The full travel distance matrix associated with the given routing profile."]], "pyvrp._pyvrp.ProblemData.duration_matrices": [[3, 2, 2, "pyvrp._pyvrp.ProblemData.duration_matrices", "self", "Returns a list of all duration matrices in the problem instance."]], "pyvrp._pyvrp.ProblemData.duration_matrix": [[3, 2, 2, 0, "profile", "Routing profile whose associated duration matrix to retrieve."], [3, 2, 2, "pyvrp._pyvrp.ProblemData.duration_matrix", "self", "The full travel duration matrix associated with the given routing profile."]], "pyvrp._pyvrp.ProblemData.group": [[3, 2, 2, 0, "group", "Group index whose information to retrieve."], [3, 2, 2, "pyvrp._pyvrp.ProblemData.group", "self", "Returns the client group at the given index."]], "pyvrp._pyvrp.ProblemData.groups": [[3, 2, 2, "pyvrp._pyvrp.ProblemData.groups", "self", "Returns a list of all client groups in the problem instance."]], "pyvrp._pyvrp.ProblemData.location": [[3, 2, 2, 0, "idx", "Location index whose information to retrieve."], [3, 2, 2, "pyvrp._pyvrp.ProblemData.location", "self", "Returns location data for the location at the given index. This can be a depot or a client: a depot if the idx argument is smaller than num_depots, and a client if the idx is bigger than that."]], "pyvrp._pyvrp.ProblemData.replace": [[3, 2, 2, 0, "clients", "Optional list of clients."], [3, 2, 2, 0, "depots", "Optional list of depots."], [3, 2, 2, 0, "distance_matrices", "Optional distance matrices, one per routing profile."], [3, 2, 2, 0, "duration_matrices", "Optional duration matrices, one per routing profile."], [3, 2, 2, 0, "groups", "Optional client groups."], [3, 2, 2, "pyvrp._pyvrp.ProblemData.replace", "self", "Returns a new ProblemData instance with the same data as this instance, except for the given parameters, which are used instead."], [3, 2, 2, 0, "vehicle_types", "Optional list of vehicle types."]], "pyvrp._pyvrp.ProblemData.vehicle_type": [[3, 2, 2, "pyvrp._pyvrp.ProblemData.vehicle_type", "self", "Returns vehicle type data for the given vehicle type."], [3, 2, 2, 0, "vehicle_type", "Vehicle type number whose information to retrieve."]], "pyvrp._pyvrp.ProblemData.vehicle_types": [[3, 2, 2, "pyvrp._pyvrp.ProblemData.vehicle_types", "self", "Returns a list of all vehicle types in the problem instance."]], "pyvrp._pyvrp.RandomNumberGenerator": [[3, 3, 1, 0, "__call__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "max", "!! processed by numpydoc !!"], [3, 3, 1, 0, "min", "!! processed by numpydoc !!"], [3, 3, 1, 0, "rand", "!! processed by numpydoc !!"], [3, 3, 1, 0, "randint", "!! processed by numpydoc !!"], [3, 3, 1, 0, "state", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.RandomNumberGenerator.__call__": [[3, 2, 2, "pyvrp._pyvrp.RandomNumberGenerator.__call__", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.RandomNumberGenerator.__init__": [[3, 2, 2, 0, "seed", "Seed used to set the initial RNG state."]], "pyvrp._pyvrp.RandomNumberGenerator.rand": [[3, 2, 2, "pyvrp._pyvrp.RandomNumberGenerator.rand", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.RandomNumberGenerator.randint": [[3, 2, 2, "pyvrp._pyvrp.RandomNumberGenerator.randint", "high", "!! processed by numpydoc !!"], [3, 2, 2, "pyvrp._pyvrp.RandomNumberGenerator.randint", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.RandomNumberGenerator.state": [[3, 2, 2, "pyvrp._pyvrp.RandomNumberGenerator.state", "self", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.Route": [[3, 3, 1, 0, "centroid", "Center point of the client locations on this route."], [3, 3, 1, 0, "delivery", "Total client delivery load on this route."], [3, 3, 1, 0, "distance", "Total distance travelled on this route."], [3, 3, 1, 0, "distance_cost", "Total cost of the distance travelled on this route."], [3, 3, 1, 0, "duration", "Total route duration, including travel, service and waiting time."], [3, 3, 1, 0, "duration_cost", "Total cost of the duration of this route."], [3, 3, 1, 0, "end_depot", "Location index of the route's ending depot."], [3, 3, 1, 0, "end_time", "start_time + duration - time_warp."], [3, 3, 1, 0, "excess_distance", "Distance in excess of the vehicle's maximum distance constraint."], [3, 3, 1, 0, "excess_load", "Pickup or delivery loads in excess of the vehicle's capacity."], [3, 3, 1, 0, "has_excess_distance", "Returns whether this route violates maximum distance constraints."], [3, 3, 1, 0, "has_excess_load", "Returns whether this route violates capacity constraints."], [3, 3, 1, 0, "has_time_warp", "Returns whether this route violates time window or maximum duration constraints."], [3, 3, 1, 0, "is_feasible", "Returns whether this route is feasible."], [3, 3, 1, 0, "pickup", "Total client pickup load on this route."], [3, 3, 1, 0, "prizes", "Total prize value collected on this route."], [3, 3, 1, 0, "release_time", "Earliest time at which this route can leave the depot. Follows from the release times of clients visited on this route."], [3, 3, 1, 0, "service_duration", "Total duration of service on this route."], [3, 3, 1, 0, "slack", "Time by which departure from the depot can be delayed without resulting in (additional) time warp or increased route duration."], [3, 3, 1, 0, "start_depot", "Location index of the route's starting depot."], [3, 3, 1, 0, "start_time", "Start time of this route. This is the earliest possible time at which the route can leave the depot and have a minimal duration and time warp. If there is positive slack(), the start time can be delayed by at most slack() time units without increasing the total (minimal) route duration, or time warp."], [3, 3, 1, 0, "time_warp", "Amount of time warp incurred on this route."], [3, 3, 1, 0, "travel_duration", "Total duration of travel on this route."], [3, 3, 1, 0, "vehicle_type", "Index of the type of vehicle used on this route."], [3, 3, 1, 0, "visits", "Route visits, as a list of clients."], [3, 3, 1, 0, "wait_duration", "Total waiting duration on this route."]], "pyvrp._pyvrp.Route.__init__": [[3, 2, 2, "pyvrp._pyvrp.Route", "data", "A simple class that stores the route plan and some statistics."], [3, 2, 2, "pyvrp._pyvrp.Route", "vehicle_type", "A simple class that stores the route plan and some statistics."], [3, 2, 2, "pyvrp._pyvrp.Route", "visits", "A simple class that stores the route plan and some statistics."]], "pyvrp._pyvrp.Route.centroid": [[3, 2, 2, "pyvrp._pyvrp.Route.centroid", "self", "Center point of the client locations on this route."]], "pyvrp._pyvrp.Route.delivery": [[3, 2, 2, "pyvrp._pyvrp.Route.delivery", "self", "Total client delivery load on this route."]], "pyvrp._pyvrp.Route.distance": [[3, 2, 2, "pyvrp._pyvrp.Route.distance", "self", "Total distance travelled on this route."]], "pyvrp._pyvrp.Route.distance_cost": [[3, 2, 2, "pyvrp._pyvrp.Route.distance_cost", "self", "Total cost of the distance travelled on this route."]], "pyvrp._pyvrp.Route.duration": [[3, 2, 2, "pyvrp._pyvrp.Route.duration", "self", "Total route duration, including travel, service and waiting time."]], "pyvrp._pyvrp.Route.duration_cost": [[3, 2, 2, "pyvrp._pyvrp.Route.duration_cost", "self", "Total cost of the duration of this route."]], "pyvrp._pyvrp.Route.end_depot": [[3, 2, 2, "pyvrp._pyvrp.Route.end_depot", "self", "Location index of the route's ending depot."]], "pyvrp._pyvrp.Route.end_time": [[3, 2, 2, "pyvrp._pyvrp.Route.end_time", "self", "start_time + duration - time_warp."]], "pyvrp._pyvrp.Route.excess_distance": [[3, 2, 2, "pyvrp._pyvrp.Route.excess_distance", "self", "Distance in excess of the vehicle's maximum distance constraint."]], "pyvrp._pyvrp.Route.excess_load": [[3, 2, 2, "pyvrp._pyvrp.Route.excess_load", "self", "Pickup or delivery loads in excess of the vehicle's capacity."]], "pyvrp._pyvrp.Route.has_excess_distance": [[3, 2, 2, "pyvrp._pyvrp.Route.has_excess_distance", "self", "Returns whether this route violates maximum distance constraints."]], "pyvrp._pyvrp.Route.has_excess_load": [[3, 2, 2, "pyvrp._pyvrp.Route.has_excess_load", "self", "Returns whether this route violates capacity constraints."]], "pyvrp._pyvrp.Route.has_time_warp": [[3, 2, 2, "pyvrp._pyvrp.Route.has_time_warp", "self", "Returns whether this route violates time window or maximum duration constraints."]], "pyvrp._pyvrp.Route.is_feasible": [[3, 2, 2, "pyvrp._pyvrp.Route.is_feasible", "self", "Returns whether this route is feasible."]], "pyvrp._pyvrp.Route.pickup": [[3, 2, 2, "pyvrp._pyvrp.Route.pickup", "self", "Total client pickup load on this route."]], "pyvrp._pyvrp.Route.prizes": [[3, 2, 2, "pyvrp._pyvrp.Route.prizes", "self", "Total prize value collected on this route."]], "pyvrp._pyvrp.Route.release_time": [[3, 2, 2, "pyvrp._pyvrp.Route.release_time", "self", "Earliest time at which this route can leave the depot. Follows from the release times of clients visited on this route."]], "pyvrp._pyvrp.Route.service_duration": [[3, 2, 2, "pyvrp._pyvrp.Route.service_duration", "self", "Total duration of service on this route."]], "pyvrp._pyvrp.Route.slack": [[3, 2, 2, "pyvrp._pyvrp.Route.slack", "self", "Time by which departure from the depot can be delayed without resulting in (additional) time warp or increased route duration."]], "pyvrp._pyvrp.Route.start_depot": [[3, 2, 2, "pyvrp._pyvrp.Route.start_depot", "self", "Location index of the route's starting depot."]], "pyvrp._pyvrp.Route.start_time": [[3, 2, 2, "pyvrp._pyvrp.Route.start_time", "self", "Start time of this route. This is the earliest possible time at which the route can leave the depot and have a minimal duration and time warp. If there is positive slack(), the start time can be delayed by at most slack() time units without increasing the total (minimal) route duration, or time warp."]], "pyvrp._pyvrp.Route.time_warp": [[3, 2, 2, "pyvrp._pyvrp.Route.time_warp", "self", "Amount of time warp incurred on this route."]], "pyvrp._pyvrp.Route.travel_duration": [[3, 2, 2, "pyvrp._pyvrp.Route.travel_duration", "self", "Total duration of travel on this route."]], "pyvrp._pyvrp.Route.vehicle_type": [[3, 2, 2, "pyvrp._pyvrp.Route.vehicle_type", "self", "Index of the type of vehicle used on this route."]], "pyvrp._pyvrp.Route.visits": [[3, 2, 2, "pyvrp._pyvrp.Route.visits", "self", "Route visits, as a list of clients."]], "pyvrp._pyvrp.Route.wait_duration": [[3, 2, 2, "pyvrp._pyvrp.Route.wait_duration", "self", "Total waiting duration on this route."]], "pyvrp._pyvrp.Solution": [[3, 3, 1, 0, "distance", "Returns the total distance over all routes."], [3, 3, 1, 0, "distance_cost", "Total cost of the distance travelled on routes in this solution."], [3, 3, 1, 0, "duration", "Total duration of all routes in this solution."], [3, 3, 1, 0, "duration_cost", "Total cost of the duration of all routes in this solution."], [3, 3, 1, 0, "excess_distance", "Returns the total distance in excess of maximum duration constraints, over all routes."], [3, 3, 1, 0, "excess_load", "Aggregate pickup or delivery loads in excess of the vehicle's capacity of all routes."], [3, 3, 1, 0, "fixed_vehicle_cost", "Returns the fixed vehicle cost of all vehicles used in this solution."], [3, 3, 1, 0, "has_excess_distance", "Returns whether this solution violates maximum distance constraints."], [3, 3, 1, 0, "has_excess_load", "Returns whether this solution violates capacity constraints."], [3, 3, 1, 0, "has_time_warp", "Returns whether this solution violates time window or maximum duration constraints."], [3, 3, 1, 0, "is_complete", "Returns whether this solution is complete, which it is when it has all required clients."], [3, 3, 1, 0, "is_feasible", "Whether this solution is feasible."], [3, 3, 1, 0, "is_group_feasible", "Returns whether this solution is feasible w.r.t. the client group restrictions."], [3, 3, 1, 0, "make_random", "Creates a randomly generated solution."], [3, 3, 1, 0, "neighbours", "Returns a list of neighbours for each client, by index."], [3, 3, 1, 0, "num_clients", "Number of clients in this solution."], [3, 3, 1, 0, "num_missing_clients", "Number of required clients that are not in this solution."], [3, 3, 1, 0, "num_routes", "Number of routes in this solution."], [3, 3, 1, 0, "prizes", "Returns the total collected prize value over all routes."], [3, 3, 1, 0, "routes", "The solution's routing decisions."], [3, 3, 1, 0, "time_warp", "Returns the total time warp load over all routes."], [3, 3, 1, 0, "uncollected_prizes", "Total prize value of all clients not visited in this solution."]], "pyvrp._pyvrp.Solution.__init__": [[3, 2, 2, 0, "data", "Data instance."], [3, 2, 2, 0, "routes", "Route list to use."]], "pyvrp._pyvrp.Solution.distance": [[3, 2, 2, "pyvrp._pyvrp.Solution.distance", "self", "Returns the total distance over all routes."]], "pyvrp._pyvrp.Solution.distance_cost": [[3, 2, 2, "pyvrp._pyvrp.Solution.distance_cost", "self", "Total cost of the distance travelled on routes in this solution."]], "pyvrp._pyvrp.Solution.duration": [[3, 2, 2, "pyvrp._pyvrp.Solution.duration", "self", "Total duration of all routes in this solution."]], "pyvrp._pyvrp.Solution.duration_cost": [[3, 2, 2, "pyvrp._pyvrp.Solution.duration_cost", "self", "Total cost of the duration of all routes in this solution."]], "pyvrp._pyvrp.Solution.excess_distance": [[3, 2, 2, "pyvrp._pyvrp.Solution.excess_distance", "self", "Returns the total distance in excess of maximum duration constraints, over all routes."]], "pyvrp._pyvrp.Solution.excess_load": [[3, 2, 2, "pyvrp._pyvrp.Solution.excess_load", "self", "Aggregate pickup or delivery loads in excess of the vehicle's capacity of all routes."]], "pyvrp._pyvrp.Solution.fixed_vehicle_cost": [[3, 2, 2, "pyvrp._pyvrp.Solution.fixed_vehicle_cost", "self", "Returns the fixed vehicle cost of all vehicles used in this solution."]], "pyvrp._pyvrp.Solution.has_excess_distance": [[3, 2, 2, "pyvrp._pyvrp.Solution.has_excess_distance", "self", "Returns whether this solution violates maximum distance constraints."]], "pyvrp._pyvrp.Solution.has_excess_load": [[3, 2, 2, "pyvrp._pyvrp.Solution.has_excess_load", "self", "Returns whether this solution violates capacity constraints."]], "pyvrp._pyvrp.Solution.has_time_warp": [[3, 2, 2, "pyvrp._pyvrp.Solution.has_time_warp", "self", "Returns whether this solution violates time window or maximum duration constraints."]], "pyvrp._pyvrp.Solution.is_complete": [[3, 2, 2, "pyvrp._pyvrp.Solution.is_complete", "self", "Returns whether this solution is complete, which it is when it has all required clients."]], "pyvrp._pyvrp.Solution.is_feasible": [[3, 2, 2, "pyvrp._pyvrp.Solution.is_feasible", "self", "Whether this solution is feasible."]], "pyvrp._pyvrp.Solution.is_group_feasible": [[3, 2, 2, "pyvrp._pyvrp.Solution.is_group_feasible", "self", "Returns whether this solution is feasible w.r.t. the client group restrictions."]], "pyvrp._pyvrp.Solution.make_random": [[3, 2, 2, 0, "data", "Data instance."], [3, 2, 2, 0, "rng", "Random number generator to use."]], "pyvrp._pyvrp.Solution.neighbours": [[3, 2, 2, "pyvrp._pyvrp.Solution.neighbours", "self", "Returns a list of neighbours for each client, by index."]], "pyvrp._pyvrp.Solution.num_clients": [[3, 2, 2, "pyvrp._pyvrp.Solution.num_clients", "self", "Number of clients in this solution."]], "pyvrp._pyvrp.Solution.num_missing_clients": [[3, 2, 2, "pyvrp._pyvrp.Solution.num_missing_clients", "self", "Number of required clients that are not in this solution."]], "pyvrp._pyvrp.Solution.num_routes": [[3, 2, 2, "pyvrp._pyvrp.Solution.num_routes", "self", "Number of routes in this solution."]], "pyvrp._pyvrp.Solution.prizes": [[3, 2, 2, "pyvrp._pyvrp.Solution.prizes", "self", "Returns the total collected prize value over all routes."]], "pyvrp._pyvrp.Solution.routes": [[3, 2, 2, "pyvrp._pyvrp.Solution.routes", "self", "The solution's routing decisions."]], "pyvrp._pyvrp.Solution.time_warp": [[3, 2, 2, "pyvrp._pyvrp.Solution.time_warp", "self", "Returns the total time warp load over all routes."]], "pyvrp._pyvrp.Solution.uncollected_prizes": [[3, 2, 2, "pyvrp._pyvrp.Solution.uncollected_prizes", "self", "Total prize value of all clients not visited in this solution."]], "pyvrp._pyvrp.VehicleType": [[3, 4, 1, 0, "capacity", "Capacities of this vehicle type, per load dimension."], [3, 4, 1, 0, "end_depot", "End location associated with these vehicles."], [3, 4, 1, 0, "fixed_cost", "Fixed cost of using a vehicle of this type."], [3, 4, 1, 0, "max_distance", "Maximum travel distance of the route this vehicle type is assigned to. This is a very large number when the maximum distance is unconstrained."], [3, 4, 1, 0, "max_duration", "Maximum duration of the route this vehicle type is assigned to. This is a very large number when the maximum duration is unconstrained."], [3, 4, 1, 0, "name", "Free-form name field for this vehicle type."], [3, 4, 1, 0, "num_available", "Number of vehicles of this type that are available."], [3, 4, 1, 0, "profile", "This vehicle type's routing profile."], [3, 3, 1, 0, "replace", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 4, 1, 0, "start_depot", "Start location associated with these vehicles."], [3, 4, 1, 0, "tw_early", "Start of the vehicle type's shift, if specified."], [3, 4, 1, 0, "tw_late", "End of the vehicle type's shift, if specified."], [3, 4, 1, 0, "unit_distance_cost", "Cost per unit of distance travelled by vehicles of this type."], [3, 4, 1, 0, "unit_duration_cost", "Cost per unit of duration on routes using vehicles of this type."]], "pyvrp._pyvrp.VehicleType.__init__": [[3, 2, 2, 0, "capacity", "Capacities of this vehicle type, per load dimension."], [3, 2, 2, 0, "end_depot", "Depot (location index) where vehicles of this type end routes. Default 0 (first depot)."], [3, 2, 2, 0, "fixed_cost", "Fixed cost of using a vehicle of this type."], [3, 2, 2, 0, "max_distance", "Maximum route distance."], [3, 2, 2, 0, "max_duration", "Maximum route duration."], [3, 2, 2, 0, "name", "Free-form name field for this vehicle type."], [3, 2, 2, 0, "num_available", "Number of vehicles of this type that are available."], [3, 2, 2, 0, "profile", "This vehicle type's routing profile."], [3, 2, 2, 0, "start_depot", "Depot (location index) where vehicles of this type start their routes."], [3, 2, 2, 0, "tw_early", "Start of the vehicle type's shift."], [3, 2, 2, 0, "tw_late", "End of the vehicle type's shift."], [3, 2, 2, 0, "unit_distance_cost", "Cost per unit of distance travelled by vehicles of this type."], [3, 2, 2, 0, "unit_duration_cost", "Cost per unit of duration on routes serviced by vehicles of this type."]], "pyvrp._pyvrp.VehicleType.replace": [[3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "capacity", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "end_depot", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "fixed_cost", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "max_distance", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "max_duration", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "name", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "num_available", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "profile", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "self", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "start_depot", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "tw_early", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "tw_late", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "unit_distance_cost", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."], [3, 2, 2, "pyvrp._pyvrp.VehicleType.replace", "unit_duration_cost", "Returns a new VehicleType with the same data as this one, except for the given parameters, which are used instead."]], "pyvrp.crossover": [[0, 0, 0, 1, "ordered_crossover", ""], [0, 0, 0, 1, "selective_route_exchange", ""]], "pyvrp.crossover.ordered_crossover": [[0, 6, 1, 0, "ordered_crossover", "Performs an ordered crossover (OX) operation between the two given parents. The clients between two randomly selected indices of the first route are copied into a new solution, and any missing clients that are present in the second route are then copied in as well. See Rdd0370444073-1 for details."]], "pyvrp.crossover.ordered_crossover.ordered_crossover": [[0, 2, 2, 0, "cost_evaluator", "Cost evaluator object."], [0, 2, 2, 0, "data", "The problem instance."], [0, 2, 2, 0, "parents", "The two parent solutions to create an offspring from."], [0, 2, 2, 0, "rng", "The random number generator to use."]], "pyvrp.crossover.selective_route_exchange": [[0, 6, 1, 0, "selective_route_exchange", "The selective route exchange crossover (SREX) operator due to Nagata and Kobayashi R8de92506ce4f-1 combines routes from both parents to generate a new offspring solution. It does this by carefully selecting routes from the second parent that could be exchanged with routes from the first parent. This often results in incomplete offspring that can then be repaired using a search method."]], "pyvrp.crossover.selective_route_exchange.selective_route_exchange": [[0, 2, 2, 0, "cost_evaluator", "The cost evaluator used to evaluate the offspring."], [0, 2, 2, 0, "data", "The problem instance."], [0, 2, 2, 0, "parents", "The two parent solutions to create an offspring from."], [0, 2, 2, 0, "rng", "The random number generator to use."]], "pyvrp.diversity": [[1, 0, 0, 1, "_diversity", ""]], "pyvrp.diversity._diversity": [[1, 6, 1, 0, "broken_pairs_distance", "Computes the symmetric broken pairs distance (BPD) between the given two solutions. This function determines whether each location in the problem shares neighbours between the first and second solution. If not, the location is part of a 'broken pair': a link that is part of one solution, but not of the other."]], "pyvrp.diversity._diversity.broken_pairs_distance": [[1, 2, 2, 0, "first", "First solution."], [1, 2, 2, 0, "second", "Second solution."]], "pyvrp.exceptions": [[3, 7, 1, 0, "PenaltyBoundWarning", "Raised when a penalty parameter has reached its maximum value. This means PyVRP struggles to find a feasible solution for the instance that's being solved, either because the instance has no feasible solution, or it is just very hard to find one."], [3, 7, 1, 0, "ScalingWarning", "Raised when the distance or duration values in the problem are very large, which could cause the algorithm to suffer from numerical issues."], [3, 7, 1, 0, "TspWarning", "Raised when the problem is a TSP but a component is used that explicitly requires the presence of two or more vehicles (i.e., a proper VRP)."]], "pyvrp.minimise_fleet": [[3, 6, 1, 0, "minimise_fleet", "Attempts to reduce the number of vehicles needed to achieve a feasible solution to the given problem instance, subject to a stopping criterion."]], "pyvrp.minimise_fleet.minimise_fleet": [[3, 2, 2, 0, "data", "Problem instance with a given vehicle composition."], [3, 2, 2, 0, "params", "Solver parameters to use."], [3, 2, 2, 0, "seed", "Seed value to use for the random number stream."], [3, 2, 2, 0, "stop", "Stopping criterion that determines how much effort to spend on finding smaller fleet compositions."]], "pyvrp.plotting": [[2, 0, 0, 1, "plot_coordinates", ""], [2, 0, 0, 1, "plot_demands", ""], [2, 0, 0, 1, "plot_diversity", ""], [2, 0, 0, 1, "plot_instance", ""], [2, 0, 0, 1, "plot_objectives", ""], [2, 0, 0, 1, "plot_result", ""], [2, 0, 0, 1, "plot_route_schedule", ""], [2, 0, 0, 1, "plot_runtimes", ""], [2, 0, 0, 1, "plot_solution", ""], [2, 0, 0, 1, "plot_time_windows", ""]], "pyvrp.plotting.plot_coordinates": [[2, 6, 1, 0, "plot_coordinates", "Plots coordinates for clients and depot."]], "pyvrp.plotting.plot_coordinates.plot_coordinates": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on."], [2, 2, 2, 0, "data", "Data instance."], [2, 2, 2, 0, "title", "Title to add to the plot."]], "pyvrp.plotting.plot_demands": [[2, 6, 1, 0, "plot_demands", "Plots demands for clients, as vertical bars sorted by demand."]], "pyvrp.plotting.plot_demands.plot_demands": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on."], [2, 2, 2, 0, "data", "Data instance."], [2, 2, 2, 0, "dimension", "Load dimension to plot."], [2, 2, 2, 0, "title", "Title to add to the plot."]], "pyvrp.plotting.plot_diversity": [[2, 6, 1, 0, "plot_diversity", "Plots population diversity statistics."]], "pyvrp.plotting.plot_diversity.plot_diversity": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on."], [2, 2, 2, 0, "result", "Result for which to plot diversity."]], "pyvrp.plotting.plot_instance": [[2, 6, 1, 0, "plot_instance", "Plots client coordinate, time window and demand data of the given instance."]], "pyvrp.plotting.plot_instance.plot_instance": [[2, 2, 2, 0, "data", "Data instance."], [2, 2, 2, 0, "fig", "Optional Figure to draw on."]], "pyvrp.plotting.plot_objectives": [[2, 6, 1, 0, "plot_objectives", "Plots each subpopulation's objective values."]], "pyvrp.plotting.plot_objectives.plot_objectives": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on."], [2, 2, 2, 0, "num_to_skip", "Number of initial iterations to skip when plotting."], [2, 2, 2, 0, "result", "Result for which to plot objectives."], [2, 2, 2, 0, "ylim_adjust", "Bounds the y-axis to (best * ylim_adjust[0], best * ylim_adjust[1]) where best denotes the best found feasible objective value."]], "pyvrp.plotting.plot_result": [[2, 6, 1, 0, "plot_result", "Plots the results of a run, including the best solution and detailed statistics about the algorithm's performance."]], "pyvrp.plotting.plot_result.plot_result": [[2, 2, 2, 0, "data", "Data instance underlying the result's solution."], [2, 2, 2, 0, "fig", "Optional Figure to draw on."], [2, 2, 2, 0, "result", "Result to be plotted."]], "pyvrp.plotting.plot_route_schedule": [[2, 6, 1, 0, "plot_route_schedule", "Plots a route schedule. This function plots multiple time statistics as a function of distance travelled:"]], "pyvrp.plotting.plot_route_schedule.plot_route_schedule": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on."], [2, 2, 2, 0, "data", "Data instance for which to plot the route schedule."], [2, 2, 2, 0, "legend", "Whether or not to show the legends."], [2, 2, 2, 0, "load_dimension", "Load dimension to plot."], [2, 2, 2, 0, "route", "Route (list of clients) whose schedule to plot."], [2, 2, 2, 0, "title", "Title to add to the plot."]], "pyvrp.plotting.plot_runtimes": [[2, 6, 1, 0, "plot_runtimes", "Plots iteration runtimes."]], "pyvrp.plotting.plot_runtimes.plot_runtimes": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on."], [2, 2, 2, 0, "result", "Result for which to plot runtimes."]], "pyvrp.plotting.plot_solution": [[2, 6, 1, 0, "plot_solution", "Plots the given solution."]], "pyvrp.plotting.plot_solution.plot_solution": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on."], [2, 2, 2, 0, "data", "Data instance underlying the solution."], [2, 2, 2, 0, "plot_clients", "Whether to plot all clients as dots."], [2, 2, 2, 0, "solution", "Solution to plot."]], "pyvrp.plotting.plot_time_windows": [[2, 6, 1, 0, "plot_time_windows", "Plots client time windows, as vertical bars sorted by time window."]], "pyvrp.plotting.plot_time_windows.plot_time_windows": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on."], [2, 2, 2, 0, "data", "Data instance."], [2, 2, 2, 0, "title", "Title to add to the plot."]], "pyvrp.read": [[3, 6, 1, 0, "read", "Reads the VRPLIB file at the given location, and returns a ProblemData instance."], [3, 6, 1, 0, "read_solution", "Reads a solution in VRPLIB format from the give file location, and returns the routes contained in it."]], "pyvrp.read.read": [[3, 2, 2, 0, "round_func", "Optional rounding function that is applied to all data values in the instance."], [3, 2, 2, 0, "where", "File location to read."]], "pyvrp.read.read_solution": [[3, 2, 2, 0, "where", "File location to read."]], "pyvrp.repair": [[4, 0, 0, 1, "_repair", ""]], "pyvrp.repair._repair": [[4, 6, 1, 0, "greedy_repair", "Greedy repair operator. This operator inserts each client in the list of unplanned clients into the given routes. It does so by evaluating all possible moves and applying the best one for each client, resulting in a quadratic runtime."], [4, 6, 1, 0, "nearest_route_insert", "Nearest route insert operator. This operator inserts each client in the list of unplanned clients into one of the given routes. It does so by first determining which route has a center point closest to the client, and then evaluating all possible insert moves of the client into that closest route. The best move is applied. This operator has a quadratic runtime in the worst case, but is typically much more efficient than greedy_repair(), at the cost of some solution quality."]], "pyvrp.repair._repair.greedy_repair": [[4, 2, 2, 0, "cost_evaluator", "Cost evaluator to use when evaluating insertion moves."], [4, 2, 2, 0, "data", "Problem data instance."], [4, 2, 2, 0, "routes", "List of routes."], [4, 2, 2, 0, "unplanned", "Unplanned clients to insert into the routes."]], "pyvrp.repair._repair.nearest_route_insert": [[4, 2, 2, 0, "cost_evaluator", "Cost evaluator to use when evaluating insertion moves."], [4, 2, 2, 0, "data", "Problem data instance."], [4, 2, 2, 0, "routes", "List of routes."], [4, 2, 2, 0, "unplanned", "Unplanned clients to insert into the routes."]], "pyvrp.search": [[5, 0, 0, 1, "LocalSearch", ""], [5, 0, 0, 1, "SearchMethod", ""], [5, 0, 0, 1, "_search", ""], [5, 0, 0, 1, "neighbourhood", ""]], "pyvrp.search.LocalSearch": [[5, 1, 1, 0, "LocalSearch", "Local search method. This search method explores a granular neighbourhood in a very efficient manner using user-provided node and route operators. This quickly results in much improved solutions."]], "pyvrp.search.LocalSearch.LocalSearch": [[5, 3, 1, 0, "__call__", "This method uses the search() and intensify() methods to iteratively improve the given solution. First, search() is applied. Thereafter, intensify() is applied. This repeats until no further improvements are found. Finally, the improved solution is returned."], [5, 3, 1, 0, "add_node_operator", "Adds a node operator to this local search object. The node operator will be used by search() to improve a solution."], [5, 3, 1, 0, "add_route_operator", "Adds a route operator to this local search object. The route operator will be used by intensify() to improve a solution using more expensive route operators."], [5, 3, 1, 0, "intensify", "This method uses the intensifying route operators on this local search object to improve the given solution. To limit the computational demands of intensification, the  overlap_tolerance argument can be used to limit the number of route pairs that are evaluated."], [5, 3, 1, 0, "neighbours", "Returns the granular neighbourhood currently used by the local search."], [5, 3, 1, 0, "search", "This method uses the node operators on this local search object to improve the given solution."], [5, 3, 1, 0, "set_neighbours", "Convenience method to replace the current granular neighbourhood used by the local search object."]], "pyvrp.search.LocalSearch.LocalSearch.__call__": [[5, 2, 2, 0, "cost_evaluator", "Cost evaluator to use."], [5, 2, 2, 0, "solution", "The solution to improve through local search."]], "pyvrp.search.LocalSearch.LocalSearch.__init__": [[5, 2, 2, 0, "data", "Data object describing the problem to be solved."], [5, 2, 2, 0, "neighbours", "List of lists that defines the local search neighbourhood."], [5, 2, 2, 0, "rng", "Random number generator."]], "pyvrp.search.LocalSearch.LocalSearch.add_node_operator": [[5, 2, 2, 0, "op", "The node operator to add to this local search object."]], "pyvrp.search.LocalSearch.LocalSearch.add_route_operator": [[5, 2, 2, 0, "op", "The route operator to add to this local search object."]], "pyvrp.search.LocalSearch.LocalSearch.intensify": [[5, 2, 2, 0, "cost_evaluator", "Cost evaluator to use."], [5, 2, 2, 0, "overlap_tolerance", "This method evaluates improving moves between route pairs."], [5, 2, 2, 0, "solution", "The solution to improve."]], "pyvrp.search.LocalSearch.LocalSearch.search": [[5, 2, 2, 0, "cost_evaluator", "Cost evaluator to use."], [5, 2, 2, 0, "solution", "The solution to improve."]], "pyvrp.search.LocalSearch.LocalSearch.set_neighbours": [[5, 2, 2, 0, "neighbours", "A new granular neighbourhood."]], "pyvrp.search.SearchMethod": [[5, 1, 1, 0, "SearchMethod", "Protocol that search methods must implement."]], "pyvrp.search.SearchMethod.SearchMethod": [[5, 3, 1, 0, "__call__", "Search around the given solution, and returns a new solution that is hopefully better."]], "pyvrp.search.SearchMethod.SearchMethod.__call__": [[5, 2, 2, 0, "cost_evaluator", "Cost evaluator to use when evaluating improvements."], [5, 2, 2, 0, "solution", "The solution to improve."]], "pyvrp.search.SearchMethod.SearchMethod.__init__": [[5, 2, 2, "pyvrp.search.SearchMethod.SearchMethod", "args", "Protocol that search methods must implement."], [5, 2, 2, "pyvrp.search.SearchMethod.SearchMethod", "kwargs", "Protocol that search methods must implement."]], "pyvrp.search._search": [[5, 1, 1, 0, "Exchange10", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange11", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange20", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange21", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange22", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange30", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange31", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange32", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange33", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "NodeOperator", "!! processed by numpydoc !!"], [5, 1, 1, 0, "RouteOperator", "!! processed by numpydoc !!"], [5, 1, 1, 0, "SwapRoutes", "This operator evaluates exchanging the visits of two routes U and V."], [5, 1, 1, 0, "SwapStar", "Explores the SWAP* neighbourhood of R6fbb5e500902-1. The SWAP* neighbourhood explores free form re-insertions of clients U and V in the given routes (so the clients are exchanged between routes, but they are not necessarily inserted in the place of the other exchanged client)."], [5, 1, 1, 0, "SwapTails", "Given two nodes U and V, tests whether replacing the arc of U to its successor n(U) and V to n(V) by U \\rightarrow n(V) and V \\rightarrow n(U) is an improving move."]], "pyvrp.search._search.Exchange10.__init__": [[5, 2, 2, "pyvrp.search._search.Exchange10", "data", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."]], "pyvrp.search._search.Exchange11.__init__": [[5, 2, 2, "pyvrp.search._search.Exchange11", "data", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."]], "pyvrp.search._search.Exchange20.__init__": [[5, 2, 2, "pyvrp.search._search.Exchange20", "data", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."]], "pyvrp.search._search.Exchange21.__init__": [[5, 2, 2, "pyvrp.search._search.Exchange21", "data", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."]], "pyvrp.search._search.Exchange22.__init__": [[5, 2, 2, "pyvrp.search._search.Exchange22", "data", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."]], "pyvrp.search._search.Exchange30.__init__": [[5, 2, 2, "pyvrp.search._search.Exchange30", "data", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."]], "pyvrp.search._search.Exchange31.__init__": [[5, 2, 2, "pyvrp.search._search.Exchange31", "data", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."]], "pyvrp.search._search.Exchange32.__init__": [[5, 2, 2, "pyvrp.search._search.Exchange32", "data", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."]], "pyvrp.search._search.Exchange33.__init__": [[5, 2, 2, "pyvrp.search._search.Exchange33", "data", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."]], "pyvrp.search._search.SwapRoutes.__init__": [[5, 2, 2, "pyvrp.search._search.SwapRoutes", "data", "This operator evaluates exchanging the visits of two routes U and V."]], "pyvrp.search._search.SwapStar.__init__": [[5, 2, 2, "pyvrp.search._search.SwapStar", "data", "Explores the SWAP* neighbourhood of R6fbb5e500902-1. The SWAP* neighbourhood explores free form re-insertions of clients U and V in the given routes (so the clients are exchanged between routes, but they are not necessarily inserted in the place of the other exchanged client)."]], "pyvrp.search._search.SwapTails.__init__": [[5, 2, 2, "pyvrp.search._search.SwapTails", "data", "Given two nodes U and V, tests whether replacing the arc of U to its successor n(U) and V to n(V) by U \\rightarrow n(V) and V \\rightarrow n(U) is an improving move."]], "pyvrp.search.neighbourhood": [[5, 1, 1, 0, "NeighbourhoodParams", "Configuration for calculating a granular neighbourhood."], [5, 6, 1, 0, "compute_neighbours", "Computes neighbours defining the neighbourhood for a problem instance."]], "pyvrp.search.neighbourhood.NeighbourhoodParams": [[5, 4, 1, 0, "nb_granular", "Number of other clients that are in each client's granular neighbourhood. This parameter determines the size of the overall neighbourhood."], [5, 4, 1, 0, "symmetric_neighbours", "Whether to symmetrise the neighbourhood structure. This ensures that when edge (i, j) is in, then so is (j, i). Note that this is not the same as symmetric_proximity."], [5, 4, 1, 0, "symmetric_proximity", "Whether to calculate a symmetric proximity matrix. This ensures edge (i, j) is given the same weight as (j, i)."], [5, 4, 1, 0, "weight_time_warp", "Penalty weight given to the minimum time warp aspect of the proximity calculation. A large time warp indicates the clients are far apart in duration/time."], [5, 4, 1, 0, "weight_wait_time", "Penalty weight given to the minimum wait time aspect of the proximity calculation. A large wait time indicates the clients are far apart in duration/time."]], "pyvrp.search.neighbourhood.NeighbourhoodParams.__init__": [[5, 2, 2, "pyvrp.search.neighbourhood.NeighbourhoodParams", "nb_granular", "Configuration for calculating a granular neighbourhood."], [5, 2, 2, "pyvrp.search.neighbourhood.NeighbourhoodParams", "symmetric_neighbours", "Configuration for calculating a granular neighbourhood."], [5, 2, 2, "pyvrp.search.neighbourhood.NeighbourhoodParams", "symmetric_proximity", "Configuration for calculating a granular neighbourhood."], [5, 2, 2, "pyvrp.search.neighbourhood.NeighbourhoodParams", "weight_time_warp", "Configuration for calculating a granular neighbourhood."], [5, 2, 2, "pyvrp.search.neighbourhood.NeighbourhoodParams", "weight_wait_time", "Configuration for calculating a granular neighbourhood."]], "pyvrp.search.neighbourhood.compute_neighbours": [[5, 2, 2, 0, "data", "ProblemData for which to compute the neighbourhood."], [5, 2, 2, 0, "params", "NeighbourhoodParams that define how the neighbourhood is computed."]], "pyvrp.show_versions": [[3, 6, 1, 0, "show_versions", "This function prints version information that is useful when filing bug reports."]], "pyvrp.solve": [[3, 1, 1, 0, "SolveParams", "Solver parameters for PyVRP's hybrid genetic search algorithm."], [3, 6, 1, 0, "solve", "Solves the given problem data instance."]], "pyvrp.solve.SolveParams": [[3, 3, 1, 0, "from_file", "Loads the solver parameters from a TOML file."]], "pyvrp.solve.SolveParams.__init__": [[3, 2, 2, 0, "genetic", "Genetic algorithm parameters."], [3, 2, 2, 0, "neighbourhood", "Neighbourhood parameters."], [3, 2, 2, 0, "node_ops", "Node operators to use in the search."], [3, 2, 2, 0, "penalty", "Penalty parameters."], [3, 2, 2, 0, "population", "Population parameters."], [3, 2, 2, 0, "route_ops", "Route operators to use in the search."]], "pyvrp.solve.SolveParams.from_file": [[3, 2, 2, "pyvrp.solve.SolveParams.from_file", "loc", "Loads the solver parameters from a TOML file."]], "pyvrp.solve.solve": [[3, 2, 2, 0, "collect_stats", "Whether to collect statistics about the solver's progress."], [3, 2, 2, 0, "data", "Problem data instance to solve."], [3, 2, 2, 0, "display", "Whether to display information about the solver progress."], [3, 2, 2, 0, "params", "Solver parameters to use."], [3, 2, 2, 0, "seed", "Seed value to use for the random number stream."], [3, 2, 2, 0, "stop", "Stopping criterion to use."]], "pyvrp.stop": [[6, 0, 0, 1, "FirstFeasible", ""], [6, 0, 0, 1, "MaxIterations", ""], [6, 0, 0, 1, "MaxRuntime", ""], [6, 0, 0, 1, "MultipleCriteria", ""], [6, 0, 0, 1, "NoImprovement", ""], [6, 0, 0, 1, "StoppingCriterion", ""]], "pyvrp.stop.FirstFeasible": [[6, 1, 1, 0, "FirstFeasible", "Terminates the search after a feasible solution has been observed."]], "pyvrp.stop.MaxIterations": [[6, 1, 1, 0, "MaxIterations", "Criterion that stops after a maximum number of iterations."]], "pyvrp.stop.MaxIterations.MaxIterations.__init__": [[6, 2, 2, "pyvrp.stop.MaxIterations.MaxIterations", "max_iterations", "Criterion that stops after a maximum number of iterations."]], "pyvrp.stop.MaxRuntime": [[6, 1, 1, 0, "MaxRuntime", "Criterion that stops after a specified maximum runtime (in seconds)."]], "pyvrp.stop.MaxRuntime.MaxRuntime.__init__": [[6, 2, 2, "pyvrp.stop.MaxRuntime.MaxRuntime", "max_runtime", "Criterion that stops after a specified maximum runtime (in seconds)."]], "pyvrp.stop.MultipleCriteria": [[6, 1, 1, 0, "MultipleCriteria", "Simple aggregate class that manages multiple stopping criteria at once."]], "pyvrp.stop.MultipleCriteria.MultipleCriteria.__init__": [[6, 2, 2, "pyvrp.stop.MultipleCriteria.MultipleCriteria", "criteria", "Simple aggregate class that manages multiple stopping criteria at once."]], "pyvrp.stop.NoImprovement": [[6, 1, 1, 0, "NoImprovement", "Criterion that stops if the best solution has not been improved for a fixed number of iterations."]], "pyvrp.stop.NoImprovement.NoImprovement.__init__": [[6, 2, 2, 0, "max_iterations", "The maximum number of non-improving iterations."]], "pyvrp.stop.StoppingCriterion": [[6, 1, 1, 0, "StoppingCriterion", "Protocol that stopping criteria must implement."]], "pyvrp.stop.StoppingCriterion.StoppingCriterion": [[6, 3, 1, 0, "__call__", "When called, this stopping criterion should return True if the algorithm should stop, and False otherwise."]], "pyvrp.stop.StoppingCriterion.StoppingCriterion.__call__": [[6, 2, 2, 0, "best_cost", "Cost of current best solution."]], "pyvrp.stop.StoppingCriterion.StoppingCriterion.__init__": [[6, 2, 2, "pyvrp.stop.StoppingCriterion.StoppingCriterion", "args", "Protocol that stopping criteria must implement."], [6, 2, 2, "pyvrp.stop.StoppingCriterion.StoppingCriterion", "kwargs", "Protocol that stopping criteria must implement."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"], "7": ["py", "exception", "Python exception"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:attribute", "5": "py:property", "6": "py:function", "7": "py:exception"}, "terms": {"": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 19], "0": [1, 2, 3, 5, 8, 9, 11, 12, 13, 15, 20], "00": [12, 13], "0055": 16, "01": [11, 15], "05": 5, "09": 15, "0a0": 12, "1": [0, 1, 2, 3, 5, 9, 10, 11, 12, 13, 15, 20], "10": [3, 5, 11, 12, 13, 15, 16], "100": [7, 11, 13], "1000": [3, 7, 11, 12, 13], "101": 11, "1016": 5, "102": 11, "103": 11, "104": 11, "105": 11, "105643": 5, "106": 11, "107": 11, "108": 11, "109": 11, "11": [11, 12, 13, 15], "110": 11, "111": 11, "112": 11, "113": 11, "114": [11, 12], "115": 11, "116": 11, "117": 11, "118": 11, "1186": 7, "119": 11, "12": [3, 11, 12, 13], "120": 11, "121": 11, "122": 11, "123": 11, "124": 11, "125": [11, 12], "126": 11, "127": 11, "128": 11, "1287": 16, "129": 11, "13": [3, 11, 12, 13, 15], "130": 11, "131": 11, "132": 11, "133": 11, "134": 11, "135": 11, "136": 11, "137": 11, "138": 11, "139": 11, "14": [11, 12, 13], "140": [5, 11], "141": 11, "142": 11, "143": 11, "144": 11, "145": 11, "146": 11, "147": 11, "148": 11, "149": 11, "15": [2, 11, 12, 13], "150": 11, "1500": 12, "151": 11, "152": 11, "153": 11, "154": 11, "155": 11, "156": 11, "157": 11, "158": 11, "159": 11, "16": [11, 12, 13], "160": [11, 12], "161": 11, "162": 11, "163": 11, "164": 11, "1643": 11, "165": 11, "166": 11, "167": 11, "168": 11, "169": 11, "17": [11, 12, 13], "170": 11, "171": 11, "1717": 12, "172": 11, "173": 11, "174": 11, "175": 11, "176": 11, "177": 11, "17765": [11, 13], "178": 11, "17821": 13, "179": 11, "18": [11, 12, 13, 15], "180": 11, "181": 11, "182": 11, "183": 11, "184": 11, "185": 11, "186": 11, "187": 11, "188": 11, "1886": 11, "189": 11, "19": [11, 12, 13], "190": 11, "191": 11, "192": 11, "193": 11, "194": 11, "1940": 12, "195": 11, "196": 11, "197": 11, "1970": 11, "198": 11, "1987": 0, "199": 11, "1_": 1, "1_000": 12, "1f": 11, "2": [1, 3, 5, 7, 8, 11, 12, 13, 15], "20": [3, 8, 11, 12, 13, 15], "200": [11, 13], "2000": [7, 11, 12], "20000": 3, "201": 11, "2010": 0, "2013": [7, 15, 19], "2014": 20, "202": 11, "2020": [7, 15], "2021": 5, "2022": [5, 16, 19], "2023": [15, 16], "2024": [15, 16], "203": 11, "204": 11, "2044": 12, "205": 11, "206": 11, "207": 11, "208": 11, "209": 11, "21": [11, 12, 13, 15], "210": 11, "211": 11, "212": 11, "213": 11, "214": 11, "215": 11, "216": 11, "217": 11, "218": 11, "2183": 7, "219": 11, "22": [11, 12, 13, 15], "220": 11, "2200": 11, "221": 11, "222": 11, "223": 11, "224": [0, 11], "2240": 12, "225": 11, "226": 11, "2266": 11, "227": 11, "228": [11, 12], "229": 11, "23": [11, 12, 13, 15], "230": [0, 11], "231": 11, "232": 11, "233": 11, "234": 11, "235": 11, "236": 11, "237": 11, "238": 11, "239": 11, "24": [3, 11, 12, 13, 15], "240": [7, 11, 12], "2400": 11, "241": 11, "242": 11, "243": 11, "244": 11, "245": 11, "246": 11, "247": 11, "248": 11, "249": 11, "25": [3, 11, 12, 13, 15], "250": 11, "2500": 7, "251": 11, "252": 11, "253": 11, "254": 11, "2540": 12, "255": 11, "256": 11, "257": 11, "2576": 12, "25797": 11, "258": 11, "259": 11, "26": [11, 12, 13], "260": 11, "261": 11, "262": 11, "263": 11, "264": 11, "265": 11, "266": 11, "267": 11, "268": 11, "269": 11, "27": [11, 12, 13, 15], "270": 11, "27080": 11, "271": 11, "272": 11, "273": 11, "274": 11, "275": [11, 12], "276": 11, "277": 11, "278": 11, "279": 11, "28": [11, 13, 15], "280": 11, "281": 11, "282": 11, "283": 11, "284": 11, "285": 11, "286": 11, "287": 11, "288": 11, "289": 11, "29": [11, 13, 15], "290": 11, "291": 11, "292": 11, "293": 11, "294": 11, "295": [11, 12], "296": 11, "297": 11, "298": 11, "299": 11, "2n": 1, "3": [1, 3, 9, 11, 12, 13, 15], "30": [11, 12, 13], "300": 11, "301": 11, "302": [11, 12], "303": 11, "304": 11, "305": 11, "306": 11, "307": 11, "308": 11, "309": 11, "31": [11, 13, 15], "310": 11, "311": 11, "312": 11, "313": 11, "314": 11, "315": 11, "316": 11, "317": 11, "318": 11, "319": 11, "32": [3, 11, 13, 15], "320": [11, 12], "3200": 11, "321": 11, "322": 11, "323": 11, "324": 11, "325": 11, "326": 11, "327": 11, "328": 11, "329": 11, "33": [11, 13], "330": 11, "331": 11, "332": 11, "333": 11, "334": [11, 12], "335": 11, "336": 11, "337": 11, "338": 11, "339": 11, "34": [3, 11, 13], "340": 11, "3400": 12, "341": 11, "342": [11, 12], "343": 11, "344": 11, "345": 11, "346": 11, "347": [11, 12], "348": 11, "349": 11, "35": [11, 13, 15], "350": 11, "351": 11, "3510": 11, "352": 11, "353": 11, "354": 11, "355": 11, "356": 11, "357": 11, "358": 11, "359": 11, "36": [11, 12, 13, 16], "360": [7, 11], "361": 11, "362": 11, "363": 11, "3630": 11, "36391": 11, "364": 11, "365": 11, "366": 11, "36634": 11, "367": 11, "368": 11, "369": [11, 12], "37": [11, 13], "370": 11, "371": 11, "372": 11, "373": 11, "374": 11, "375": 11, "376": 11, "377": 11, "378": 11, "379": 11, "38": [11, 13, 15], "380": [11, 12], "381": 11, "382": [11, 12], "383": 11, "384": 11, "385": 11, "386": 11, "387": 11, "388": 11, "389": 11, "39": [11, 13, 15], "390": 11, "391": 11, "392": 11, "393": 11, "394": 11, "395": 11, "396": 11, "397": 11, "398": 11, "399": [11, 12], "4": [1, 3, 7, 11, 12, 13, 15, 16], "40": [3, 5, 11, 12, 13, 15], "400": [11, 12], "401": 11, "402": 11, "403": 11, "404": 11, "405": 11, "406": 11, "4067": 15, "407": 11, "408": 11, "409": [11, 12], "41": [11, 13, 15], "410": [11, 12], "411": [11, 12], "412": 11, "413": [11, 12], "414": 11, "415": 11, "416": 11, "417": 11, "418": 11, "4180": 11, "419": 11, "42": [11, 13, 15], "420": 11, "421": 11, "422": 11, "423": 11, "424": 11, "425": 11, "426": 11, "427": 11, "428": 11, "429": 11, "43": [3, 11, 13, 15], "430": 11, "431": 11, "432": 11, "433": 11, "434": 11, "435": 11, "436": 11, "437": 11, "438": 11, "44": [11, 13, 15], "45": [11, 12, 13, 15], "456": 12, "46": [11, 12, 13], "47": [11, 12, 13], "471": 12, "48": [11, 13, 15], "480": 12, "484": 12, "49": [11, 13], "5": [2, 3, 8, 11, 12, 13, 15], "50": [3, 11, 13], "500": [12, 13], "51": [11, 13], "5145": 12, "52": [11, 13], "523": 7, "5274": 12, "53": [11, 13], "536": 0, "5375": 12, "54": [11, 13, 15], "545": 0, "5484": 12, "55": [11, 12, 13], "56": [11, 13], "560": 12, "57": [11, 12, 13], "570": 12, "5754": 12, "58": [11, 13, 15], "59": [11, 13], "5920": 11, "599": 13, "6": [3, 8, 11, 12, 13, 15], "60": [8, 11, 13, 15], "6004": 12, "6093": 12, "61": [11, 13, 15], "62": [11, 13, 15], "6208": 12, "6219": 12, "6229": 12, "6240": 12, "6285": 12, "63": [11, 13], "6369": 12, "64": [3, 11, 13], "640": 12, "6421": 12, "65": [11, 13], "6528": 12, "66": [11, 13], "6608": 12, "6697": 12, "67": [11, 13], "68": [11, 13], "684": 12, "69": [11, 12, 13], "7": [3, 11, 12, 13, 15], "70": [11, 13], "71": [11, 13, 15], "72": [11, 13, 15], "73": [11, 13], "74": [11, 13], "75": [11, 13], "76": [11, 13], "77": [11, 13], "776": 11, "7765": [11, 13], "78": [11, 13], "7821": 13, "79": [11, 12, 13], "79611": 13, "798": 12, "8": [3, 11, 12, 13, 15], "80": [8, 11, 12, 13], "81": [11, 13], "82": [11, 13], "83": [11, 13], "84": [11, 13], "85": [11, 13], "850": 12, "8584": 13, "86": [11, 13], "87": [11, 13], "88": [11, 13], "89": [11, 13], "9": [3, 11, 12, 13, 15], "90": [7, 11, 13], "91": [11, 13], "912": 12, "92": [11, 13], "93": [11, 13], "9361": 13, "94": [11, 13], "943": 16, "95": [2, 11, 13], "955": 16, "96": [11, 13], "960": 7, "97": [11, 13], "98": [11, 13], "99": [11, 13, 15], "999": 12, "A": [0, 1, 3, 5, 9, 10, 11, 14, 16], "As": [5, 20], "At": [1, 3, 20], "But": 13, "By": [3, 12, 13], "For": [7, 8, 9, 11, 13, 19, 20], "If": [1, 3, 8, 9, 10, 12, 14, 16, 17, 19, 20], "In": [0, 3, 9, 10, 11, 12, 13, 15, 19, 20], "It": [0, 3, 4, 9, 11, 13, 14, 20], "No": 3, "OR": [12, 15], "Of": [9, 10, 11], "On": [9, 10], "One": [2, 8], "Or": 16, "Such": [8, 9, 12], "That": [1, 3, 13], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 15, 18, 19, 20], "Then": [1, 8, 18], "There": 8, "These": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15], "To": [4, 5, 7, 8, 9, 10, 11, 13, 14, 17, 18], "With": 9, "_": [11, 12, 13], "__and__": 3, "__call__": [3, 5, 6], "__eq__": 3, "__getitem__": 3, "__invert__": 3, "__iter__": 3, "__len__": 3, "__or__": 3, "__setitem__": 3, "__xor__": 3, "_r": 3, "ab": 12, "abl": [3, 9], "about": [2, 3, 7, 8, 9, 11, 12, 13], "abov": [3, 12, 13], "accept": 8, "accord": 3, "account": 9, "achiev": 3, "actual": [3, 10, 11], "ad": [3, 5, 8, 9, 12, 13, 19], "adc": 15, "add": [1, 2, 3, 5, 8, 9, 12, 13, 19, 20], "add_client": [3, 12], "add_client_group": 3, "add_depot": [3, 12], "add_edg": [3, 12], "add_node_oper": [5, 13], "add_profil": [3, 12], "add_route_oper": [5, 13], "add_vehicle_typ": [3, 12], "addit": [3, 9, 10, 12, 13, 14, 20], "addition": [7, 11, 12, 13], "address": 15, "adher": 10, "adjust": 13, "admit": 3, "advanc": 3, "after": [3, 4, 5, 6, 7, 8, 9, 12, 18, 19], "again": [11, 12, 13], "against": 15, "aggreg": [3, 6], "aim": 12, "al": [7, 15, 19], "algo": 13, "algorithm": [0, 1, 2, 3, 6, 11, 15, 19, 20], "all": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 17, 18, 20], "allow": [1, 3, 4, 8, 10, 11, 12, 13, 19, 20], "along": [3, 12, 13], "alpha": 12, "alreadi": [9, 12, 17], "also": [1, 3, 5, 9, 11, 12, 13, 16, 18, 19, 20], "altern": 3, "although": 10, "altogeth": 13, "alwai": [1, 3, 8, 9, 15], "amongst": 3, "amount": [3, 5, 10, 11, 12, 17], "an": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20], "analys": 3, "analyz": 8, "angl": 5, "ani": [0, 3, 4, 8, 9, 10, 20], "annot": 3, "anoth": [0, 8], "answer": 17, "apart": 5, "api": [11, 12, 13], "appendix": 15, "appl": 8, "appli": [3, 4, 5, 9, 12, 19], "applic": [0, 8, 20], "approach": 19, "appropri": [0, 3, 8, 11], "ar": [0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20], "arc": [5, 9, 11, 20], "area": 12, "arg": [5, 6], "argument": [3, 5, 8, 11, 12], "ari": [3, 19], "around": [5, 9], "arrai": 10, "arriv": [11, 20], "art": [14, 20], "articl": 16, "arxiv": 16, "ask": 13, "aspect": [5, 11], "assert": 13, "assign": [3, 10, 12, 20], "associ": [3, 5], "assum": [0, 3, 7, 10, 11, 20], "attach": 8, "attain": 12, "attempt": 3, "attent": 8, "attribut": [3, 8], "august": 15, "author": [8, 16], "automat": [3, 8, 12], "avail": [3, 5, 7, 9, 11, 13, 16, 20], "averag": [7, 11, 12, 13, 15], "avg": 12, "avoid": [3, 8, 12], "ax": [2, 11, 12], "axarr": 11, "axi": [2, 11], "b": 15, "back": [3, 10, 12, 19], "background": [2, 11], "backhaul": [10, 14], "backhaul_sect": 10, "backward": 3, "bad": 13, "balanc": [1, 3, 13, 20], "bar": [2, 8, 11], "base": [3, 8, 10, 11, 13], "baselin": 9, "basi": 9, "basic": [9, 11, 12], "becaus": [3, 13, 15], "becom": 12, "been": [3, 6, 15, 17, 20], "befor": [3, 5, 11, 13, 15, 20], "begin": [11, 20], "behaviour": 12, "being": [3, 12], "below": [8, 10, 14, 15], "benchmark": [9, 10, 11, 13, 14, 20], "benefici": 13, "benefit": 14, "besid": 12, "best": [2, 3, 4, 6, 7, 11, 12, 13, 15, 19], "best_cost": 6, "better": [1, 2, 5, 11, 13, 19], "between": [0, 1, 3, 5, 14], "bibtex": 16, "bicyclist": 3, "bigger": 3, "binari": [3, 14], "bind": 9, "bit": 3, "bitset": 3, "bk": 11, "blank": 8, "block_siz": 3, "bodi": 8, "bool": [2, 3, 5, 6, 9, 12], "boost": 3, "booster": 3, "booster_cost_evalu": 3, "both": [0, 3, 12, 13, 19], "bottom": [11, 13], "bound": [2, 3], "box": 12, "bpd": 1, "branch": [8, 20], "break": 8, "breakpoint": 8, "brief": [12, 14], "broken": 1, "broken_pairs_dist": [1, 13], "brows": 17, "browser": [8, 18], "bug": 3, "build": [11, 13], "build_extens": 8, "build_typ": 8, "built": 8, "bunch": 8, "bundl": 8, "button": 8, "c": [0, 3, 5, 8, 9, 17, 19], "calcul": 5, "call": [3, 6, 8, 11, 12, 13], "callabl": 3, "can": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20], "candid": 19, "cannot": [3, 12], "capabl": 19, "capac": [3, 10, 11, 12, 14, 20], "capacit": 14, "capacity_sect": 10, "car": 3, "carefulli": 0, "case": [0, 3, 4, 5, 9, 10, 11, 12], "caus": [3, 9, 15], "cd": [8, 18], "center": [3, 4, 5], "centroid": 3, "certain": 3, "challeng": 11, "chang": [9, 12, 15], "charact": 8, "charg": 13, "cheap": 8, "check": [3, 8, 9, 20], "circl": 8, "cite": 14, "class": [3, 5, 6, 8, 9], "classic": 14, "classifi": 20, "classmethod": 3, "clear": [3, 8, 13], "click": 8, "client": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 20], "clientgroup": 3, "clip": 3, "clone": [8, 18], "close": [3, 12, 13], "closest": 4, "code": [8, 9, 15, 17], "collect": [3, 9, 11, 14, 15], "collect_from": 3, "collect_stat": 3, "color": 12, "com": [8, 18], "combin": [0, 11, 19], "come": [8, 9, 14], "comma": 3, "command": [7, 8, 17], "commonli": [10, 12], "compar": [7, 12, 15], "compat": [3, 8], "compet": 20, "compil": [7, 8, 14], "complet": [1, 3, 8, 11, 12, 20], "complex": 20, "compon": [3, 8, 9, 12, 14], "composit": 3, "comput": [1, 3, 5, 7, 9, 10, 11, 13, 16, 20], "computation": 8, "compute_neighbour": [5, 9, 13], "concis": 8, "conclud": 12, "concret": 9, "condit": 13, "confer": 0, "config": 7, "configur": [3, 5, 7, 8, 11], "conform": 8, "connect": 3, "consecut": 5, "consid": [1, 3, 5, 9, 12, 16, 20], "consider": 20, "consist": [0, 3, 11, 13, 20], "constraint": [3, 9, 12, 14, 20], "construct": [3, 13], "constructor": 8, "contain": [1, 2, 3, 5, 6, 8, 11, 15, 17, 18], "content": 8, "contigu": 10, "continu": [13, 19], "contribut": [9, 14, 20], "contributor": 8, "control": [3, 4, 5], "conveni": [5, 11, 12], "convent": 11, "convers": [8, 17], "convert": [11, 12], "coord": 12, "coordin": [2, 3, 10, 11, 12], "copi": [0, 3], "copyright": 8, "cor": 5, "core": [3, 7], "corner": 8, "correct": [9, 15], "correctli": 8, "correspond": [3, 8], "cost": [0, 3, 4, 5, 6, 9, 11, 12, 14, 20], "cost_evalu": [0, 3, 4, 5, 13], "costevalu": [0, 3, 4, 5, 9, 13], "could": [0, 3, 9, 13], "count": [1, 3], "cours": [9, 11], "cover": 12, "cpp": 8, "cppconfig": 8, "cpu": [7, 8], "creat": [0, 2, 3, 4, 5, 8, 13, 20], "criteria": [13, 14, 19], "criterion": [3, 6, 7, 11, 13, 15, 19], "cross": 8, "crossov": [3, 5, 14, 19], "crossover_op": 3, "csv": 3, "cup": [11, 20], "current": [3, 5, 6, 11, 13, 14, 15, 20], "custom": [7, 11], "customis": 13, "cut": 20, "cvrp": [5, 7, 9, 11, 15, 16, 20], "d": 0, "d_": [9, 11, 20], "d_r": 3, "dash": 2, "data": [0, 2, 3, 4, 5, 8, 9, 11, 12, 13], "date": 15, "datum": 11, "debugg": 8, "debugoptim": 8, "decid": 9, "decim": [11, 12], "decis": 3, "decreas": 3, "def": [12, 13], "default": [2, 3, 5, 8, 9, 10, 13], "defin": [1, 3, 5, 10, 11, 12, 13], "definit": [1, 3, 13], "delai": 3, "delet": 8, "delimit": 3, "deliv": 12, "deliveri": [0, 3, 10, 11, 14, 20], "demand": [2, 3, 5, 10, 11, 12, 20], "demand_sect": 10, "demonstr": 11, "denomin": 1, "denot": [2, 11, 20], "departur": 3, "depend": [3, 8, 9, 10, 14, 18], "depot": [1, 2, 3, 5, 9, 10, 11, 14], "depot1": 12, "depot2": 12, "depot_sect": 10, "describ": [3, 5, 9, 10, 13], "descript": [10, 12], "destruct": 4, "detail": [0, 2, 3, 8, 11, 13, 15], "determin": [1, 3, 4, 5, 13, 20], "dev": 8, "develop": [8, 9, 20], "diagnost": 11, "dictread": 3, "dictwrit": 3, "did": 8, "differ": [0, 1, 3, 5, 7, 11, 12, 13, 14], "dimac": [3, 7, 8, 11, 13, 15], "dimens": [2, 3, 10], "direct": 1, "directli": [8, 18], "directori": 8, "discov": 8, "discuss": [8, 9, 12, 17], "displai": [3, 9, 11, 12], "dissimilar": 13, "dist_penalti": [3, 13], "distanc": [1, 2, 3, 9, 10, 11, 12, 13, 14, 20], "distance_cost": 3, "distance_matric": 3, "distance_matrix": 3, "divers": [2, 3, 11, 13, 14, 19], "diversity_op": 3, "do": [1, 3, 8, 9, 12, 13, 17, 20], "doc": 8, "docstr": 8, "document": [8, 9, 11, 12, 13], "doe": [0, 3, 4, 9, 12], "doi": [5, 16], "don": 9, "done": [8, 13, 18], "dot": [2, 11, 19, 20], "down": 13, "draft": 9, "draw": [2, 3], "drive": [2, 11], "due": [0, 12, 13, 15], "duplic": 3, "durat": [3, 5, 10, 11, 12, 13, 14], "duration_cost": 3, "duration_matric": 3, "duration_matrix": [3, 12], "dure": [9, 11], "dynam": 3, "dynamicbitset": 3, "e": [3, 9, 10, 17, 20], "e_i": [11, 20], "each": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 20], "earli": [2, 9, 11], "earliest": [2, 3, 11, 20], "easi": [8, 9], "easier": 17, "easiest": 13, "easili": [13, 14], "edg": [3, 5, 9, 10, 12, 13], "edge_weight_format": 10, "edge_weight_sect": 10, "edge_weight_typ": 10, "edit": 8, "effect": [19, 20], "effici": [4, 5, 19, 20], "effort": [3, 5], "either": [3, 9, 12], "elit": 3, "emiss": 12, "empti": [3, 4, 5, 13], "encod": 3, "end": [3, 11, 12, 20], "end_depot": [3, 12], "end_tim": 3, "enorm": 20, "enough": 8, "ensur": [3, 5, 8, 9, 12, 13, 19], "enter": 12, "entri": 16, "enumer": [11, 12], "environ": [8, 12, 18], "equal": 11, "equip": 3, "equival": [3, 12], "error": [9, 15], "et": [7, 15, 19], "euclidean": 11, "evalu": [0, 3, 4, 5, 9, 11, 20], "everi": [3, 8, 19], "everyth": [8, 9, 13, 18], "exact": [3, 7, 20], "exactli": [3, 10, 20], "exampl": [3, 6, 8, 9, 11, 12, 13, 17, 20], "exce": [3, 19, 20], "exceed": 6, "except": 3, "excess": 3, "excess_dist": 3, "excess_load": 3, "exchang": [0, 5, 13], "exchange10": [5, 9], "exchange11": 5, "exchange20": 5, "exchange21": 5, "exchange22": 5, "exchange30": 5, "exchange31": 5, "exchange32": 5, "exchange33": 5, "exclud": [2, 3], "exclus": [3, 10], "execut": 8, "exercis": 9, "exist": [2, 3, 8, 9, 17, 19], "expens": 5, "experi": 9, "explain": [8, 10], "explan": [3, 9], "explicitli": [0, 3, 8, 10], "exploit": 19, "explor": [5, 19], "expos": 3, "exposit": 11, "extend": 16, "extens": 20, "f": [1, 11], "f_r": 3, "fals": [2, 3, 5, 6, 11, 12], "familiar": 12, "familiaris": 12, "far": [5, 12, 13, 19], "fast": 3, "faster": 13, "favour": 19, "feasibl": [2, 3, 6, 9, 11, 12, 13, 20], "featur": [8, 9, 12, 19], "februari": 15, "feed": 3, "feel": [8, 17], "few": [8, 11, 13, 18], "fewer": 15, "field": [3, 9, 20], "fig": [2, 11, 13], "figsiz": [11, 12, 13], "figur": [2, 11, 12, 13], "file": [3, 8, 9, 10, 11], "filesystem": 3, "fill_between": 12, "final": [3, 5, 11, 12, 13], "find": [3, 7, 9, 11, 12, 13, 20], "fine": [4, 19], "first": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19], "firstfeas": 6, "fit": [1, 3, 19], "fittest": 3, "five": [7, 15], "fix": [3, 6], "fixed_cost": 3, "fixed_vehicle_cost": 3, "fixeds": 3, "fleet": [3, 10, 14, 20], "float": [1, 2, 3, 5, 6], "fmt": 12, "focu": 20, "folder": 18, "follow": [3, 7, 8, 10, 11, 12, 13, 16, 17, 19, 20], "forc": 3, "forget": 9, "fork": 8, "form": [3, 5, 13], "formal": 1, "format": [3, 14], "found": [2, 3, 5, 10, 11, 12, 15, 19, 20], "frac": 1, "fraction": 3, "free": [3, 5, 8, 17], "frm": [3, 12], "frm_idx": 12, "from": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20], "from_csv": 3, "from_data": [3, 11], "from_fil": 3, "fulfil": 20, "full": [3, 12], "function": [1, 2, 3, 7, 8, 9, 10, 11], "further": [5, 9, 13, 19], "futur": 3, "g": [3, 9, 11, 20], "gain": 11, "gap": [7, 11, 15], "gdb": 8, "ge": [3, 11, 20], "gehr": [7, 11], "gener": [0, 3, 5, 10, 19], "generalis": 14, "generation_s": 3, "genet": [0, 1, 2, 3, 5, 11, 19, 20], "geneticalgorithm": [3, 5, 6, 13], "geneticalgorithmparam": 3, "get": [3, 7, 8, 9, 18, 19, 20], "git": [7, 8, 18], "github": [17, 18], "give": [3, 11, 12], "given": [0, 1, 2, 3, 4, 5, 9, 10, 12, 19, 20], "global": 19, "glossari": 10, "go": [2, 8, 11, 13, 18, 20], "goal": 20, "goe": 18, "good": [1, 3, 9, 11, 12, 13], "googl": 15, "gotcha": 9, "grain": 4, "granular": [5, 9], "graph": [11, 20], "greatli": 8, "greedi": 4, "greedy_repair": 4, "green": 8, "grei": [2, 11], "group": [3, 10, 14, 18], "grow": 13, "guarante": 20, "gui": 8, "guidelin": 9, "h": [11, 12, 20], "ha": [3, 4, 6, 7, 8, 11, 12, 17, 18, 19, 20], "hammer": 13, "hand": 3, "handl": [8, 11], "happen": 5, "hard": [3, 11, 12, 20], "has_excess_dist": 3, "has_excess_load": 3, "has_time_warp": 3, "have": [1, 2, 3, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20], "head": 20, "header": 11, "heavi": 12, "help": [2, 3, 7, 8, 9, 14], "here": [1, 3, 9, 11, 12, 13, 20], "heterogen": [10, 14], "heurist": [12, 20], "hg": [14, 15, 16], "hide": 13, "high": [2, 3, 12, 13, 16, 19], "higher": 19, "highli": 1, "highlight": 12, "histori": 3, "hit": 3, "hold": 3, "holland": 0, "homberg": [7, 11], "homogen": [10, 20], "hood": 13, "hope": 9, "hopefulli": 5, "horizont": 3, "hotspot": 8, "hour": 7, "how": [3, 5, 8, 9, 10, 11, 12, 13, 15], "howev": 9, "html": 11, "http": [5, 8, 16, 18], "hybrid": [3, 5, 13, 19], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20], "icon": 8, "id": 8, "ideal": [0, 9], "ident": 3, "idx": [3, 11, 12], "ignor": [10, 12], "iinfo": 3, "ij": [9, 11, 20], "ijoc": 16, "il": 15, "ils_": 15, "implement": [3, 5, 6, 9, 13, 19, 20], "impli": 10, "implicit": 3, "import": [3, 5, 8, 9, 11, 12, 13, 17], "impos": [3, 14], "impress": 11, "improv": [3, 5, 6, 7, 9, 12, 13, 15, 19], "in_zon": 12, "includ": [2, 3, 5, 8, 11, 17, 20], "inclus": 8, "incomplet": 0, "inconsist": 3, "incorpor": 11, "incorrect": 15, "increas": [3, 12, 13], "increasingli": 11, "incredibli": 8, "incur": 3, "index": [3, 18], "indexerror": 3, "indic": [0, 1, 3, 5, 9, 10, 11, 12], "inf": 3, "infeas": [2, 3, 11, 12, 13], "inform": [3, 8, 16, 17], "inherit": [5, 19], "init": [7, 13], "init_from": [3, 13], "init_sol": 13, "initi": [2, 3, 9, 13, 19], "initial_penalti": 3, "initial_solut": 3, "initialis": [3, 7, 19], "input": [12, 19], "insert": [3, 4, 5, 9], "insid": [8, 12], "inspect": [8, 11, 12], "inspir": 9, "instal": [3, 7, 14, 17], "instanc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 15, 20], "instanti": [11, 13], "instead": [3, 12], "instruct": [14, 15], "instrument": 8, "insuffici": 3, "int": [2, 3, 4, 5, 6, 9, 13], "int64": 3, "integ": [3, 5, 12], "integr": 11, "intens": 8, "intensif": 5, "intensifi": 5, "interest": 20, "interfac": [3, 7, 11, 12, 13, 15], "intern": [0, 3, 11, 13], "interv": 3, "introduc": [3, 9, 12, 15, 20], "introduct": [12, 14], "invalid": 3, "investig": [2, 13], "is_collect": 3, "is_complet": 3, "is_feas": [3, 13], "is_group_feas": 3, "issu": [3, 8, 9, 15, 17], "item": 12, "iter": [2, 3, 5, 6, 7, 11, 12, 13, 19], "iter_r": 13, "its": [3, 5, 9, 12, 13], "itself": [3, 9], "j": [0, 3, 5, 9, 11, 20], "januari": 15, "job": 8, "jointli": 14, "journal": 16, "json": 8, "juli": 15, "jump": 11, "june": 15, "jupyt": 18, "just": [0, 3, 5, 12, 13], "k": [3, 19], "k37": 11, "k_0": 20, "k_i": 20, "kdab": 8, "keep": [8, 9], "kei": [10, 11], "kept": 9, "keyword": 3, "know": 12, "known": [5, 7, 11, 13, 15], "kobayashi": 0, "kool": 16, "kwarg": [3, 5, 6], "l": [10, 13, 16, 19], "l_i": [11, 20], "lan": 16, "larg": [3, 4, 5, 7, 11, 13], "largest": [7, 11], "last": [3, 12], "later": [2, 3, 9, 11], "latest": [2, 3, 11, 18, 20], "latter": [3, 9], "launch": 8, "lb_divers": 3, "ldot": [1, 20], "lead": 19, "learn": 13, "least": [3, 19], "leav": 3, "left": [3, 8, 11, 13, 20], "legend": [2, 11], "len": [11, 12, 13], "leon": 16, "less": [1, 8], "let": [1, 3, 8, 11, 12, 13], "level": [3, 13], "like": [3, 8, 10, 11, 12, 18], "limit": [5, 7, 17, 20], "line": [7, 8, 11, 12, 17], "linehaul_sect": 10, "link": 1, "linux": [8, 14], "list": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 20], "literatur": [5, 15], "littl": 11, "ln": 4, "load": [2, 3, 11, 12], "load_dimens": 2, "load_penalti": [3, 13], "loc": 3, "local": [3, 5, 13, 14, 15, 19, 20], "localsearch": [5, 9, 13], "locat": [1, 3, 10, 11, 12, 20], "logic": 9, "long": [3, 8], "longer": 3, "look": [3, 9, 11, 12, 13, 14, 17], "loop": [3, 19], "lot": [9, 13], "lower": [3, 5, 10], "lowest": [19, 20], "lump": 8, "m": [0, 5, 12, 20], "mac": 14, "maco": 8, "made": [8, 9, 18], "mai": [3, 7, 8, 9, 12, 15, 20], "mail": 17, "main": [3, 11], "maintain": [1, 8, 19], "make": [3, 5, 8, 9, 13, 18], "make_random": [3, 13], "manag": [3, 6, 11], "mandatori": 20, "manhattan": 12, "mani": [3, 8, 13, 20], "manner": 5, "march": 15, "mark": 12, "mathcal": 3, "matplotlib": [3, 11, 12, 13], "matric": [3, 10], "matrix": [3, 5], "max": 3, "max_dist": 3, "max_dur": [3, 12], "max_iter": 6, "max_penalti": 3, "max_pop_s": 3, "max_runtim": [6, 8], "maxim": 1, "maximis": 20, "maximum": [1, 3, 6, 10, 12, 14, 19, 20], "maxiter": [6, 11, 13], "maxruntim": [6, 11, 12, 13], "mdvrp": 20, "mdvrptw": [7, 15], "mean": [3, 8, 15, 20], "meaning": 8, "meant": 9, "measur": 14, "mechan": 19, "meet": 8, "membership": [3, 10], "memet": 0, "memori": 3, "merg": [8, 9], "merit": 10, "meson": 8, "messag": 8, "met": [6, 13, 19], "metaheurist": [14, 20], "method": [0, 3, 6, 8, 9, 11, 14, 19, 20], "middl": 13, "might": [8, 9, 14, 18, 20], "min": 3, "min_penalti": 3, "min_pop_s": 3, "minim": 3, "minimis": [11, 12, 20], "minimise_fleet": 3, "minimum": [3, 5, 19], "minut": [8, 18], "miss": 0, "mit": 8, "mix": 8, "mode": 8, "model": [3, 11, 12, 13, 17], "modern": 8, "modifi": [3, 7, 9, 12], "modul": [0, 1, 2, 3, 4, 5, 6, 9], "modular": 13, "more": [0, 3, 4, 5, 8, 9, 11, 12, 13, 15, 17, 19, 20], "moreov": 11, "most": [3, 8, 12, 15, 18, 20], "motiv": 20, "move": [4, 5, 9, 13], "much": [3, 4, 5, 11, 13, 15, 17], "multi": [10, 14], "multipl": [2, 3, 6, 9, 12, 14, 20], "multiplecriteria": 6, "multipli": 3, "must": [3, 5, 6, 8, 9, 10, 11, 12, 20], "mutual": [3, 10], "mutually_exclus": 3, "mutually_exclusive_group_sect": 10, "n": [1, 5, 7, 11, 16, 19, 20], "n439": 11, "nagata": 0, "name": [3, 8, 15], "nativ": 8, "natur": 0, "navig": 18, "nb_close": 3, "nb_elit": 3, "nb_granular": 5, "nb_iter_no_improv": 3, "ndarrai": 3, "ne": 1, "nearest": [3, 4, 11], "nearest_route_insert": 4, "nearli": 13, "necessari": [3, 8, 9], "necessarili": [3, 5], "need": [3, 5, 7, 8, 9, 12, 13, 17, 18, 19], "neg": 3, "neighborhood": 5, "neighbour": [1, 3, 5, 9, 13], "neighbourhood": [3, 4, 5, 9, 13], "neighbourhoodparam": [3, 5], "new": [0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 19, 20], "new_sol": 13, "newli": [5, 9], "next": [3, 8, 9], "nice": 3, "niel": 16, "node": 3, "node_coord_sect": 10, "node_op": [3, 13], "node_oper": [3, 5, 13], "nodeoper": [3, 5], "noimprov": 6, "non": [3, 5, 6, 10], "none": [2, 3, 9, 20], "nonzero": 3, "notebook": [11, 12, 13, 18, 20], "novemb": 15, "now": [3, 8, 9, 11, 12, 13, 18], "np": [3, 20], "num_avail": 3, "num_bit": 3, "num_client": 3, "num_depot": 3, "num_feas": [3, 13], "num_group": 3, "num_infeas": [3, 13], "num_iter": 3, "num_load_dimens": 3, "num_loc": 3, "num_missing_cli": 3, "num_profil": 3, "num_rout": 3, "num_stop": 11, "num_to_skip": 2, "num_vehicl": 3, "num_vehicle_typ": 3, "number": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 16], "numer": [3, 12], "numpi": [3, 8], "o": [14, 19], "object": [0, 1, 2, 3, 5, 7, 9, 11, 12, 13, 19, 20], "obscur": 2, "observ": [3, 6, 11, 13], "obtain": [3, 8, 9, 15, 19, 20], "occur": [3, 7], "off": [3, 12, 13], "offer": 12, "offset": 3, "offspr": [0, 3, 5, 11, 13, 19], "often": [0, 2, 3, 8, 12, 20], "oliv": 0, "onc": [3, 6, 8, 18, 20], "one": [0, 1, 3, 4, 7, 8, 10, 11, 12, 13, 15, 20], "onli": [2, 3, 4, 5, 8, 9, 15, 18, 19], "onlin": 8, "onward": 15, "op": 5, "open": [5, 8, 9, 11, 14, 17, 18, 20], "oper": [1, 3, 8, 9, 13, 14, 15, 19, 20], "opt": [5, 9, 12], "optim": [11, 12, 20], "optimis": [8, 11], "option": [2, 3, 7, 12, 14, 18, 20], "order": 0, "ordered_crossov": 0, "org": [5, 16], "orient": 14, "origin": [3, 8], "other": [1, 3, 5, 8, 10, 12], "otherwis": [3, 6], "our": [1, 8, 9, 10, 11, 12, 13, 17], "ourself": 12, "out": [2, 3, 7, 12, 13, 20], "outcom": 3, "output": [8, 12, 17, 19], "over": [3, 4, 12, 13, 15, 17, 19, 20], "overal": 5, "overarch": 20, "overbrac": 9, "overlap": 5, "overlap_toler": 5, "overrid": 12, "overview": [11, 17], "own": [13, 17], "ox": 0, "p_": 1, "p_1": 19, "p_2": 19, "p_d": 3, "p_f": [1, 3], "p_i": [3, 9, 20], "packag": [6, 10, 13, 14, 15, 16, 18], "page": [3, 9, 10, 12, 14, 15, 16, 18, 19, 20], "pai": 8, "pair": [1, 3, 5, 10], "pairwis": 3, "paper": [15, 16, 19], "parallel": 0, "param": [3, 5], "paramet": [0, 1, 2, 3, 4, 5, 6, 13, 20], "parent": [0, 3, 19], "pars": [8, 15], "part": [1, 3, 9, 11, 13], "particular": [3, 9, 12], "particularli": [0, 3, 7, 9], "partit": [11, 20], "pass": [3, 5, 11, 12], "passmark": 7, "patch": 9, "path": 3, "pc": 20, "pcvrptw": [7, 15], "pen_manag": 13, "penalis": 3, "penalised_cost": [3, 13], "penalti": [3, 5, 13], "penalty_decreas": 3, "penalty_increas": 3, "penalty_manag": 3, "penaltyboundwarn": 3, "penaltymanag": [3, 13], "penaltyparam": 3, "per": [3, 12], "perceiv": 15, "percentag": [1, 3, 15], "perf": 8, "perform": [0, 1, 2, 3, 5, 7, 8, 9, 15, 16, 19], "period": [8, 13], "permiss": 8, "permut": 0, "pick": 10, "pickup": [0, 3, 14], "pip": [8, 14, 18], "place": [5, 8, 9, 11, 17], "plan": 3, "pleas": [8, 9, 14, 16, 17], "plot": [11, 12, 13, 14], "plot_": 11, "plot_client": [2, 12], "plot_coordin": [2, 11, 12], "plot_demand": 2, "plot_divers": 2, "plot_inst": [2, 11], "plot_object": 2, "plot_result": [2, 11, 13], "plot_route_schedul": [2, 11], "plot_runtim": 2, "plot_solut": [2, 12], "plot_time_window": 2, "plt": [11, 12, 13], "plu": 3, "pm": 13, "poetri": [8, 18], "point": [3, 4, 9, 19], "pool": [3, 12], "pop": 13, "popul": [1, 2, 3, 11, 19], "populationparam": 3, "posit": [3, 5], "possibl": [2, 3, 4, 8, 9, 20], "possibli": [3, 9], "postal": 20, "potenti": 20, "ppsn": 0, "pre": [8, 14], "preced": 1, "precend": 3, "pred": 3, "predecessor": 3, "prepar": 8, "preprint": 16, "presenc": 3, "present": [0, 10], "pretti": 13, "previou": 15, "primari": 20, "primarili": 20, "print": [3, 11, 12, 13], "prize": [3, 9, 10, 14, 15], "prize_sect": 10, "probabl": 3, "problem": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 17, 19], "problemdata": [0, 2, 3, 4, 5, 8, 11], "proce": [8, 9], "procedur": [11, 19], "proceed": 0, "process": [8, 13], "produc": [11, 12], "profil": [3, 12, 14], "program": 8, "progress": [3, 12, 13], "project": 18, "proper": 3, "properti": 3, "protocol": [5, 6], "prove": 9, "provid": [0, 1, 2, 3, 4, 5, 7, 10, 12, 13, 19], "proxim": 5, "pseudo": 3, "pseudocod": 19, "publish": 16, "pull": [8, 9], "pure": [2, 12], "purg": 13, "put": 13, "pvvrp": 8, "py": 8, "pyplot": [11, 12, 13], "pytest": 8, "python": [3, 8, 9, 17, 18], "pythonconfig": 8, "pythoncpp": 8, "pyvrp": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20], "q": 20, "q_": [11, 20], "quadrat": 4, "qualiti": [1, 4, 11, 13, 19], "quantiti": 10, "queiroga": [7, 15], "question": [9, 17], "quick": 14, "quickli": [5, 7, 11, 13, 15], "quot": 3, "quote_minim": 3, "r": [0, 3], "rais": [0, 2, 3, 4, 5, 9], "ran": 7, "rand": 3, "randint": 3, "random": [0, 3, 5, 19], "randomli": [0, 3], "randomnumbergener": [0, 3, 5, 13], "rang": [3, 7, 12, 13], "rather": 15, "rc208": [11, 13], "rc2_10_5": [8, 11], "re": [5, 12, 13, 20], "reach": [3, 13, 15, 19], "read": [3, 10, 13, 14], "read_solut": [3, 11], "readi": [8, 12, 13], "reason": 8, "recal": 13, "recent": [3, 8, 15], "recommend": 9, "record": 8, "rectangular": 12, "red": [8, 12], "reduc": [3, 8], "refer": [0, 3, 5, 7, 9, 19], "referenc": 3, "regardless": 9, "region": 11, "regist": [3, 19], "registr": 3, "regress": 9, "regular": 12, "rel": [1, 20], "relat": 3, "releas": [3, 8, 9, 10, 14], "release_tim": 3, "release_time_sect": 10, "relev": [8, 17], "reli": 13, "relicens": 8, "reloc": 5, "remain": [2, 11, 12], "remov": [3, 9, 19], "repair": [0, 3, 14], "repair_boost": 3, "repair_prob": 3, "repar": 3, "repeat": [5, 19], "repeatedli": 3, "replac": [3, 5], "report": [3, 15], "repositori": [7, 8, 9, 10, 15, 17, 18], "repres": [1, 3, 5, 11, 15, 20], "reproduc": 17, "request": [8, 9, 12, 20], "requir": [3, 8, 9, 10, 12, 14, 20], "research": [16, 20], "reset": 3, "reshap": 11, "resolv": 18, "respect": [1, 3, 9, 12, 13], "respons": [0, 4, 5], "restart": 3, "restrict": [3, 13, 14], "result": [0, 2, 3, 4, 5, 8, 9, 11, 12, 13, 15, 19], "resum": 3, "retain": 8, "retriev": 3, "return": [0, 1, 2, 3, 4, 5, 6, 9, 11, 12, 13, 19, 20], "reus": 13, "review": 9, "reward": 12, "right": [3, 11, 13, 20], "rightarrow": 5, "rigor": 20, "rng": [0, 3, 5, 13], "road": 3, "root": 8, "round": [3, 7, 11], "round_func": [3, 8, 11], "rout": [0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 19], "route_op": [3, 13], "route_oper": [3, 5, 13], "routeoper": [3, 5], "row": 11, "run": [2, 3, 6, 7, 8, 11, 12, 13, 14, 15, 17], "runtim": [2, 3, 4, 6, 7, 11, 12, 13], "runtimeerror": 3, "s_": [1, 11, 19, 20], "s_1": 19, "s_f": 1, "sake": 11, "salesman": 0, "same": [1, 3, 5, 12, 20], "sane": 9, "save": 20, "saw": 13, "scale": [3, 7, 12], "scalingwarn": 3, "schedul": 2, "scheme": 13, "score": [1, 7], "script": 8, "search": [0, 2, 3, 4, 6, 8, 9, 11, 12, 14, 15, 19, 20], "search_method": 3, "searchmethod": [3, 5], "second": [0, 1, 3, 6, 7, 11, 12, 13], "section": [8, 12, 20], "see": [0, 3, 8, 9, 10, 11, 12, 13, 15, 17, 19, 20], "seed": [3, 7, 8, 11, 13, 15], "seen": 12, "select": [0, 3, 8, 11, 13, 19], "selective_route_exchang": [0, 13], "self": [3, 17], "semi": 11, "sens": 9, "sensibl": 3, "separ": [3, 11, 13], "sequenc": 3, "servic": [2, 3, 10, 11, 14, 20], "service_dur": [3, 11], "service_tim": 10, "service_time_sect": 10, "set": [3, 4, 7, 9, 11, 12, 13, 14, 15, 18, 19, 20], "set_neighbour": 5, "setup": 8, "sever": [3, 10, 11, 12, 13], "shade": 2, "share": [1, 5], "shift": [3, 14], "ship": [3, 6], "shipment": 12, "short": [3, 12, 17], "shorter": 15, "should": [0, 1, 3, 6, 7, 8, 9, 10, 11, 15], "show": [2, 9, 11, 12, 13], "show_vers": [3, 17], "showcas": 12, "signatur": 13, "signific": [3, 15], "silent": 10, "similar": [3, 11], "similarli": [1, 3], "simpl": [3, 6, 9, 20], "simpli": [8, 18], "simplifi": 15, "simultan": 14, "sinc": [0, 15, 16], "singl": [3, 7, 9, 20], "site": [10, 14], "size": [3, 5, 7, 12, 19], "skip": [2, 9], "slack": [2, 3, 11], "slightli": 12, "small": [9, 12], "smaller": 3, "smallest": 3, "smith": 0, "smooth": 3, "smoothli": 8, "snippet": 17, "so": [4, 5, 8, 9, 10, 12, 13, 18, 19], "softwar": 8, "sol": [3, 11, 13], "solid": 2, "solomon": [11, 13], "solut": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 15, 19, 20], "solutions_between_upd": 3, "solv": [0, 3, 5, 9, 12, 20], "solveparam": 3, "solver": [3, 11, 12, 14, 16, 20], "some": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 20], "someth": [8, 17], "sort": 2, "sourc": [0, 2, 3, 5, 6, 8, 14], "sp": 15, "sp_": 15, "space": [13, 19], "special": 5, "specif": [3, 12], "specifi": [3, 6, 7, 8, 10, 12, 13, 17, 20], "spend": 3, "spike": 13, "srex": [0, 13], "standard": [8, 9, 10, 11], "standardis": 10, "start": [3, 5, 8, 9, 10, 11, 12, 13, 19, 20], "start_depot": [3, 12], "start_tim": 3, "stat": 3, "state": [3, 14, 20], "statist": [2, 3, 9, 11, 12], "step": [8, 9], "stick": 12, "still": [12, 13, 20], "stop": [3, 7, 8, 11, 12, 13, 14, 15, 19], "stoppingcriterion": [3, 6, 13], "store": 3, "str": [2, 3], "straightforward": 18, "strategi": 3, "stream": 3, "strictli": 9, "string": 3, "structur": 5, "struggl": 3, "stub": 9, "studi": [0, 20], "studio": 8, "style": 8, "sub": [3, 13], "subject": [3, 8], "submiss": 8, "submit": 8, "submodul": 7, "subplot": [11, 12], "subpopul": [2, 3], "subramanian": 15, "succ": 3, "succeed": 1, "success": 9, "successor": [3, 5], "suffer": 3, "suffici": [3, 9, 13], "suggest": [1, 19], "suit": 8, "sum": 10, "sum_": [1, 3, 9], "summari": 3, "support": [3, 8, 10, 11, 12, 14, 15], "suppos": 12, "sure": [3, 8, 18], "survivor": [3, 13, 19], "swap": 5, "swaprout": 5, "swapstar": 5, "swaptail": 5, "symbol": 8, "symmetr": [1, 5], "symmetric_neighbour": 5, "symmetric_proxim": 5, "symmetris": 5, "system": 8, "t": [3, 9], "t_": [11, 20], "t_r": 3, "tab": 8, "tabl": 15, "tablefmt": 11, "tabul": 11, "tackl": [13, 20], "take": [3, 4, 7, 8, 9, 13, 17, 18, 19], "target": [3, 8], "target_feas": 3, "team": 14, "templat": [5, 8, 17], "temporari": 3, "temporarili": 3, "temptat": 8, "ten": [7, 15], "term": [3, 9, 13], "termin": [6, 12], "test": [3, 5, 8, 9], "text": [1, 3, 9], "than": [0, 1, 3, 4, 8, 9, 11, 15, 17, 19], "thei": [1, 5, 8, 9, 12, 13, 20], "them": [12, 20], "thereaft": 5, "therefor": 15, "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20], "thibaut": 5, "thing": 9, "think": 9, "thorough": 19, "those": [2, 5, 7, 9, 12, 13, 17], "thread": 17, "through": [3, 5, 8, 10, 12, 14], "thu": [1, 7, 9, 12, 14], "tight_layout": [11, 13], "time": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 17], "time_r": 13, "time_warp": [3, 11], "time_warpdeliveri": 11, "time_window": 12, "time_window_sect": 10, "titl": [2, 11, 16], "to_csv": 3, "to_idx": 12, "togeth": [3, 13], "toml": [3, 7], "tomli": 3, "too": [3, 8, 11, 12, 13], "tool": [8, 11, 12, 13, 14, 15], "top": [3, 8, 11, 13], "total": [3, 9, 11, 12, 20], "toth": 20, "touch": 8, "tournament": [3, 19], "toward": 3, "tqdm": 3, "track": [3, 7, 8, 11, 12, 13, 15], "trajectori": 2, "transpar": 11, "transport": [10, 20], "travel": [0, 2, 3, 11, 12, 20], "travel_dur": 3, "triag": 17, "trick": 17, "trigger": 3, "troubl": 8, "truck": [3, 11, 12], "true": [2, 3, 5, 6, 9, 12], "trunc": 3, "truncat": [3, 11], "try": 8, "tsp": [0, 3], "tspwarn": 3, "tune": 19, "tupl": [0, 2, 3], "turn": 3, "tutori": [11, 14, 19], "tw_earli": [3, 12], "tw_late": [3, 12], "tw_penalti": [3, 13], "twice": 3, "two": [0, 1, 3, 5, 7, 9, 11, 12, 13, 19], "type": [0, 1, 3, 4, 5, 6, 8, 9, 12], "typeerror": 3, "typic": [3, 4, 8, 9, 10], "u": [5, 8, 11, 12, 13, 17], "ub_divers": 3, "uchoa": 7, "unabl": 3, "uncollect": [3, 9], "uncollected_pr": 3, "unconstrain": [3, 10], "under": [8, 13], "underli": [2, 3], "understand": [2, 10, 13], "understood": 10, "unexpect": 12, "unit": 3, "unit_distance_cost": 3, "unit_duration_cost": 3, "unless": [3, 8, 12], "unlik": 12, "unlimit": 10, "unplan": 4, "unrel": 8, "unrestrict": 12, "unsur": 9, "until": [3, 5, 13, 19], "unus": 0, "unvisit": 3, "up": [2, 3, 9, 10, 12, 13, 14, 18], "updat": [3, 9, 15, 18], "upgrad": [8, 18], "upon": 19, "upper": 3, "urban": 12, "url": 16, "us": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19], "user": 5, "usernam": 8, "usual": [8, 15], "v": [3, 5, 11, 20], "v0": [12, 15], "v9": 15, "v_c": [11, 20], "v_d": 20, "v_r": 3, "valu": [1, 2, 3, 9, 10, 11, 12, 15, 19], "valueerror": [0, 2, 3, 4, 5], "vari": 8, "variant": [11, 12, 14, 15], "variou": [2, 3, 6, 9, 11, 19, 20], "ve": 11, "vehicl": [0, 2, 3, 4, 9, 10, 11, 12, 14, 19], "vehicle_typ": 3, "vehicles_allowed_clients_sect": 10, "vehicles_depot_sect": 10, "vehicles_max_dist": 10, "vehicles_max_distance_sect": 10, "vehicles_max_dur": 10, "vehicles_max_duration_sect": 10, "vehicletyp": [3, 12], "veri": [2, 3, 5, 9, 11, 13], "verifi": 8, "version": [3, 8, 9, 15, 17, 18], "vertex": [11, 20], "vertic": [2, 3, 11], "via": [5, 8, 14, 17, 18], "vidal": [5, 7, 15, 16, 19], "view": 3, "vigo": 20, "violat": 3, "virtual": [8, 18], "visit": [3, 5, 9, 10, 11, 12, 14, 20], "visual": 8, "visualis": 11, "volum": 16, "vrp": [3, 5, 8, 13, 14, 16, 19], "vrpb": [7, 15], "vrplib": [3, 11, 14], "vrpsolvereasi": 20, "vrptw": [7, 8, 9, 12, 13, 15, 20], "vscode": 8, "w": [3, 16], "wa": [3, 5, 9], "wai": [3, 8, 13, 18, 20], "wait": [2, 3, 5, 11, 20], "wait_dur": [3, 11], "want": [1, 3, 8, 9, 18], "warp": [2, 3, 5], "wast": 20, "wave": 3, "we": [1, 3, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20], "websit": 8, "weight": [5, 10, 11, 20], "weight_time_warp": 5, "weight_wait_tim": 5, "well": [0, 10, 11, 13], "were": 15, "what": [2, 3, 8, 9, 10, 11], "when": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 20], "whenev": [6, 8], "where": [0, 2, 3, 9, 11, 12, 18, 20], "whether": [1, 2, 3, 5, 9], "which": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 19, 20], "whichev": 7, "while": [3, 8, 9, 20], "whose": [2, 3], "wide": 11, "window": [0, 2, 3, 8, 10, 14], "within": [3, 8, 20], "without": [3, 7, 12, 14], "work": [8, 9, 10, 13, 19, 20], "world": 12, "wors": 11, "worst": 4, "worth": 12, "wouda": 16, "wouda_lan_kool_pyvrp_2024": 16, "wouter": 16, "write": [3, 8, 9], "written": [8, 9], "wrote": 8, "x": [3, 7, 8, 10, 11, 12], "x_": 9, "xcode": 8, "xi": 0, "xo": 19, "xor": 3, "y": [0, 2, 3, 8, 10, 11, 12], "y_i": 9, "year": 16, "yet": [3, 12, 13, 18], "ylim_adjust": 2, "you": [0, 3, 8, 9, 12, 14, 16, 17, 18, 19, 20], "your": [2, 3, 7, 8, 9, 12, 16, 17, 18], "yourself": [8, 14], "zero": [1, 3, 10], "zip": 11}, "titles": ["Crossover operators", "Diversity measures", "Plotting tools", "PyVRP", "Repair operators", "Search methods", "Stopping criteria", "Benchmarking", "Contributing", "Supporting new VRP variants", "The VRPLIB format", "Classic VRPs", "A quick tutorial", "Using PyVRP\u2019s components", "Contents", "Benchmarks", "Citing PyVRP", "Getting help", "Installation instructions", "A brief introduction to HGS", "A brief introduction to VRP"], "titleterms": {"": 13, "A": [12, 13, 19, 20], "The": [10, 11, 13], "algorithm": 13, "api": 14, "benchmark": [7, 15], "brief": [19, 20], "bug": 17, "build": 8, "capacit": [11, 12, 20], "chang": 8, "cite": 16, "classic": 11, "codespac": 8, "collect": [12, 20], "commit": 8, "compon": 13, "conclus": [11, 13], "content": 14, "contribut": 8, "criteria": 6, "crossov": [0, 13], "data": 10, "debug": 8, "deliveri": 12, "depot": [12, 20], "develop": 14, "divers": 1, "evalu": 13, "exampl": [14, 18], "extens": 8, "featur": 17, "format": 10, "from": 18, "function": 13, "gener": 13, "genet": 13, "get": [14, 17], "github": 8, "help": 17, "hg": 19, "hint": [3, 9, 14, 15, 19, 20], "instal": [8, 18], "instanc": 11, "instruct": 18, "introduct": [19, 20], "larger": 11, "licens": 8, "local": [8, 18], "manag": 13, "measur": 1, "method": [5, 13], "multi": [12, 20], "new": 9, "node": 5, "note": [0, 1, 3, 5, 8, 9, 10, 15, 17, 19, 20], "number": 13, "oper": [0, 4, 5], "pickup": 12, "plot": 2, "popul": 13, "prize": [12, 20], "problem": 20, "profil": 8, "pyvrp": [3, 13, 14, 15, 16], "quick": 12, "random": 13, "read": 11, "refer": [14, 15], "repair": 4, "report": 17, "represent": 13, "request": 17, "restrict": 12, "rout": [5, 20], "run": 18, "search": [5, 13], "section": 10, "set": 8, "simultan": 12, "solut": 13, "solv": [11, 13], "solver": 15, "sourc": 18, "specif": 10, "start": 14, "stop": 6, "submit": 17, "support": [9, 20], "time": [11, 12, 20], "tool": 2, "tour": 13, "tutori": 12, "up": 8, "us": 13, "variant": [9, 20], "vehicl": 20, "vrp": [9, 11, 12, 15, 20], "vrplib": 10, "vrptw": 11, "warn": [0, 3, 12], "window": [11, 12, 20], "zone": 12}})