Search.setIndex({"titles": ["Crossover operators", "Diversity measures", "Plotting tools", "PyVRP", "Repair operators", "Search methods", "Stopping criteria", "Benchmarking", "Contributing", "Supporting new VRP variants", "The VRPLIB format", "Classic VRPs", "A quick tutorial", "Using PyVRP\u2019s components", "Contents", "Benchmarks", "Citing PyVRP", "Getting help", "Installation instructions", "A brief introduction to HGS", "A brief introduction to VRP"], "terms": {"The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 15, 18, 19, 20], "pyvrp": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20], "modul": [0, 1, 2, 3, 4, 5, 6, 9], "provid": [0, 1, 2, 3, 4, 5, 7, 10, 12, 13, 19], "ar": [0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20], "respons": [0, 4, 5], "gener": [0, 3, 5, 10, 19], "new": [0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 19, 20], "solut": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 15, 19, 20], "offspr": [0, 3, 5, 11, 13, 19], "from": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20], "two": [0, 1, 3, 5, 7, 9, 11, 12, 13, 19], "parent": [0, 3, 19], "ordered_crossov": 0, "tupl": [0, 2, 3], "data": [0, 2, 3, 4, 5, 9, 11, 12, 13], "problemdata": [0, 2, 3, 4, 5, 11], "cost_evalu": [0, 3, 4, 5, 13], "costevalu": [0, 3, 4, 5, 9, 13], "rng": [0, 3, 5, 13], "randomnumbergener": [0, 3, 5, 13], "sourc": [0, 2, 3, 5, 6, 8, 14], "perform": [0, 1, 2, 3, 5, 7, 8, 9, 15, 16, 19], "an": [0, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 19, 20], "order": 0, "ox": 0, "between": [0, 1, 3, 5, 14], "given": [0, 1, 2, 3, 4, 5, 9, 10, 12, 19, 20], "client": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 20], "randomli": [0, 3], "select": [0, 3, 11, 13, 19], "indic": [0, 1, 3, 5, 9, 10, 11, 12], "first": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 18, 19], "rout": [0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 19], "copi": [0, 3], "ani": [0, 3, 4, 8, 9, 10, 20], "miss": 0, "present": 0, "second": [0, 1, 3, 6, 7, 11, 12, 13], "well": [0, 10, 11, 13], "see": [0, 3, 8, 9, 11, 12, 13, 15, 19, 20], "1": [0, 1, 2, 3, 5, 9, 10, 11, 12, 13, 15, 20], "detail": [0, 2, 3, 8, 11, 13, 15], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20], "explicitli": [0, 3, 10], "assum": [0, 3, 7, 10, 11, 20], "problem": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 17, 19], "instanc": [0, 2, 3, 4, 5, 7, 9, 10, 12, 13, 15, 20], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20], "tsp": [0, 3], "you": [0, 3, 8, 9, 12, 14, 16, 17, 18, 19, 20], "should": [0, 1, 3, 6, 7, 8, 9, 10, 11, 15], "us": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19], "differ": [0, 1, 3, 5, 7, 11, 13, 14], "case": [0, 3, 4, 5, 9, 10, 11, 12], "paramet": [0, 1, 2, 3, 4, 5, 6, 13, 20], "creat": [0, 2, 3, 4, 5, 8, 13, 20], "cost": [0, 3, 4, 5, 6, 9, 11, 12, 14, 20], "evalu": [0, 3, 4, 5, 9, 11, 20], "object": [0, 1, 2, 3, 5, 7, 9, 11, 12, 13, 19, 20], "unus": 0, "random": [0, 3, 5, 19], "number": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11], "return": [0, 1, 2, 3, 4, 5, 6, 9, 11, 12, 13, 19, 20], "A": [0, 1, 3, 5, 9, 10, 11, 14, 16], "type": [0, 1, 3, 4, 5, 6, 8, 9, 12], "rais": [0, 3, 4, 5, 9], "valueerror": [0, 3, 4, 5], "when": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 20], "particularli": [0, 3, 7, 9], "more": [0, 3, 4, 5, 8, 9, 11, 12, 13, 15, 19, 20], "than": [0, 1, 3, 4, 8, 9, 11, 15, 19], "one": [0, 1, 3, 4, 7, 8, 10, 11, 12, 13, 15, 20], "vehicl": [0, 2, 3, 4, 9, 10, 11, 12, 14, 19], "refer": [0, 3, 5, 7, 9, 19], "m": [0, 5, 12, 20], "oliv": 0, "d": 0, "j": [0, 3, 5, 9, 11, 20], "smith": 0, "r": [0, 3], "c": [0, 5, 8, 9, 17, 19], "holland": 0, "1987": 0, "studi": [0, 20], "permut": 0, "travel": [0, 2, 3, 11, 12, 20], "salesman": 0, "In": [0, 3, 9, 10, 11, 12, 13, 15, 19, 20], "proceed": 0, "intern": [0, 3, 11, 13], "confer": 0, "genet": [0, 1, 2, 3, 5, 11, 19, 20], "algorithm": [0, 1, 2, 3, 6, 11, 15, 19, 20], "applic": [0, 20], "224": [0, 11], "230": [0, 11], "selective_route_exchang": [0, 13], "exchang": [0, 5, 13], "srex": [0, 13], "due": [0, 12, 13, 15], "nagata": 0, "kobayashi": 0, "combin": [0, 11, 19], "both": [0, 3, 12, 13, 19], "It": [0, 3, 4, 9, 11, 13, 14, 20], "doe": [0, 3, 4, 9], "carefulli": 0, "could": [0, 3, 9, 13], "often": [0, 2, 3, 8, 12, 20], "result": [0, 2, 3, 4, 5, 9, 11, 12, 13, 15, 19], "incomplet": 0, "can": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20], "repair": [0, 3, 14], "search": [0, 2, 3, 4, 6, 9, 11, 12, 14, 15, 19, 20], "method": [0, 3, 6, 8, 9, 11, 14, 19, 20], "sinc": [0, 15, 16], "appropri": [0, 8, 11], "where": [0, 2, 3, 9, 11, 12, 18, 20], "each": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 20], "consist": [0, 3, 11, 13, 20], "just": [0, 5, 12, 13], "anoth": 0, "ideal": [0, 9], "solv": [0, 3, 5, 9, 12, 20], "y": [0, 2, 3, 10, 11, 12], "": [0, 1, 2, 3, 5, 6, 9, 10, 11, 12, 14, 19], "2010": 0, "memet": 0, "pickup": [0, 3, 14], "deliveri": [0, 3, 10, 11, 14, 20], "time": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 17], "window": [0, 2, 3, 10, 14], "parallel": 0, "natur": 0, "ppsn": 0, "xi": 0, "536": 0, "545": 0, "contain": [1, 2, 3, 5, 6, 11, 15, 17, 18], "oper": [1, 3, 9, 13, 14, 15, 19, 20], "determin": [1, 3, 4, 5, 13, 20], "rel": [1, 20], "popul": [1, 2, 3, 11, 19], "highli": 1, "allow": [1, 3, 4, 11, 13, 19, 20], "better": [1, 2, 5, 11, 13, 19], "At": [1, 3, 20], "same": [1, 3, 5, 12, 20], "also": [1, 3, 5, 9, 11, 12, 13, 16, 18, 19, 20], "want": [1, 3, 8, 9, 18], "balanc": [1, 3, 13, 20], "qualiti": [1, 4, 11, 13, 19], "good": [1, 9, 11, 12, 13], "That": [1, 3, 13], "maintain": [1, 8, 19], "comput": [1, 3, 5, 7, 9, 10, 11, 13, 16, 20], "fit": [1, 3, 19], "score": [1, 7], "which": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 19, 20], "valu": [1, 2, 3, 9, 10, 11, 12, 15, 19], "broken_pairs_dist": [1, 13], "float": [1, 2, 3, 5, 6], "symmetr": [1, 5], "broken": 1, "pair": [1, 3, 5, 10], "distanc": [1, 2, 3, 9, 10, 11, 12, 14, 20], "bpd": 1, "function": [1, 2, 3, 7, 8, 9, 10, 11], "whether": [1, 2, 3, 5, 9], "locat": [1, 3, 10, 11, 12, 20], "share": [1, 5], "neighbour": [1, 3, 5, 9, 13], "If": [1, 3, 8, 9, 10, 12, 14, 16, 19, 20], "part": [1, 3, 9, 11, 13], "link": 1, "other": [1, 3, 5, 10, 12], "formal": 1, "f": [1, 11], "let": [1, 3, 11, 12, 13], "p_f": [1, 3], "p_": 1, "preced": 1, "ldot": [1, 20], "n": [1, 5, 7, 11, 16, 19, 20], "respect": [1, 3, 9, 12, 13], "here": [1, 3, 9, 11, 12, 13, 20], "repres": [1, 3, 5, 11, 15, 20], "depot": [1, 2, 3, 5, 9, 10, 11, 14], "similarli": [1, 3], "defin": [1, 5, 10, 11, 12, 13], "s_f": 1, "s_": [1, 11, 19, 20], "succeed": 1, "Then": [1, 8, 18], "we": [1, 3, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20], "have": [1, 2, 3, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20], "text": [1, 9], "frac": 1, "sum_": [1, 3, 9], "1_": 1, "ne": 1, "2n": 1, "our": [1, 8, 9, 10, 11, 12, 13], "definit": [1, 3, 13], "direct": 1, "2": [1, 3, 5, 7, 11, 12, 13, 15], "3": [1, 3, 9, 11, 12, 13, 15], "4": [1, 3, 7, 11, 12, 13, 15], "consid": [1, 3, 5, 9, 12, 16, 20], "complet": [1, 3, 8, 11, 20], "do": [1, 3, 8, 9, 12, 13, 17, 20], "add": [1, 2, 3, 5, 8, 9, 13, 19, 20], "count": [1, 3], "denomin": 1, "maximum": [1, 3, 6, 10, 12, 14, 19, 20], "thu": [1, 7, 9, 12, 14], "alwai": [1, 3, 8, 9, 15], "less": [1, 8], "0": [1, 2, 3, 5, 9, 11, 12, 13, 15, 20], "percentag": [1, 3, 15], "suggest": [1, 19], "maxim": 1, "zero": [1, 3, 10], "thei": [1, 5, 9, 12, 13, 20], "variou": [2, 3, 6, 9, 11, 19, 20], "those": [2, 5, 7, 9, 12, 13], "These": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15], "understand": [2, 10, 13], "your": [2, 3, 7, 8, 9, 12, 16, 17, 18], "help": [2, 3, 7, 8, 9, 14], "investig": [2, 13], "plot_coordin": [2, 11, 12], "titl": [2, 11, 16], "str": [2, 3], "coordin": [2, 3, 10, 11], "ax": [2, 11, 12], "none": [2, 3, 9, 20], "draw": [2, 3], "One": [2, 8], "plot_demand": 2, "demand": [2, 3, 5, 10, 11, 12, 20], "vertic": [2, 3, 11], "bar": [2, 11], "sort": 2, "plot_divers": 2, "divers": [2, 3, 11, 13, 14, 19], "statist": [2, 3, 9, 11, 12], "plot_inst": [2, 11], "fig": [2, 11, 13], "figur": [2, 11, 12, 13], "option": [2, 3, 7, 12, 14, 18, 20], "plot_object": 2, "num_to_skip": 2, "int": [2, 3, 4, 5, 6, 9, 13], "ylim_adjust": 2, "95": [2, 11, 13], "15": [2, 11, 12, 13], "subpopul": 2, "initi": [2, 3, 9, 13, 19], "iter": [2, 3, 5, 6, 7, 11, 12, 13, 19], "skip": [2, 9], "earli": [2, 9, 11], "veri": [2, 3, 5, 9, 11, 13], "high": [2, 3, 13, 16, 19], "obscur": 2, "what": [2, 3, 8, 9, 10, 11], "go": [2, 11, 13, 18, 20], "later": [2, 3, 9, 11], "default": [2, 3, 5, 9, 10, 13], "5": [2, 3, 11, 12, 13, 15], "bound": 2, "axi": [2, 11], "best": [2, 3, 4, 6, 7, 11, 12, 13, 15, 19], "denot": [2, 11, 20], "found": [2, 3, 5, 10, 11, 12, 15, 19, 20], "feasibl": [2, 3, 9, 11, 12, 13, 20], "plot_result": [2, 11, 13], "run": [2, 3, 6, 7, 8, 11, 12, 13, 14, 15, 17], "includ": [2, 3, 5, 8, 11, 17, 20], "about": [2, 3, 7, 8, 9, 11, 12, 13, 17], "underli": [2, 3], "plot_route_schedul": [2, 11], "legend": [2, 11], "bool": [2, 3, 5, 6, 9], "true": [2, 3, 5, 6, 9, 12], "schedul": 2, "multipl": [2, 3, 6, 9, 12, 14, 20], "solid": 2, "earliest": [2, 3, 11, 20], "possibl": [2, 3, 4, 8, 9, 20], "trajectori": 2, "warp": [2, 3, 5], "infeas": [2, 3, 11, 12, 13], "shade": 2, "slack": [2, 3, 11], "up": [2, 3, 9, 10, 13, 14, 18], "latest": [2, 3, 11, 18, 20], "onli": [2, 3, 4, 5, 8, 9, 15, 18, 19], "dash": 2, "dot": [2, 11, 19, 20], "drive": [2, 11], "servic": [2, 3, 10, 11, 14, 20], "exclud": [2, 3], "wait": [2, 3, 5, 11, 20], "pure": [2, 12], "grei": [2, 11], "background": [2, 11], "remain": [2, 11, 12], "load": [2, 3, 11, 12], "list": [2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 20], "whose": [2, 3], "show": [2, 9, 11, 12, 13], "plot_runtim": 2, "runtim": [2, 3, 4, 6, 7, 11, 12, 13], "plot_solut": [2, 12], "plot_client": [2, 12], "fals": [2, 3, 5, 6, 11, 12], "all": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 18, 20], "plot_time_window": 2, "top": [3, 11, 13], "level": [3, 13], "expos": 3, "sever": [3, 10, 11, 12, 13], "core": [3, 7], "class": [3, 5, 6, 8, 9], "need": [3, 5, 7, 8, 9, 12, 13, 17, 18, 19], "vrp": [3, 5, 13, 14, 16, 19], "solver": [3, 11, 12, 14, 16, 20], "geneticalgorithm": [3, 5, 6, 13], "manag": [3, 6, 11], "pool": [3, 12], "most": [3, 8, 12, 15, 18, 20], "take": [3, 4, 7, 8, 9, 13, 17, 18, 19], "advanc": 3, "configur": [3, 5, 7, 8, 11], "sensibl": 3, "final": [3, 5, 11, 12, 13], "after": [3, 4, 5, 6, 7, 8, 9, 12, 18, 19], "obtain": [3, 9, 15, 19, 20], "observ": [3, 11, 13], "look": [3, 9, 11, 12, 13, 14], "exampl": [3, 6, 8, 9, 11, 12, 13, 20], "how": [3, 5, 8, 9, 10, 11, 12, 13, 15], "relat": 3, "model": [3, 11, 12, 13], "simpl": [3, 6, 9, 20], "interfac": [3, 7, 11, 12, 13, 15], "attribut": [3, 8], "properti": 3, "current": [3, 5, 6, 11, 13, 14, 15, 20], "index": [3, 18], "group": [3, 10, 14, 18], "clientgroup": 3, "vehicle_typ": 3, "vehicletyp": 3, "classmethod": 3, "from_data": [3, 11], "construct": [3, 13], "feed": 3, "add_client": [3, 12], "x": [3, 7, 10, 11, 12], "service_dur": [3, 11], "tw_earli": [3, 12], "tw_late": [3, 12], "np": [3, 20], "iinfo": 3, "int64": 3, "max": 3, "release_tim": 3, "prize": [3, 9, 10, 14, 15], "requir": [3, 8, 9, 10, 12, 14, 20], "name": [3, 15], "being": [3, 12], "ad": [3, 5, 8, 9, 13, 19], "mutual": [3, 10], "exclus": [3, 10], "add_client_group": 3, "possibli": [3, 9], "add_depot": [3, 12], "add_edg": [3, 12], "frm": [3, 12], "durat": [3, 5, 10, 11, 12, 14], "edg": [3, 5, 9, 10, 12, 13], "either": [3, 9, 12], "neg": 3, "self": [3, 17], "loop": [3, 19], "nonzero": 3, "add_vehicle_typ": [3, 12], "num_avail": 3, "capac": [3, 10, 11, 12, 14, 20], "fixed_cost": 3, "max_dur": [3, 12], "max_dist": 3, "assign": [3, 10, 20], "alreadi": [3, 9], "stop": [3, 7, 11, 12, 13, 14, 15, 19], "stoppingcriterion": [3, 6, 13], "seed": [3, 7, 11, 13, 15], "collect_stat": 3, "displai": [3, 9, 11, 12], "param": [3, 5], "solveparam": 3, "criterion": [3, 6, 7, 11, 13, 15, 19], "stream": 3, "collect": [3, 9, 11, 14, 15], "progress": [3, 12, 13], "inform": [3, 16, 17], "avail": [3, 5, 7, 9, 11, 13, 16, 20], "set": [3, 4, 7, 9, 11, 12, 13, 14, 15, 18, 19, 20], "store": 3, "connect": 3, "geneticalgorithmparam": 3, "repair_prob": 3, "8": [3, 11, 12, 13, 15], "nb_iter_no_improv": 3, "20000": 3, "probabl": 3, "repar": 3, "make": [3, 5, 8, 9, 13, 18], "without": [3, 7, 14], "improv": [3, 5, 6, 7, 9, 12, 13, 15, 19], "befor": [3, 5, 11, 13, 15, 20], "restart": 3, "occur": [3, 7], "penalty_manag": 3, "penaltymanag": [3, 13], "search_method": 3, "searchmethod": [3, 5], "crossover_op": 3, "callabl": 3, "initial_solut": 3, "describ": [3, 5, 9, 10, 13], "penalti": [3, 13], "crossov": [3, 5, 14, 19], "initialis": [3, 7, 19], "empti": [3, 4, 5, 13], "until": [3, 5, 13, 19], "penaltyparam": 3, "init_load_penalti": 3, "20": [3, 8, 11, 12, 13, 15], "init_time_warp_penalti": 3, "6": [3, 11, 12, 13, 15], "init_dist_penalti": 3, "repair_boost": 3, "12": [3, 11, 12, 13], "solutions_between_upd": 3, "50": [3, 11, 13], "penalty_increas": 3, "34": [3, 11, 12, 13], "penalty_decreas": 3, "32": [3, 11, 13, 15], "target_feas": 3, "43": [3, 11, 13, 15], "excess": 3, "amount": [3, 5, 10, 11, 12, 17], "unit": 3, "penalis": 3, "start": [3, 5, 9, 10, 11, 12, 13, 19, 20], "violat": 3, "booster": 3, "ge": [3, 11, 20], "temporarili": 3, "multipli": 3, "term": [3, 9, 13], "forc": 3, "booster_cost_evalu": 3, "registr": 3, "updat": [3, 9, 15, 18], "everi": [3, 8, 19], "onc": [3, 6, 8, 18, 20], "while": [3, 8, 9, 20], "base": [3, 10, 11, 13], "recent": [3, 8, 15], "control": [3, 4, 5], "p_i": [3, 9, 20], "increas": [3, 12, 13], "insuffici": 3, "been": [3, 6, 15, 20], "amongst": 3, "v": [3, 5, 11, 20], "get": [3, 7, 9, 18, 19, 20], "p_d": 3, "decreas": 3, "suffici": [3, 9, 13], "target": 3, "last": [3, 12], "regist": [3, 19], "too": [3, 8, 11, 12, 13], "mani": [3, 13, 20], "ensur": [3, 5, 9, 13, 19], "fraction": 3, "histori": 3, "temporari": 3, "short": [3, 12, 17], "sol": [3, 11, 13], "dimens": [3, 10], "boost": 3, "populationparam": 3, "min_pop_s": 3, "25": [3, 11, 13, 15], "generation_s": 3, "40": [3, 5, 11, 13, 15], "nb_elit": 3, "nb_close": 3, "lb_divers": 3, "ub_divers": 3, "max_pop_s": 3, "diversity_op": 3, "pairwis": 3, "__iter__": 3, "over": [3, 4, 13, 15, 19, 20], "__len__": 3, "size": [3, 5, 7, 12, 19], "num_feas": [3, 13], "num_infeas": [3, 13], "survivor": [3, 13, 19], "automat": [3, 8, 12], "trigger": 3, "reach": [3, 13, 15, 19], "its": [3, 5, 9, 12, 13], "clear": [3, 8, 13], "remov": [3, 9, 19], "k": [3, 19], "non": [3, 5, 6, 10], "ident": 3, "tournament": [3, 19], "subject": [3, 8], "restrict": [3, 12, 13, 14], "binari": [3, 14], "ari": [3, 19], "read": [3, 10, 13, 14], "path": 3, "round_func": [3, 11], "ndarrai": 3, "vrplib": [3, 11, 14], "file": [3, 8, 9, 10, 11], "format": [3, 14], "explan": [3, 9], "page": [3, 9, 10, 12, 14, 15, 18, 19, 20], "round": [3, 7, 11], "appli": [3, 4, 5, 9, 19], "string": 3, "nearest": [3, 4, 11], "integ": [3, 5, 12], "trunc": 3, "truncat": [3, 11], "dimac": [3, 7, 11, 13, 15], "scale": [3, 7, 12], "10": [3, 5, 11, 12, 13, 15, 16], "exact": [3, 7, 20], "1000": [3, 7, 11, 12, 13], "typeerror": 3, "read_solut": [3, 11], "stat": 3, "num_iter": 3, "outcom": 3, "singl": [3, 7, 9, 20], "total": [3, 9, 11, 12, 20], "main": [3, 11], "inf": 3, "is_feas": [3, 13], "show_vers": [3, 17], "print": [3, 11, 12, 13], "version": [3, 8, 9, 15, 17, 18], "bug": 3, "report": [3, 15], "call": [3, 6, 11, 12, 13], "like": [3, 10, 11, 12, 18], "follow": [3, 7, 8, 10, 11, 12, 13, 16, 17, 19, 20], "depend": [3, 9, 18], "local": [3, 5, 13, 14, 15, 19, 20], "instal": [3, 7, 14, 17], "import": [3, 5, 9, 11, 12, 13, 17], "numpi": [3, 8], "24": [3, 11, 13, 15], "matplotlib": [3, 11, 12, 13], "7": [3, 11, 12, 13, 15], "tqdm": 3, "64": [3, 11, 13], "tomli": 3, "python": [3, 9, 17, 18], "9": [3, 11, 12, 13, 15], "13": [3, 11, 12, 13, 15], "neighbourhood": [3, 4, 5, 9, 13], "neighbourhoodparam": [3, 5], "node_op": [3, 13], "nodeoper": [3, 5], "node_oper": [3, 5, 13], "route_op": [3, 13], "routeoper": [3, 5], "route_oper": [3, 5, 13], "hybrid": [3, 5, 13, 19], "node": 3, "from_fil": 3, "loc": 3, "toml": [3, 7], "track": [3, 7, 8, 11, 12, 13, 15], "analys": 3, "turn": 3, "off": [3, 12, 13], "avoid": [3, 8, 12], "memori": 3, "long": 3, "is_collect": 3, "collect_from": 3, "from_csv": 3, "delimit": 3, "kwarg": [3, 5, 6], "csv": 3, "filesystem": 3, "separ": [3, 11, 13], "comma": 3, "addit": [3, 9, 10, 12, 13, 14, 20], "keyword": 3, "argument": [3, 5, 8, 11, 12], "pass": [3, 5, 11, 12], "dictread": 3, "to_csv": 3, "quot": 3, "quote_minim": 3, "write": [3, 9], "strategi": 3, "necessari": [3, 8, 9], "dictwrit": 3, "load_penalti": [3, 13], "tw_penalti": [3, 13], "dist_penalti": [3, 13], "certain": 3, "constraint": [3, 9, 12, 14, 20], "hand": 3, "wave": 3, "some": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 20], "mathcal": 3, "sequenc": 3, "end": [3, 11, 12, 20], "ha": [3, 4, 6, 7, 8, 11, 12, 18, 19, 20], "t_r": 3, "fix": [3, 6], "f_": 3, "v_r": 3, "visit": [3, 5, 9, 10, 11, 12, 14, 20], "left": [3, 11, 13, 20], "d_": [3, 9, 11, 20], "ij": [3, 9, 11, 20], "right": [3, 11, 13, 20], "uncollect": [3, 9], "unvisit": 3, "abov": [3, 12, 13], "hold": 3, "larg": [3, 4, 5, 7, 11, 13], "penalised_cost": [3, 13], "instead": 3, "smooth": 3, "time_warp": [3, 11], "plan": 3, "centroid": 3, "center": [3, 4, 5], "point": [3, 4, 9, 19], "end_tim": 3, "equival": 3, "start_tim": 3, "excess_dist": 3, "excess_load": 3, "has_excess_dist": 3, "has_excess_load": 3, "has_time_warp": 3, "leav": 3, "releas": [3, 8, 9, 10, 14], "unless": 3, "departur": 3, "delai": 3, "minim": 3, "posit": [3, 5], "mai": [3, 7, 9, 15, 20], "introduc": [3, 9, 12, 15, 20], "longer": 3, "incur": 3, "travel_dur": 3, "wait_dur": [3, 11], "encod": 3, "latter": [3, 9], "runtimeerror": 3, "invalid": 3, "wai": [3, 13, 18, 20], "particular": [3, 9, 12], "exce": [3, 19, 20], "num_vehicl": 3, "fixed_vehicle_cost": 3, "otherwis": [3, 6], "is_complet": 3, "is_group_feas": 3, "w": [3, 16], "t": [3, 9], "make_random": [3, 13], "pred": 3, "succ": 3, "predecessor": 3, "successor": [3, 5], "num_client": 3, "num_missing_cli": 3, "num_rout": 3, "decis": 3, "implicit": 3, "uncollected_pr": 3, "horizont": 3, "ship": [3, 6], "back": [3, 10, 12, 19], "spend": 3, "resum": 3, "necessarili": [3, 5], "within": [3, 20], "interv": 3, "unconstrain": [3, 10], "must": [3, 5, 6, 8, 9, 10, 11, 12, 20], "membership": [3, 10], "By": [3, 12, 13], "free": [3, 5, 8, 17], "form": [3, 5, 13], "field": [3, 9, 20], "impos": [3, 14], "support": [3, 8, 10, 11, 12, 14, 15], "now": [3, 8, 9, 11, 12, 13, 18], "mutually_exclus": 3, "exactli": [3, 10, 20], "duplic": 3, "twice": 3, "open": [3, 5, 8, 9, 11, 14, 17, 18, 20], "close": [3, 12, 13], "along": [3, 12, 13], "dispatch": 3, "shift": [3, 14], "associ": [3, 5], "specifi": [3, 6, 7, 10, 12, 13, 17, 20], "distance_matrix": 3, "duration_matrix": [3, 12], "lower": [3, 5, 10], "least": [3, 19], "matrix": [3, 5], "give": [3, 11, 12], "inconsist": 3, "indexerror": 3, "exist": [3, 9, 19], "becaus": [3, 13, 15], "referenc": 3, "out": [3, 7, 12, 13, 20], "rang": [3, 7, 12, 13], "dist": 3, "accord": 3, "full": [3, 12], "view": 3, "No": 3, "cannot": 3, "modifi": [3, 7, 9, 12], "retriev": 3, "idx": [3, 11, 12], "smaller": 3, "num_depot": 3, "bigger": 3, "num_group": 3, "num_loc": 3, "plu": 3, "num_vehicle_typ": 3, "replac": [3, 5], "except": 3, "dynamicbitset": 3, "num_bit": 3, "dynam": 3, "bitset": 3, "implement": [3, 5, 6, 9, 13, 19, 20], "fast": 3, "check": [3, 8, 9, 20], "test": [3, 5, 8, 9], "e": [3, 9, 10, 20], "g": [3, 9, 11, 20], "abl": [3, 9], "block_siz": 3, "actual": [3, 10, 11], "toward": 3, "next": [3, 9], "__and__": 3, "__eq__": 3, "__getitem__": 3, "__invert__": 3, "__or__": 3, "__setitem__": 3, "__xor__": 3, "reset": 3, "xor": 3, "pseudo": 3, "repeatedli": 3, "bit": 3, "itself": [3, 9], "state": [3, 14, 20], "__call__": [3, 5, 6], "min": 3, "rand": 3, "randint": 3, "annot": 3, "fixeds": 3, "emptysolutionwarn": 3, "forbidden": 3, "per": [3, 12], "se": 3, "odd": 3, "scalingwarn": 3, "caus": [3, 9, 15], "suffer": 3, "numer": [3, 12], "issu": [3, 8, 9, 15, 17], "tspwarn": 3, "compon": [3, 9, 12, 14], "presenc": 3, "proper": 3, "destruct": 4, "ln": 4, "insert": [4, 5, 9], "unplan": 4, "To": [4, 5, 7, 9, 11, 13, 14, 17, 18], "fine": [4, 19], "grain": 4, "greedy_repair": 4, "greedi": 4, "so": [4, 5, 9, 10, 12, 13, 18, 19], "move": [4, 5, 9, 13], "quadrat": 4, "nearest_route_insert": 4, "closest": 4, "worst": 4, "typic": [4, 8, 9, 10], "much": [4, 5, 11, 13, 15], "effici": [4, 5, 19, 20], "newli": [5, 9], "happen": 5, "localsearch": [5, 9, 13], "protocol": [5, 6], "arg": [5, 6], "around": [5, 9], "hopefulli": 5, "explor": [5, 19], "granular": [5, 9], "manner": 5, "user": 5, "quickli": [5, 7, 11, 13, 15], "add_node_oper": [5, 13], "op": 5, "add_route_oper": [5, 13], "intensifi": 5, "expens": 5, "set_neighbour": 5, "conveni": [5, 11, 12], "thereaft": 5, "repeat": [5, 19], "further": [5, 9, 13, 19], "through": [5, 10, 12, 14], "wa": [5, 9], "overlap_toler": 5, "05": 5, "limit": [5, 7, 17, 20], "intensif": 5, "effort": 5, "overlap": 5, "angl": 5, "weight_wait_tim": 5, "weight_time_warp": 5, "nb_granular": 5, "symmetric_proxim": 5, "symmetric_neighbour": 5, "calcul": 5, "weight": [5, 10, 11, 20], "minimum": [5, 19], "aspect": [5, 11], "proxim": 5, "far": [5, 12, 13, 19], "apart": 5, "overal": 5, "symmetris": 5, "structur": 5, "compute_neighbour": [5, 9, 13], "via": [5, 8, 14, 18], "inherit": [5, 19], "As": [5, 20], "exchange10": [5, 9], "consecut": 5, "u": [5, 8, 11, 13], "reloc": 5, "swap": 5, "special": 5, "templat": [5, 8, 17], "exchange20": 5, "exchange30": 5, "exchange11": 5, "exchange21": 5, "exchange31": 5, "exchange22": 5, "exchange32": 5, "exchange33": 5, "swaptail": 5, "arc": [5, 9, 11, 20], "rightarrow": 5, "known": [5, 7, 11, 13, 15], "opt": [5, 9, 12], "literatur": [5, 15], "swaprout": 5, "swapstar": 5, "re": [5, 12, 13, 20], "place": [5, 8, 9, 11, 17], "thibaut": 5, "vidal": [5, 7, 15, 16, 19], "2022": [5, 16, 19], "cvrp": [5, 7, 9, 11, 15, 16, 20], "neighborhood": 5, "140": [5, 11], "http": [5, 8, 16, 18], "doi": [5, 16], "org": [5, 16], "1016": 5, "cor": 5, "2021": 5, "105643": 5, "packag": [6, 10, 13, 14, 15, 16, 18], "whenev": [6, 8], "met": [6, 13, 19], "exceed": 6, "best_cost": 6, "maxiter": [6, 11, 13], "max_iter": 6, "maxruntim": [6, 11, 12, 13], "max_runtim": 6, "multiplecriteria": 6, "aggreg": 6, "noimprov": 6, "command": [7, 8, 17], "line": [7, 8, 11, 12, 17], "find": [7, 9, 11, 12, 13, 20], "For": [7, 8, 9, 11, 12, 13, 19, 20], "uchoa": 7, "cpu": 7, "passmark": 7, "2183": 7, "100": [7, 11, 13], "ran": 7, "240": [7, 11, 12], "compil": [7, 8, 14], "addition": [7, 11, 13], "config": 7, "vrptw": [7, 9, 12, 13, 15, 20], "gehr": [7, 11], "homberg": [7, 11], "custom": [7, 11], "hour": 7, "2000": [7, 11], "pcvrptw": [7, 15], "mdvrptw": [7, 15], "et": [7, 15, 19], "al": [7, 15, 19], "2013": [7, 15, 19], "360": [7, 11], "960": 7, "2500": 7, "five": [7, 15], "whichev": 7, "1186": [7, 12], "vrpb": [7, 15], "90": [7, 11, 13], "largest": [7, 11], "queiroga": [7, 15], "2020": [7, 15], "523": 7, "ten": [7, 15], "averag": [7, 11, 12, 13, 15], "compar": [7, 12, 15], "repositori": [7, 8, 9, 10, 15, 17, 18], "gap": [7, 11, 15], "submodul": 7, "git": [7, 8, 18], "init": [7, 13], "convers": [8, 17], "develop": [8, 9, 17, 20], "github": [8, 17, 18], "feel": [8, 17], "someth": [8, 17], "discuss": [8, 9, 12, 17], "sure": [8, 18], "reason": 8, "modern": 8, "standard": [8, 9, 10, 11], "proce": [8, 9], "fork": 8, "websit": 8, "clone": [8, 18], "environ": [8, 18], "com": [8, 18], "usernam": 8, "directori": 8, "virtual": [8, 18], "poetri": [8, 18], "cd": [8, 18], "pip": [8, 14, 18], "upgrad": [8, 18], "doc": 8, "dev": 8, "might": [8, 9, 14, 18, 20], "few": [8, 11, 13, 18], "minut": [8, 18], "done": [8, 13, 18], "everyth": [8, 9, 13, 18], "smoothli": 8, "execut": 8, "suit": 8, "pytest": 8, "pre": [8, 14], "simpli": [8, 18], "style": 8, "featur": [8, 9, 12, 19], "branch": [8, 20], "written": [8, 9], "built": 8, "mode": 8, "debug": 8, "made": [8, 9, 18], "build_extens": 8, "py": 8, "script": 8, "directli": [8, 18], "discov": 8, "meson": 8, "system": 8, "root": 8, "touch": 8, "handl": [8, 11], "pull": [8, 9], "request": [8, 9, 12, 20], "accept": 8, "meet": 8, "below": [8, 10, 14, 15], "greatli": 8, "reduc": 8, "job": 8, "softwar": 8, "cheap": 8, "easi": [8, 9], "merg": [8, 9], "delet": 8, "click": 8, "temptat": 8, "lump": 8, "bunch": 8, "unrel": 8, "work": [8, 9, 10, 13, 19, 20], "keep": [8, 9], "prepar": 8, "messag": 8, "concis": 8, "mean": [8, 15, 20], "80": [8, 11, 12, 13], "charact": 8, "blank": 8, "bodi": 8, "code": [8, 9, 15, 17], "submiss": 8, "document": [8, 9, 11, 12, 13], "docstr": 8, "conform": 8, "edit": 8, "pars": [8, 15], "correctli": 8, "pleas": [8, 9, 14, 16, 17], "On": [9, 10], "guidelin": 9, "gotcha": 9, "think": 9, "concret": 9, "experi": 9, "recommend": 9, "draft": 9, "contribut": [9, 14, 20], "meant": 9, "regardless": 9, "chang": [9, 12, 15], "don": 9, "forget": 9, "bind": 9, "stub": 9, "sane": 9, "sens": 9, "With": 9, "step": 9, "howev": 9, "overbrac": 9, "x_": 9, "y_i": 9, "question": 9, "lot": [9, 13], "unsur": 9, "logic": 9, "basic": [9, 11, 12], "patch": 9, "thing": 9, "exercis": 9, "error": [9, 15], "correct": [9, 15], "benchmark": [9, 10, 11, 13, 14, 20], "regress": 9, "baselin": 9, "strictli": 9, "small": [9, 12], "decid": 9, "basi": 9, "dure": [9, 11], "review": 9, "success": 9, "Of": [9, 10, 11], "cours": [9, 11], "account": 9, "Such": 9, "come": [9, 14], "kept": 9, "hope": 9, "prove": 9, "inspir": 9, "although": 10, "standardis": 10, "merit": 10, "descript": [10, 12], "commonli": 10, "explain": 10, "adher": 10, "glossari": 10, "understood": 10, "silent": 10, "ignor": [10, 12], "kei": [10, 11], "homogen": [10, 20], "sum": 10, "edge_weight_format": 10, "edge_weight_sect": 10, "edge_weight_typ": 10, "unlimit": 10, "fleet": [10, 14, 20], "vehicles_max_dist": 10, "vehicles_max_dur": 10, "arrai": 10, "backhaul_sect": 10, "backhaul": [10, 14], "quantiti": 10, "pick": 10, "transport": [10, 20], "demand_sect": 10, "linehaul_sect": 10, "depot_sect": 10, "contigu": 10, "matric": 10, "mutually_exclusive_group_sect": 10, "node_coord_sect": 10, "prize_sect": 10, "impli": 10, "release_time_sect": 10, "service_time_sect": 10, "time_window_sect": 10, "l": [10, 13, 16, 19], "vehicles_depot_sect": 10, "multi": [10, 14], "notebook": [11, 12, 13, 18, 20], "variant": [11, 12, 14, 15], "build": [11, 13], "tutori": [11, 14, 19], "plot": [11, 12, 13, 14], "tool": [11, 12, 13, 14, 15], "diagnost": 11, "graph": [11, 20], "vertex": [11, 20], "partit": [11, 20], "cup": [11, 20], "v_c": [11, 20], "q_": [11, 20], "minimis": [11, 12, 20], "incorpor": 11, "sake": 11, "exposit": 11, "t_": [11, 20], "equal": 11, "hard": [11, 12, 20], "e_i": [11, 20], "l_i": [11, 20], "arriv": [11, 20], "begin": [11, 20], "h": [11, 12, 20], "pyplot": [11, 12, 13], "plt": [11, 12, 13], "tabul": 11, "n439": 11, "k37": 11, "wide": 11, "convert": [11, 12], "euclidean": 11, "integr": 11, "convent": 11, "bk": 11, "_": [11, 12, 13], "subplot": [11, 12], "figsiz": [11, 12, 13], "tight_layout": [11, 13], "again": [11, 12, 13], "instanti": [11, 13], "42": [11, 13], "37": [11, 13], "438": 11, "36977": 11, "00": [11, 12, 13], "74": [11, 13], "105": 11, "434": 11, "311": 11, "133": 11, "425": 11, "223": 11, "349": 11, "370": 11, "169": 11, "348": 11, "411": [11, 12], "410": [11, 12], "97": [11, 13], "400": [11, 12], "267": 11, "386": 11, "299": 11, "392": 11, "57": [11, 13], "218": 11, "72": [11, 13], "172": 11, "202": 11, "308": 11, "270": 11, "406": 11, "155": 11, "41": [11, 13], "275": 11, "92": [11, 13], "260": 11, "26": [11, 13], "326": 11, "71": [11, 13, 15], "335": 11, "239": 11, "281": 11, "375": 11, "296": 11, "347": [11, 12], "211": 11, "250": 11, "280": 11, "404": 11, "228": [11, 12], "346": 11, "162": 11, "435": 11, "166": 11, "345": 11, "385": 11, "312": 11, "381": 11, "195": 11, "421": 11, "416": 11, "407": 11, "366": 11, "122": 11, "145": 11, "200": [11, 13], "139": 11, "206": 11, "418": 11, "409": [11, 12], "110": 11, "413": [11, 12], "420": 11, "396": 11, "423": 11, "391": 11, "337": 11, "433": 11, "242": 11, "342": [11, 12], "377": 11, "380": [11, 12], "115": 11, "372": 11, "264": 11, "352": 11, "315": 11, "86": [11, 13, 15], "225": 11, "388": 11, "303": 11, "245": 11, "241": 11, "221": 11, "324": 11, "229": 11, "268": 11, "227": 11, "249": 11, "325": 11, "393": 11, "237": 11, "121": 11, "353": 11, "422": 11, "149": 11, "402": 11, "428": 11, "403": 11, "384": 11, "17": [11, 12, 13], "412": 11, "89": [11, 13], "293": 11, "83": [11, 13], "339": 11, "66": [11, 13], "126": 11, "11": [11, 12, 13, 15], "246": 11, "138": 11, "257": 11, "253": 11, "289": 11, "271": 11, "338": 11, "329": 11, "319": 11, "266": 11, "351": 11, "432": 11, "137": 11, "98": [11, 13], "341": 11, "47": [11, 13], "286": 11, "350": 11, "376": 11, "383": 11, "321": 11, "243": 11, "233": 11, "44": [11, 13, 15], "65": [11, 13], "159": 11, "153": 11, "215": 11, "193": 11, "285": 11, "101": 11, "252": 11, "297": 11, "309": 11, "323": 11, "14": [11, 12, 13], "204": 11, "176": 11, "131": 11, "397": 11, "387": 11, "134": 11, "426": 11, "31": [11, 13, 15], "333": 11, "431": 11, "154": 11, "91": [11, 13], "118": 11, "173": 11, "344": 11, "197": 11, "61": [11, 13], "189": 11, "79": [11, 13], "16": [11, 12, 13], "437": 11, "283": 11, "251": 11, "144": 11, "334": [11, 12], "146": 11, "207": 11, "58": [11, 13, 15], "161": 11, "287": 11, "395": 11, "184": 11, "390": 11, "371": 11, "109": 11, "62": [11, 13], "367": 11, "18": [11, 12, 13, 15], "28": [11, 13, 15], "430": 11, "248": 11, "19": [11, 12, 13], "330": 11, "108": 11, "340": 11, "327": 11, "389": 11, "343": 11, "401": 11, "361": 11, "331": 11, "220": 11, "408": 11, "302": [11, 12], "255": 11, "152": 11, "177": 11, "135": 11, "157": 11, "73": [11, 13], "165": 11, "265": 11, "313": 11, "30": [11, 12, 13], "259": 11, "364": 11, "399": [11, 12], "106": 11, "216": 11, "77": [11, 13], "99": [11, 13, 15], "124": 11, "21": [11, 12, 13, 15], "175": 11, "132": 11, "67": [11, 13], "112": 11, "378": 11, "181": 11, "84": [11, 13], "22": [11, 12, 13, 15], "244": 11, "209": 11, "354": 11, "63": [11, 13], "117": 11, "103": 11, "292": 11, "192": 11, "235": 11, "23": [11, 12, 13, 15], "382": [11, 12], "174": 11, "160": [11, 12], "291": 11, "178": 11, "222": 11, "125": 11, "190": 11, "356": 11, "290": 11, "368": 11, "417": [11, 13], "213": 11, "328": 11, "272": 11, "123": 11, "301": 11, "379": 11, "394": 11, "171": 11, "310": 11, "424": 11, "300": 11, "363": 11, "357": 11, "214": 11, "198": 11, "52": [11, 13], "168": 11, "405": 11, "234": 11, "284": 11, "170": 11, "150": 11, "282": 11, "273": 11, "320": [11, 12], "279": 11, "114": [11, 12], "316": 11, "120": 11, "269": 11, "332": 11, "27": [11, 12, 13], "179": 11, "96": [11, 13], "256": 11, "78": [11, 13], "182": 11, "183": 11, "205": 11, "219": 11, "142": 11, "199": 11, "151": 11, "163": 11, "188": 11, "369": [11, 12], "336": 11, "419": 11, "304": 11, "322": 11, "374": 11, "208": 11, "141": 11, "35": [11, 12, 13, 15], "232": 11, "39": [11, 13, 15], "29": [11, 13, 15], "180": 11, "107": 11, "306": 11, "314": 11, "148": 11, "69": [11, 13], "68": [11, 13], "111": 11, "128": 11, "53": [11, 13], "81": [11, 13], "186": 11, "164": 11, "51": [11, 13], "54": [11, 13, 15], "94": [11, 13], "212": 11, "46": [11, 13], "49": [11, 13], "45": [11, 13, 15], "277": 11, "85": [11, 13], "167": 11, "247": 11, "201": 11, "261": 11, "262": 11, "307": 11, "194": 11, "38": [11, 12, 13], "258": 11, "70": [11, 13], "129": 11, "191": 11, "158": 11, "87": [11, 13], "102": 11, "127": 11, "119": 11, "76": [11, 13], "203": 11, "33": [11, 13], "263": 11, "55": [11, 13], "288": 11, "298": 11, "226": 11, "317": 11, "398": 11, "415": 11, "427": 11, "156": 11, "48": [11, 13, 15], "36": [11, 13], "373": 11, "436": 11, "93": [11, 13], "185": 11, "294": 11, "318": 11, "278": 11, "276": 11, "254": 11, "355": 11, "429": 11, "365": 11, "359": 11, "295": [11, 12], "358": 11, "231": 11, "236": 11, "217": 11, "414": 11, "238": 11, "82": [11, 13], "147": 11, "104": 11, "60": [11, 13], "143": 11, "305": 11, "362": 11, "187": 11, "136": 11, "59": [11, 13], "130": 11, "88": [11, 13], "210": 11, "56": [11, 13], "75": [11, 13], "196": 11, "116": 11, "113": 11, "274": 11, "1f": 11, "wors": 11, "36391": 11, "ve": 11, "optimis": 11, "increasingli": 11, "similar": 11, "littl": 11, "gain": 11, "overview": 11, "bottom": [11, 13], "solomon": [11, 13], "challeng": 11, "decim": [11, 12], "rc208": [11, 13], "impress": 11, "produc": [11, 12], "plot_": 11, "api": [11, 12, 13], "7761": 11, "optim": [11, 12, 20], "776": 11, "inspect": [11, 12], "num_stop": 11, "len": [11, 12, 13], "header": 11, "row": 11, "datum": 11, "tablefmt": 11, "html": 11, "2187": 11, "2700": 11, "4650": 11, "1983": 11, "2400": 11, "3810": 11, "1325": 11, "1700": 11, "2860": 11, "2266": 11, "3200": 11, "5920": 11, "jump": 11, "semi": 11, "transpar": 11, "region": 11, "truck": 11, "axarr": 11, "enumer": [11, 12], "zip": 11, "reshap": 11, "rc2_10_5": 11, "27502": 11, "25797": 11, "moreov": 11, "demonstr": 11, "visualis": 11, "procedur": [11, 19], "brief": [12, 14], "showcas": 12, "shipment": 12, "OR": [12, 15], "6208": 12, "fmt": 12, "coord": 12, "456": 12, "912": 12, "570": 12, "798": 12, "684": 12, "480": 12, "560": 12, "640": 12, "ab": 12, "manhattan": 12, "readi": [12, 13], "v0": [12, 15], "avg": 12, "500": [12, 13], "7134": 12, "6138": 12, "6806": 12, "5874": 12, "termin": 12, "1377": 12, "output": [12, 17, 19], "heurist": [12, 20], "attain": 12, "input": [12, 19], "them": [12, 20], "unexpect": 12, "behaviour": 12, "besid": 12, "unlik": 12, "still": [12, 13, 20], "aim": 12, "time_window": 12, "999": 12, "unrestrict": 12, "frm_idx": 12, "to_idx": 12, "6528": 12, "1059": 12, "slightli": 12, "becom": 12, "familiaris": 12, "ourself": 12, "6004": 12, "familiar": 12, "seen": 12, "yet": [12, 13, 18], "section": [12, 20], "offer": 12, "reward": 12, "box": 12, "stick": 12, "471": 12, "484": 12, "mark": 12, "5145": 12, "1376": 12, "worth": 12, "item": 12, "deliv": 12, "world": 12, "enter": 12, "5375": 12, "1422": 12, "conclud": 12, "know": 12, "cover": 12, "introduct": [12, 14], "reli": 13, "hide": 13, "under": 13, "hood": 13, "own": 13, "signatur": 13, "def": 13, "process": 13, "continu": [13, 19], "condit": 13, "easiest": 13, "customis": 13, "space": [13, 19], "benefici": 13, "faster": 13, "assert": 13, "79611": 13, "new_sol": 13, "8584": 13, "But": 13, "hammer": 13, "9361": 13, "pretti": 13, "adjust": 13, "down": 13, "charg": 13, "ask": 13, "saw": 13, "pen_manag": 13, "nearli": 13, "tackl": [13, 20], "pop": 13, "dissimilar": 13, "recal": 13, "easili": [13, 14], "init_sol": 13, "algo": 13, "criteria": [13, 14, 19], "iter_r": 13, "time_r": 13, "7844": 13, "7839": 13, "put": 13, "learn": 13, "togeth": 13, "pm": 13, "7812": 13, "period": 13, "spike": 13, "grow": 13, "bad": 13, "purg": 13, "middl": 13, "sub": 13, "altogeth": 13, "scheme": 13, "modular": 13, "reus": 13, "art": [14, 20], "capacit": 14, "simultan": 14, "heterogen": 14, "team": 14, "orient": 14, "jointli": 14, "generalis": 14, "mac": 14, "o": [14, 19], "linux": 14, "metaheurist": [14, 20], "benefit": 14, "hg": [14, 15, 16], "yourself": 14, "instruct": [14, 15], "cite": 14, "quick": 14, "classic": 14, "measur": 14, "tabl": 15, "signific": 15, "against": 15, "date": 15, "march": 15, "2024": [15, 16], "januari": 15, "august": 15, "2023": [15, 16], "juli": 15, "februari": 15, "googl": 15, "il": 15, "sp": 15, "09": 15, "adc": 15, "simplifi": 15, "fewer": 15, "shorter": 15, "previou": 15, "therefor": 15, "perceiv": 15, "were": 15, "incorrect": 15, "onward": 15, "address": 15, "v9": 15, "3296": 15, "appendix": 15, "b": 15, "subramanian": 15, "ils_": 15, "sp_": 15, "rather": 15, "usual": 15, "paper": [15, 16, 19], "research": [16, 20], "wouda": 16, "lan": 16, "kool": 16, "journal": 16, "forthcom": 16, "1287": 16, "ijoc": 16, "0055": 16, "Or": 16, "bibtex": 16, "entri": 16, "articl": 16, "wouda_lan_kool_pyvrp_2024": 16, "url": 16, "year": 16, "publish": 16, "author": 16, "niel": 16, "leon": 16, "wouter": 16, "preprint": 16, "arxiv": 16, "extend": 16, "triag": 17, "snippet": 17, "reproduc": 17, "straightforward": 18, "project": 18, "goe": 18, "resolv": 18, "jupyt": 18, "browser": 18, "navig": 18, "folder": 18, "global": 19, "capabl": 19, "tune": 19, "approach": 19, "effect": [19, 20], "exploit": 19, "lead": 19, "thorough": 19, "favour": 19, "higher": 19, "candid": 19, "upon": 19, "mechan": 19, "pseudocod": 19, "s_1": 19, "p_1": 19, "p_2": 19, "xo": 19, "lowest": [19, 20], "motiv": 20, "postal": 20, "wast": 20, "overarch": 20, "goal": 20, "fulfil": 20, "enorm": 20, "potenti": 20, "save": 20, "primari": 20, "focu": 20, "consider": 20, "complex": 20, "classifi": 20, "cut": 20, "primarili": 20, "guarante": 20, "rigor": 20, "vrpsolvereasi": 20, "extens": 20, "toth": 20, "vigo": 20, "2014": 20, "v_d": 20, "k_i": 20, "interest": 20, "head": 20, "k_0": 20, "q": 20, "pc": 20, "mandatori": 20, "compet": 20, "maximis": 20, "mdvrp": 20}, "objects": {"": [[3, 0, 0, 1, "pyvrp", ""]], "pyvrp": [[3, 0, 0, 1, "GeneticAlgorithm", ""], [3, 0, 0, 1, "Model", ""], [3, 0, 0, 1, "PenaltyManager", ""], [3, 0, 0, 1, "Population", ""], [3, 0, 0, 1, "Result", ""], [3, 0, 0, 1, "Statistics", ""], [3, 0, 0, 1, "_pyvrp", ""], [0, 0, 0, 1, "crossover", ""], [1, 0, 0, 1, "diversity", ""], [3, 0, 0, 1, "exceptions", ""], [2, 0, 0, 1, "plotting", ""], [3, 0, 0, 1, "read", ""], [4, 0, 0, 1, "repair", ""], [5, 0, 0, 1, "search", ""], [3, 0, 0, 1, "show_versions", ""], [3, 0, 0, 1, "solve", ""], [6, 0, 0, 1, "stop", ""]], "pyvrp.GeneticAlgorithm": [[3, 1, 1, 0, "GeneticAlgorithm", "Creates a GeneticAlgorithm instance."], [3, 1, 1, 0, "GeneticAlgorithmParams", "Parameters for the genetic algorithm."]], "pyvrp.GeneticAlgorithm.GeneticAlgorithm.__init__": [[3, 2, 2, 0, "crossover_op", "Crossover operator to use for generating offspring."], [3, 2, 2, 0, "data", "Data object describing the problem to be solved."], [3, 2, 2, 0, "initial_solutions", "Initial solutions to use to initialise the population."], [3, 2, 2, 0, "params", "Genetic algorithm parameters. If not provided, a default will be used."], [3, 2, 2, 0, "penalty_manager", "Penalty manager to use."], [3, 2, 2, 0, "population", "Population to use."], [3, 2, 2, 0, "rng", "Random number generator."], [3, 2, 2, 0, "search_method", "Search method to use."]], "pyvrp.GeneticAlgorithm.GeneticAlgorithm": [[3, 3, 1, 0, "run", "Runs the genetic algorithm with the provided stopping criterion."]], "pyvrp.GeneticAlgorithm.GeneticAlgorithm.run": [[3, 2, 2, 0, "collect_stats", "Whether to collect statistics about the solver's progress. Default True."], [3, 2, 2, 0, "display", "Whether to display information about the solver progress. Default False. Progress information is only available when collect_stats is also set."], [3, 2, 2, 0, "stop", "Stopping criterion to use. The algorithm runs until the first time the stopping criterion returns True."]], "pyvrp.GeneticAlgorithm.GeneticAlgorithmParams.__init__": [[3, 2, 2, 0, "nb_iter_no_improvement", "Number of iterations without any improvement needed before a restart occurs."], [3, 2, 2, 0, "repair_probability", "Probability (in [0, 1]) of repairing an infeasible solution. If the reparation makes the solution feasible, it is also added to the population in the same iteration."]], "pyvrp.GeneticAlgorithm.GeneticAlgorithmParams": [[3, 4, 1, 0, "nb_iter_no_improvement", "Number of iterations without improvement before a restart occurs."], [3, 4, 1, 0, "repair_probability", "Probability of repairing an infeasible solution."]], "pyvrp.Model": [[3, 1, 1, 0, "Edge", "Stores an edge connecting two locations."], [3, 1, 1, 0, "Model", "A simple interface for modelling vehicle routing problems with PyVRP."]], "pyvrp.Model.Model": [[3, 3, 1, 0, "add_client", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 3, 1, 0, "add_client_group", "Adds a new, possibly optional, client group to the model. Returns the created group."], [3, 3, 1, 0, "add_depot", "Adds a depot with the given attributes to the model. Returns the created Depot instance."], [3, 3, 1, 0, "add_edge", "Adds an edge (i, j) between frm (i) and to (j). The edge can be given distance and duration attributes. Distance is required, but the default duration is zero. Returns the created edge."], [3, 3, 1, 0, "add_vehicle_type", "Adds a vehicle type with the given attributes to the model. Returns the created vehicle type."], [3, 3, 1, 0, "data", "Creates and returns a ProblemData instance from this model's attributes."], [3, 3, 1, 0, "from_data", "Constructs a model instance from the given data."], [3, 5, 1, 0, "groups", "Returns all client groups currently in the model."], [3, 5, 1, 0, "locations", "Returns all locations (depots and clients) in the current model. The clients in the routes of the solution returned by solve() can be used to index these locations."], [3, 3, 1, 0, "solve", "Solve this model."], [3, 5, 1, 0, "vehicle_types", "Returns the vehicle types in the current model. The routes of the solution returned by solve() have a property vehicle_type() that can be used to index these vehicle types."]], "pyvrp.Model.Model.from_data": [[3, 2, 2, 0, "data", "Problem data to feed into the model."]], "pyvrp.Model.Model.solve": [[3, 2, 2, 0, "collect_stats", "Whether to collect statistics about the solver's progress. Default True."], [3, 2, 2, 0, "display", "Whether to display information about the solver progress. Default True. Progress information is only available when collect_stats is also set, which it is by default."], [3, 2, 2, 0, "params", "Solver parameters to use. If not provided, a default will be used."], [3, 2, 2, 0, "seed", "Seed value to use for the random number stream. Default 0."], [3, 2, 2, 0, "stop", "Stopping criterion to use."]], "pyvrp.PenaltyManager": [[3, 1, 1, 0, "PenaltyManager", "Creates a PenaltyManager instance."], [3, 1, 1, 0, "PenaltyParams", "The penalty manager parameters."]], "pyvrp.PenaltyManager.PenaltyManager.__init__": [[3, 2, 2, 0, "params", "PenaltyManager parameters. If not provided, a default will be used."]], "pyvrp.PenaltyManager.PenaltyManager": [[3, 3, 1, 0, "booster_cost_evaluator", "Get a cost evaluator using the boosted current penalty values."], [3, 3, 1, 0, "cost_evaluator", "Get a cost evaluator using the current penalty values."], [3, 3, 1, 0, "register", "Registers the feasibility dimensions of the given solution."]], "pyvrp.PenaltyManager.PenaltyParams.__init__": [[3, 2, 2, 0, "init_dist_penalty", "Initial penalty on excess distance. This is the amount by which one unit of excess distance is penalised in the objective, at the start of the search."], [3, 2, 2, 0, "init_load_penalty", "Initial penalty on excess load. This is the amount by which one unit of excess load is penalised in the objective, at the start of the search."], [3, 2, 2, 0, "init_time_warp_penalty", "Initial penalty on time warp. This is the amount by which one unit of time warp (time window violations) is penalised in the objective, at the start of the search."], [3, 2, 2, 0, "penalty_decrease", "Amount p_d \\in [0, 1] by which the current penalties are decreased when sufficient feasible solutions (see target_feasible) have been found amongst the most recent registrations. The penalty values v are updated as v \\gets p_d v."], [3, 2, 2, 0, "penalty_increase", "Amount p_i \\ge 1 by which the current penalties are increased when insufficient feasible solutions (see target_feasible) have been found amongst the most recent registrations. The penalty values v are updated as v \\gets p_i v."], [3, 2, 2, 0, "repair_booster", "A repair booster value r \\ge 1. This value is used to temporarily multiply the current penalty terms, to force feasibility. See also booster_cost_evaluator()."], [3, 2, 2, 0, "solutions_between_updates", "Number of feasibility registrations between penalty value updates. The penalty manager updates the penalty terms every once in a while based on recent feasibility registrations. This parameter controls how often such updating occurs."], [3, 2, 2, 0, "target_feasible", "Target percentage p_f \\in [0, 1] of feasible registrations in the last solutions_between_updates registrations. This percentage is used to update the penalty terms: when insufficient feasible solutions have been registered, the penalties are increased; similarly, when too many feasible solutions have been registered, the penalty terms are decreased. This ensures a balanced population, with a fraction p_f feasible and a fraction 1 - p_f infeasible solutions."]], "pyvrp.PenaltyManager.PenaltyParams": [[3, 4, 1, 0, "init_dist_penalty", "Initial penalty on excess distance."], [3, 4, 1, 0, "init_load_penalty", "Initial penalty on excess load."], [3, 4, 1, 0, "init_time_warp_penalty", "Initial penalty on time warp."], [3, 4, 1, 0, "penalty_decrease", "Amount p_d \\in [0, 1] by which the current penalties are decreased when sufficient feasible solutions (see target_feasible) have been found amongst the most recent registrations."], [3, 4, 1, 0, "penalty_increase", "Amount p_i \\ge 1 by which the current penalties are increased when insufficient feasible solutions (see target_feasible) have been found amongst the most recent registrations."], [3, 4, 1, 0, "repair_booster", "A repair booster value."], [3, 4, 1, 0, "solutions_between_updates", "Number of feasibility registrations between penalty value updates."], [3, 4, 1, 0, "target_feasible", "Target percentage p_f \\in [0, 1] of feasible registrations in the last solutions_between_updates registrations."]], "pyvrp.Population": [[3, 1, 1, 0, "Population", "Creates a Population instance."], [3, 1, 1, 0, "PopulationParams", "Creates a parameters object to be used with Population."]], "pyvrp.Population.Population.__init__": [[3, 2, 2, 0, "diversity_op", "Operator to use to determine pairwise diversity between solutions. Have a look at pyvrp.diversity for available operators."], [3, 2, 2, 0, "params", "Population parameters. If not provided, a default will be used."]], "pyvrp.Population.Population": [[3, 3, 1, 0, "__iter__", "Iterates over the solutions contained in this population."], [3, 3, 1, 0, "__len__", "Returns the current population size."], [3, 3, 1, 0, "add", "Adds the given solution to the population. Survivor selection is automatically triggered when the population reaches its maximum size."], [3, 3, 1, 0, "clear", "Clears the population by removing all solutions currently in the population."], [3, 3, 1, 0, "num_feasible", "Returns the number of feasible solutions in the population."], [3, 3, 1, 0, "num_infeasible", "Returns the number of infeasible solutions in the population."], [3, 3, 1, 0, "select", "Selects two (if possible non-identical) parents by tournament, subject to a diversity restriction."], [3, 3, 1, 0, "tournament", "Selects a solution from this population by k-ary tournament, based on the (internal) fitness values of the selected solutions."]], "pyvrp.Population.Population.add": [[3, 2, 2, 0, "cost_evaluator", "CostEvaluator to use to compute the cost."], [3, 2, 2, 0, "solution", "Solution to add to the population."]], "pyvrp.Population.Population.select": [[3, 2, 2, 0, "cost_evaluator", "Cost evaluator to use when computing the fitness."], [3, 2, 2, 0, "k", "The number of solutions to draw for the tournament. Defaults to two, which results in a binary tournament."], [3, 2, 2, 0, "rng", "Random number generator."]], "pyvrp.Population.Population.tournament": [[3, 2, 2, 0, "cost_evaluator", "Cost evaluator to use when computing the fitness."], [3, 2, 2, 0, "k", "The number of solutions to draw for the tournament. Defaults to two, which results in a binary tournament."], [3, 2, 2, 0, "rng", "Random number generator."]], "pyvrp.Result": [[3, 1, 1, 0, "Result", "Stores the outcomes of a single run. An instance of this class is returned once the GeneticAlgorithm completes."]], "pyvrp.Result.Result.__init__": [[3, 2, 2, 0, "best", "The best observed solution."], [3, 2, 2, 0, "num_iterations", "Number of iterations performed by the genetic algorithm."], [3, 2, 2, 0, "runtime", "Total runtime of the main genetic algorithm loop."], [3, 2, 2, 0, "stats", "A Statistics object containing runtime statistics."]], "pyvrp.Result.Result": [[3, 3, 1, 0, "cost", "Returns the cost (objective) value of the best solution. Returns inf if the best solution is infeasible."], [3, 3, 1, 0, "is_feasible", "Returns whether the best solution is feasible."]], "pyvrp.Statistics": [[3, 1, 1, 0, "Statistics", "The Statistics object tracks various (population-level) statistics of genetic algorithm runs. This can be helpful in analysing the algorithm's performance."]], "pyvrp.Statistics.Statistics.__init__": [[3, 2, 2, 0, "collect_stats", "Whether to collect statistics at all. This can be turned off to avoid excessive memory use on long runs."]], "pyvrp.Statistics.Statistics": [[3, 3, 1, 0, "collect_from", "Collects statistics from the given population object."], [3, 3, 1, 0, "from_csv", "Reads a Statistics object from the CSV file at the given filesystem location."], [3, 3, 1, 0, "to_csv", "Writes this Statistics object to the given location, as a CSV file."]], "pyvrp.Statistics.Statistics.collect_from": [[3, 2, 2, 0, "cost_evaluator", "CostEvaluator used to compute costs for solutions."], [3, 2, 2, 0, "population", "Population instance to collect statistics from."]], "pyvrp.Statistics.Statistics.from_csv": [[3, 2, 2, 0, "delimiter", "Value separator. Default comma."], [3, 2, 2, 0, "kwargs", "Additional keyword arguments. These are passed to csv.DictReader."], [3, 2, 2, 0, "where", "Filesystem location to read from."]], "pyvrp.Statistics.Statistics.to_csv": [[3, 2, 2, 0, "delimiter", "Value separator. Default comma."], [3, 2, 2, 0, "kwargs", "Additional keyword arguments. These are passed to csv.DictWriter."], [3, 2, 2, 0, "quoting", "Quoting strategy. Default only quotes values when necessary."], [3, 2, 2, 0, "where", "Filesystem location to write to."]], "pyvrp._pyvrp": [[3, 1, 1, 0, "Client", "Simple data object storing all client data as (read-only) properties."], [3, 1, 1, 0, "ClientGroup", "A client group that imposes additional restrictions on visits to clients in the group."], [3, 1, 1, 0, "CostEvaluator", "Creates a CostEvaluator instance."], [3, 1, 1, 0, "Depot", "Simple data object storing all depot data as (read-only) properties."], [3, 1, 1, 0, "DynamicBitset", "A simple dynamic bitset implementation. This class functions as a fast set for membership checks on the integers. That is particularly useful for testing if e.g. clients are in a solution or not."], [3, 1, 1, 0, "ProblemData", "Creates a problem data instance. This instance contains all information needed to solve the vehicle routing problem."], [3, 1, 1, 0, "RandomNumberGenerator", "This class implements a XOR-shift pseudo-random number generator (RNG). It generates the next number of a sequence by repeatedly taking the 'exclusive or' (the ^ operator) of a number with a bit-shifted version of itself. See here for more details."], [3, 1, 1, 0, "Route", "A simple class that stores the route plan and some statistics."], [3, 1, 1, 0, "Solution", "Encodes VRP solutions."], [3, 1, 1, 0, "VehicleType", "Simple data object storing all vehicle type data as properties."]], "pyvrp._pyvrp.Client.__init__": [[3, 2, 2, 0, "delivery", "The amount this client demands from the depot. Default 0."], [3, 2, 2, 0, "group", "Indicates membership of the given client group, if any. By default clients are not part of any groups."], [3, 2, 2, 0, "name", "Free-form name field for this client. Default empty."], [3, 2, 2, 0, "pickup", "The amount this client ships back to the depot. Default 0."], [3, 2, 2, 0, "prize", "Prize collected by visiting this client. Default 0."], [3, 2, 2, 0, "release_time", "Earliest time at which this client is released, that is, the earliest time at which a vehicle may leave the depot to visit this client. Default 0."], [3, 2, 2, 0, "required", "Whether this client must be part of a feasible solution. Default True."], [3, 2, 2, 0, "service_duration", "Amount of time a vehicle needs to spend at this client before resuming its route. Service should start (but not necessarily end) within the [tw_early, tw_late] interval. Default 0."], [3, 2, 2, 0, "tw_early", "Earliest time at which this client may be visited to start service. Default 0."], [3, 2, 2, 0, "tw_late", "Latest time at which this client may be visited to start service. Unconstrained if not provided."], [3, 2, 2, 0, "x", "Horizontal coordinate of this client, that is, the 'x' part of the client's (x, y) location tuple."], [3, 2, 2, 0, "y", "Vertical coordinate of this client, that is, the 'y' part of the client's (x, y) location tuple."]], "pyvrp._pyvrp.Client": [[3, 4, 1, 0, "delivery", "Client delivery amount, shipped from depot."], [3, 4, 1, 0, "group", "Indicates membership of the given client group, if any."], [3, 4, 1, 0, "name", "Free-form name field for this client."], [3, 4, 1, 0, "pickup", "Client pickup amount, returned back to depot."], [3, 4, 1, 0, "prize", "Prize collected by visiting this client."], [3, 4, 1, 0, "release_time", "Earliest time at which a vehicle may leave the depot to visit this client."], [3, 4, 1, 0, "required", "Whether visiting this client is required."], [3, 4, 1, 0, "service_duration", "Amount of time a vehicle needs to spend at this client before resuming its route."], [3, 4, 1, 0, "tw_early", "Earliest time at which this client may be visited to start service."], [3, 4, 1, 0, "tw_late", "Latest time at which this client may be visited to start service."], [3, 4, 1, 0, "x", "Horizontal coordinate of this client."], [3, 4, 1, 0, "y", "Vertical coordinate of this client."]], "pyvrp._pyvrp.ClientGroup.__init__": [[3, 2, 2, 0, "clients", "The clients in the group."], [3, 2, 2, 0, "required", "Whether visiting this client group is required."]], "pyvrp._pyvrp.ClientGroup": [[3, 3, 1, 0, "__iter__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__len__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "add_client", "!! processed by numpydoc !!"], [3, 3, 1, 0, "clear", "!! processed by numpydoc !!"], [3, 4, 1, 0, "clients", "The clients in the group."], [3, 4, 1, 0, "mutually_exclusive", "When True, exactly one of the clients in this group must be visited if the group is required, and at most one if the group is not required."], [3, 4, 1, 0, "required", "Whether visiting this client group is required."]], "pyvrp._pyvrp.CostEvaluator.__init__": [[3, 2, 2, 0, "dist_penalty", "The penalty for each unit of distance in excess of the vehicle's maximum distance constraint."], [3, 2, 2, 0, "load_penalty", "The penalty for each unit of excess load over the vehicle capacity."], [3, 2, 2, 0, "tw_penalty", "The penalty for each unit of time warp."]], "pyvrp._pyvrp.CostEvaluator": [[3, 3, 1, 0, "cost", "Hand-waving some details, each solution consists of a set of routes \\mathcal{R}. Each route R \\in \\mathcal{R} is a sequence of edges, starting and ending at the depot. A route R has an assigned vehicle type t_R, which has a fixed vehicle cost f_{t_R}. Let V_R = \\{i : (i, j) \\in R \\} be the set of locations visited by route R. The objective value is then given by"], [3, 3, 1, 0, "dist_penalty", "Computes the time warp penalty for the given time warp."], [3, 3, 1, 0, "load_penalty", "Computes the total excess load penalty for the given load and vehicle capacity."], [3, 3, 1, 0, "penalised_cost", "Computes a smoothed objective (penalised cost) for a given solution."], [3, 3, 1, 0, "tw_penalty", "Computes the time warp penalty for the given time warp."]], "pyvrp._pyvrp.Depot.__init__": [[3, 2, 2, 0, "name", "Free-form name field for this depot. Default empty."], [3, 2, 2, 0, "tw_early", "Opening time of this depot. Default 0."], [3, 2, 2, 0, "tw_late", "Closing time of this depot. Default unconstrained."], [3, 2, 2, 0, "x", "Horizontal coordinate of this depot, that is, the 'x' part of the depot's (x, y) location tuple."], [3, 2, 2, 0, "y", "Vertical coordinate of this depot, that is, the 'y' part of the depot's (x, y) location tuple."]], "pyvrp._pyvrp.Depot": [[3, 4, 1, 0, "name", "Free-form name field for this depot."], [3, 4, 1, 0, "tw_early", "Opening time of this depot."], [3, 4, 1, 0, "tw_late", "Closing time of this depot."], [3, 4, 1, 0, "x", "Horizontal coordinate of this depot."], [3, 4, 1, 0, "y", "Vertical coordinate of this depot."]], "pyvrp._pyvrp.DynamicBitset": [[3, 3, 1, 0, "__and__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__eq__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__getitem__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__invert__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__len__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__or__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__setitem__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "__xor__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "all", "!! processed by numpydoc !!"], [3, 3, 1, 0, "any", "!! processed by numpydoc !!"], [3, 3, 1, 0, "count", "!! processed by numpydoc !!"], [3, 3, 1, 0, "none", "!! processed by numpydoc !!"], [3, 3, 1, 0, "reset", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.DynamicBitset.__init__": [[3, 2, 2, 0, "num_bits", "Number of integers in [0, num_bits) this bitset must be able to store. If num_bits is not a multiple of BLOCK_SIZE, the actual size is rounded up towards the next multiple."]], "pyvrp._pyvrp.ProblemData.__init__": [[3, 2, 2, 0, "clients", "List of clients to visit."], [3, 2, 2, 0, "depots", "List of depots. At least one depot must be passed."], [3, 2, 2, 0, "distance_matrix", "A matrix that gives the travel distances between all locations: both depots and clients."], [3, 2, 2, 0, "duration_matrix", "A matrix that gives the travel durations between all locations: both depots and clients."], [3, 2, 2, 0, "groups", "List of client groups. Client groups have certain restrictions - see the definition for details. By default there are no groups, and empty groups must not be passed."], [3, 2, 2, 0, "vehicle_types", "List of vehicle types in the problem instance."]], "pyvrp._pyvrp.ProblemData": [[3, 3, 1, 0, "centroid", "Center point of all client locations (excluding depots)."], [3, 3, 1, 0, "clients", "Returns a list of all clients in the problem instance."], [3, 3, 1, 0, "depots", "Returns a list of all depots in the problem instance."], [3, 3, 1, 0, "dist", "Returns the travel distance between the first and second argument, according to this instance's travel distance matrix."], [3, 3, 1, 0, "distance_matrix", "The full travel distance matrix."], [3, 3, 1, 0, "duration", "Returns the travel duration between the first and second argument, according to this instance's travel duration matrix."], [3, 3, 1, 0, "duration_matrix", "The full travel duration matrix."], [3, 3, 1, 0, "group", "Returns the client group at the given index."], [3, 3, 1, 0, "groups", "Returns a list of all client groups in the problem instance."], [3, 3, 1, 0, "location", "Returns location data for the location at the given index. This can be a depot or a client: a depot if the idx argument is smaller than num_depots, and a client if the idx is bigger than that."], [3, 5, 1, 0, "num_clients", "Number of clients in this problem instance."], [3, 5, 1, 0, "num_depots", "Number of depots in this problem instance."], [3, 5, 1, 0, "num_groups", "Number of client groups in this problem instance."], [3, 5, 1, 0, "num_locations", "Number of locations in this problem instance, that is, the number of depots plus the number of clients in the instance."], [3, 5, 1, 0, "num_vehicle_types", "Number of vehicle types in this problem instance."], [3, 5, 1, 0, "num_vehicles", "Number of vehicles in this problem instance."], [3, 3, 1, 0, "replace", "Returns a new ProblemData instance with the same data as this instance, except for the given parameters, which are used instead."], [3, 3, 1, 0, "vehicle_type", "Returns vehicle type data for the given vehicle type."], [3, 3, 1, 0, "vehicle_types", "Returns a list of all vehicle types in the problem instance."]], "pyvrp._pyvrp.ProblemData.dist": [[3, 2, 2, 0, "first", "Client or depot number."], [3, 2, 2, 0, "second", "Client or depot number."]], "pyvrp._pyvrp.ProblemData.duration": [[3, 2, 2, 0, "first", "Client or depot number."], [3, 2, 2, 0, "second", "Client or depot number."]], "pyvrp._pyvrp.ProblemData.group": [[3, 2, 2, 0, "group", "Group index whose information to retrieve."]], "pyvrp._pyvrp.ProblemData.location": [[3, 2, 2, 0, "idx", "Location index whose information to retrieve."]], "pyvrp._pyvrp.ProblemData.replace": [[3, 2, 2, 0, "clients", "Optional list of clients."], [3, 2, 2, 0, "depots", "Optional list of depots."], [3, 2, 2, 0, "distance_matrix", "Optional distance matrix."], [3, 2, 2, 0, "duration_matrix", "Optional duration matrix."], [3, 2, 2, 0, "groups", "Optional client groups."], [3, 2, 2, 0, "vehicle_types", "Optional list of vehicle types."]], "pyvrp._pyvrp.ProblemData.vehicle_type": [[3, 2, 2, 0, "vehicle_type", "Vehicle type number whose information to retrieve."]], "pyvrp._pyvrp.RandomNumberGenerator": [[3, 3, 1, 0, "__call__", "!! processed by numpydoc !!"], [3, 3, 1, 0, "max", "!! processed by numpydoc !!"], [3, 3, 1, 0, "min", "!! processed by numpydoc !!"], [3, 3, 1, 0, "rand", "!! processed by numpydoc !!"], [3, 3, 1, 0, "randint", "!! processed by numpydoc !!"], [3, 3, 1, 0, "state", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.RandomNumberGenerator.__init__": [[3, 2, 2, 0, "seed", "Seed used to set the initial RNG state."]], "pyvrp._pyvrp.Route": [[3, 3, 1, 0, "centroid", "Center point of the client locations on this route."], [3, 3, 1, 0, "delivery", "Total client delivery load on this route."], [3, 3, 1, 0, "depot", "Location index of the route's depot."], [3, 3, 1, 0, "distance", "Total distance travelled on this route."], [3, 3, 1, 0, "duration", "Total route duration, including travel, service and waiting time."], [3, 3, 1, 0, "end_time", "End time of the route. This is equivalent to start_time + duration - time_warp."], [3, 3, 1, 0, "excess_distance", "Distance in excess of the vehicle's maximum distance constraint."], [3, 3, 1, 0, "excess_load", "Pickup or delivery load in excess of the vehicle's capacity."], [3, 3, 1, 0, "has_excess_distance", "!! processed by numpydoc !!"], [3, 3, 1, 0, "has_excess_load", "!! processed by numpydoc !!"], [3, 3, 1, 0, "has_time_warp", "!! processed by numpydoc !!"], [3, 3, 1, 0, "is_feasible", "!! processed by numpydoc !!"], [3, 3, 1, 0, "pickup", "Total client pickup load on this route."], [3, 3, 1, 0, "prizes", "Total prize value collected on this route."], [3, 3, 1, 0, "release_time", "Earliest time at which this route can leave the depot. Follows from the release times of clients visited on this route."], [3, 3, 1, 0, "service_duration", "Total duration of service on this route."], [3, 3, 1, 0, "slack", "Time by which departure from the depot can be delayed without resulting in (additional) time warp or increased route duration."], [3, 3, 1, 0, "start_time", "Start time of this route. This is the earliest possible time at which the route can leave the depot and have a minimal duration and time warp. If there is positive slack(), the start time can be delayed by at most slack() time units without increasing the total (minimal) route duration, or time warp."], [3, 3, 1, 0, "time_warp", "Amount of time warp incurred on this route."], [3, 3, 1, 0, "travel_duration", "Total duration of travel on this route."], [3, 3, 1, 0, "vehicle_type", "Index of the type of vehicle used on this route."], [3, 3, 1, 0, "visits", "Route visits, as a list of clients."], [3, 3, 1, 0, "wait_duration", "Total waiting duration on this route."]], "pyvrp._pyvrp.Solution.__init__": [[3, 2, 2, 0, "data", "Data instance."], [3, 2, 2, 0, "routes", "Route list to use. Can be a list of Route objects, or a lists of client visits. In case of the latter, all routes are assigned vehicles of the first type. That need not be a feasible assignment!"]], "pyvrp._pyvrp.Solution": [[3, 3, 1, 0, "distance", "Returns the total distance over all routes."], [3, 3, 1, 0, "excess_distance", "Returns the total distance in excess of maximum duration constraints, over all routes."], [3, 3, 1, 0, "excess_load", "Returns the total excess load over all routes."], [3, 3, 1, 0, "fixed_vehicle_cost", "Returns the fixed vehicle cost of all vehicles used in this solution."], [3, 3, 1, 0, "has_excess_distance", "Returns whether this solution violates maximum distance constraints."], [3, 3, 1, 0, "has_excess_load", "Returns whether this solution violates capacity constraints."], [3, 3, 1, 0, "has_time_warp", "Returns whether this solution violates time window constraints."], [3, 3, 1, 0, "is_complete", "Returns whether this solution is complete, which it is when it has all required clients."], [3, 3, 1, 0, "is_feasible", "Whether this solution is feasible."], [3, 3, 1, 0, "is_group_feasible", "Returns whether this solution is feasible w.r.t. the client group restrictions."], [3, 3, 1, 0, "make_random", "Creates a randomly generated solution."], [3, 3, 1, 0, "neighbours", "Returns a list of neighbours for each client, by index."], [3, 3, 1, 0, "num_clients", "Number of clients in this solution."], [3, 3, 1, 0, "num_missing_clients", "Number of required clients that are not in this solution."], [3, 3, 1, 0, "num_routes", "Number of routes in this solution."], [3, 3, 1, 0, "prizes", "Returns the total collected prize value over all routes."], [3, 3, 1, 0, "routes", "The solution's routing decisions."], [3, 3, 1, 0, "time_warp", "Returns the total time warp load over all routes."], [3, 3, 1, 0, "uncollected_prizes", "Total prize value of all clients not visited in this solution."]], "pyvrp._pyvrp.Solution.make_random": [[3, 2, 2, 0, "data", "Data instance."], [3, 2, 2, 0, "rng", "Random number generator to use."]], "pyvrp._pyvrp.VehicleType.__init__": [[3, 2, 2, 0, "capacity", "Capacity of this vehicle type. This is the maximum total delivery or pickup amount the vehicle can store along the route. Must be non-negative. Default 0."], [3, 2, 2, 0, "depot", "Depot (location index) that vehicles of this type dispatch from, and return to at the end of their routes. Default 0 (first depot)."], [3, 2, 2, 0, "fixed_cost", "Fixed cost of using a vehicle of this type. Default 0."], [3, 2, 2, 0, "max_distance", "Maximum route distance. Unconstrained if not explicitly provided."], [3, 2, 2, 0, "max_duration", "Maximum route duration. Unconstrained if not explicitly provided."], [3, 2, 2, 0, "name", "Free-form name field for this vehicle type. Default empty."], [3, 2, 2, 0, "num_available", "Number of vehicles of this type that are available. Must be positive. Default 1."], [3, 2, 2, 0, "tw_early", "Start of the vehicle type's shift. Default 0."], [3, 2, 2, 0, "tw_late", "End of the vehicle type's shift. Unconstrained if not provided."]], "pyvrp._pyvrp.VehicleType": [[3, 4, 1, 0, "capacity", "Capacity (maximum total demand) of this vehicle type."], [3, 4, 1, 0, "depot", "Depot associated with these vehicles."], [3, 4, 1, 0, "fixed_cost", "Fixed cost of using a vehicle of this type."], [3, 4, 1, 0, "max_distance", "Maximum travel distance of the route this vehicle type is assigned to. This is a very large number when the maximum distance is unconstrained."], [3, 4, 1, 0, "max_duration", "Maximum duration of the route this vehicle type is assigned to. This is a very large number when the maximum duration is unconstrained."], [3, 4, 1, 0, "name", "Free-form name field for this vehicle type."], [3, 4, 1, 0, "num_available", "Number of vehicles of this type that are available."], [3, 4, 1, 0, "tw_early", "Start of the vehicle type's shift, if specified."], [3, 4, 1, 0, "tw_late", "End of the vehicle type's shift, if specified."]], "pyvrp.crossover": [[0, 0, 0, 1, "ordered_crossover", ""], [0, 0, 0, 1, "selective_route_exchange", ""]], "pyvrp.crossover.ordered_crossover": [[0, 6, 1, 0, "ordered_crossover", "Performs an ordered crossover (OX) operation between the two given parents. The clients between two randomly selected indices of the first route are copied into a new solution, and any missing clients that are present in the second route are then copied in as well. See Rdd0370444073-1 for details."]], "pyvrp.crossover.ordered_crossover.ordered_crossover": [[0, 2, 2, 0, "cost_evaluator", "Cost evaluator object. Unused by this operator."], [0, 2, 2, 0, "data", "The problem instance."], [0, 2, 2, 0, "parents", "The two parent solutions to create an offspring from."], [0, 2, 2, 0, "rng", "The random number generator to use."]], "pyvrp.crossover.selective_route_exchange": [[0, 6, 1, 0, "selective_route_exchange", "The selective route exchange crossover (SREX) operator due to Nagata and Kobayashi R8de92506ce4f-1 combines routes from both parents to generate a new offspring solution. It does this by carefully selecting routes from the second parent that could be exchanged with routes from the first parent. This often results in incomplete offspring that can then be repaired using a search method."]], "pyvrp.crossover.selective_route_exchange.selective_route_exchange": [[0, 2, 2, 0, "cost_evaluator", "The cost evaluator used to evaluate the offspring."], [0, 2, 2, 0, "data", "The problem instance."], [0, 2, 2, 0, "parents", "The two parent solutions to create an offspring from."], [0, 2, 2, 0, "rng", "The random number generator to use."]], "pyvrp.diversity": [[1, 0, 0, 1, "_diversity", ""]], "pyvrp.diversity._diversity": [[1, 6, 1, 0, "broken_pairs_distance", "Computes the symmetric broken pairs distance (BPD) between the given two solutions. This function determines whether each location in the problem shares neighbours between the first and second solution. If not, the location is part of a 'broken pair': a link that is part of one solution, but not of the other."]], "pyvrp.diversity._diversity.broken_pairs_distance": [[1, 2, 2, 0, "first", "First solution."], [1, 2, 2, 0, "second", "Second solution."]], "pyvrp.exceptions": [[3, 7, 1, 0, "EmptySolutionWarning", "Raised when an empty solution is being added to the Population. This is not forbidden, per se, but very odd."], [3, 7, 1, 0, "ScalingWarning", "Raised when the distance or duration values in the problem are very large, which could cause the algorithm to suffer from numerical issues."], [3, 7, 1, 0, "TspWarning", "Raised when the problem is a TSP but a component is used that explicitly requires the presence of two or more vehicles (i.e., a proper VRP)."]], "pyvrp.plotting": [[2, 0, 0, 1, "plot_coordinates", ""], [2, 0, 0, 1, "plot_demands", ""], [2, 0, 0, 1, "plot_diversity", ""], [2, 0, 0, 1, "plot_instance", ""], [2, 0, 0, 1, "plot_objectives", ""], [2, 0, 0, 1, "plot_result", ""], [2, 0, 0, 1, "plot_route_schedule", ""], [2, 0, 0, 1, "plot_runtimes", ""], [2, 0, 0, 1, "plot_solution", ""], [2, 0, 0, 1, "plot_time_windows", ""]], "pyvrp.plotting.plot_coordinates": [[2, 6, 1, 0, "plot_coordinates", "Plots coordinates for clients and depot."]], "pyvrp.plotting.plot_coordinates.plot_coordinates": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on. One will be created if not provided."], [2, 2, 2, 0, "data", "Data instance."], [2, 2, 2, 0, "title", "Title to add to the plot."]], "pyvrp.plotting.plot_demands": [[2, 6, 1, 0, "plot_demands", "Plots demands for clients, as vertical bars sorted by demand."]], "pyvrp.plotting.plot_demands.plot_demands": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on. One will be created if not provided."], [2, 2, 2, 0, "data", "Data instance."], [2, 2, 2, 0, "title", "Title to add to the plot."]], "pyvrp.plotting.plot_diversity": [[2, 6, 1, 0, "plot_diversity", "Plots population diversity statistics."]], "pyvrp.plotting.plot_diversity.plot_diversity": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on. One will be created if not provided."], [2, 2, 2, 0, "result", "Result for which to plot diversity."]], "pyvrp.plotting.plot_instance": [[2, 6, 1, 0, "plot_instance", "Plots client coordinate, time window and demand data of the given instance."]], "pyvrp.plotting.plot_instance.plot_instance": [[2, 2, 2, 0, "data", "Data instance."], [2, 2, 2, 0, "fig", "Optional Figure to draw on. One will be created if not provided."]], "pyvrp.plotting.plot_objectives": [[2, 6, 1, 0, "plot_objectives", "Plots each subpopulation's objective values."]], "pyvrp.plotting.plot_objectives.plot_objectives": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on. One will be created if not provided."], [2, 2, 2, 0, "num_to_skip", "Number of initial iterations to skip when plotting. Early iterations often have very high objective values, and obscure what's going on later in the search. The default skips the first 5% of iterations."], [2, 2, 2, 0, "result", "Result for which to plot objectives."], [2, 2, 2, 0, "ylim_adjust", "Bounds the y-axis to (best * ylim_adjust[0], best * ylim_adjust[1]) where best denotes the best found feasible objective value. Default (0.95, 1.15)."]], "pyvrp.plotting.plot_result": [[2, 6, 1, 0, "plot_result", "Plots the results of a run, including the best solution and detailed statistics about the algorithm's performance."]], "pyvrp.plotting.plot_result.plot_result": [[2, 2, 2, 0, "data", "Data instance underlying the result's solution."], [2, 2, 2, 0, "fig", "Optional Figure to draw on. One will be created if not provided."], [2, 2, 2, 0, "result", "Result to be plotted."]], "pyvrp.plotting.plot_route_schedule": [[2, 6, 1, 0, "plot_route_schedule", "Plots a route schedule. This function plots multiple time statistics as a function of distance travelled:"]], "pyvrp.plotting.plot_route_schedule.plot_route_schedule": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on. One will be created if not provided."], [2, 2, 2, 0, "data", "Data instance for which to plot the route schedule."], [2, 2, 2, 0, "legend", "Whether or not to show the legends. Default True."], [2, 2, 2, 0, "route", "Route (list of clients) whose schedule to plot."], [2, 2, 2, 0, "title", "Title to add to the plot."]], "pyvrp.plotting.plot_runtimes": [[2, 6, 1, 0, "plot_runtimes", "Plots iteration runtimes."]], "pyvrp.plotting.plot_runtimes.plot_runtimes": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on. One will be created if not provided."], [2, 2, 2, 0, "result", "Result for which to plot runtimes."]], "pyvrp.plotting.plot_solution": [[2, 6, 1, 0, "plot_solution", "Plots the given solution."]], "pyvrp.plotting.plot_solution.plot_solution": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on. One will be created if not provided."], [2, 2, 2, 0, "data", "Data instance underlying the solution."], [2, 2, 2, 0, "plot_clients", "Whether to plot all clients as dots. Default False, which plots only the solution's routes."], [2, 2, 2, 0, "solution", "Solution to plot."]], "pyvrp.plotting.plot_time_windows": [[2, 6, 1, 0, "plot_time_windows", "Plots client time windows, as vertical bars sorted by time window."]], "pyvrp.plotting.plot_time_windows.plot_time_windows": [[2, 2, 2, 0, "ax", "Axes object to draw the plot on. One will be created if not provided."], [2, 2, 2, 0, "data", "Data instance."], [2, 2, 2, 0, "title", "Title to add to the plot."]], "pyvrp.read": [[3, 6, 1, 0, "read", "Reads the VRPLIB file at the given location, and returns a ProblemData instance."], [3, 6, 1, 0, "read_solution", "Reads a solution in VRPLIB format from file at the given location, and returns the routes contained in it."]], "pyvrp.read.read": [[3, 2, 2, 0, "round_func", "Optional rounding function that is applied to all data values in the instance. This can either be a function or a string:"], [3, 2, 2, 0, "where", "File location to read. Assumes the data on the given location is in VRPLIB format."]], "pyvrp.read.read_solution": [[3, 2, 2, 0, "where", "File location to read. Assumes the solution in the file on the given location is in VRPLIB solution format."]], "pyvrp.repair": [[4, 0, 0, 1, "_repair", ""]], "pyvrp.repair._repair": [[4, 6, 1, 0, "greedy_repair", "Greedy repair operator. This operator inserts each client in the list of unplanned clients into the given routes. It does so by evaluating all possible moves and applying the best one for each client, resulting in a quadratic runtime."], [4, 6, 1, 0, "nearest_route_insert", "Nearest route insert operator. This operator inserts each client in the list of unplanned clients into one of the given routes. It does so by first determining which route has a center point closest to the client, and then evaluating all possible insert moves of the client into that closest route. The best move is applied. This operator has a quadratic runtime in the worst case, but is typically much more efficient than greedy_repair(), at the cost of some solution quality."]], "pyvrp.repair._repair.greedy_repair": [[4, 2, 2, 0, "cost_evaluator", "Cost evaluator to use when evaluating insertion moves."], [4, 2, 2, 0, "data", "Problem data instance."], [4, 2, 2, 0, "routes", "List of routes."], [4, 2, 2, 0, "unplanned", "Unplanned clients to insert into the routes."]], "pyvrp.repair._repair.nearest_route_insert": [[4, 2, 2, 0, "cost_evaluator", "Cost evaluator to use when evaluating insertion moves."], [4, 2, 2, 0, "data", "Problem data instance."], [4, 2, 2, 0, "routes", "List of routes."], [4, 2, 2, 0, "unplanned", "Unplanned clients to insert into the routes."]], "pyvrp.search": [[5, 0, 0, 1, "LocalSearch", ""], [5, 0, 0, 1, "SearchMethod", ""], [5, 0, 0, 1, "_search", ""], [5, 0, 0, 1, "neighbourhood", ""]], "pyvrp.search.LocalSearch": [[5, 1, 1, 0, "LocalSearch", "Local search method. This search method explores a granular neighbourhood in a very efficient manner using user-provided node and route operators. This quickly results in much improved solutions."]], "pyvrp.search.LocalSearch.LocalSearch": [[5, 3, 1, 0, "__call__", "This method uses the search() and intensify() methods to iteratively improve the given solution. First, search() is applied. Thereafter, intensify() is applied. This repeats until no further improvements are found. Finally, the improved solution is returned."], [5, 3, 1, 0, "add_node_operator", "Adds a node operator to this local search object. The node operator will be used by search() to improve a solution."], [5, 3, 1, 0, "add_route_operator", "Adds a route operator to this local search object. The route operator will be used by intensify() to improve a solution using more expensive route operators."], [5, 3, 1, 0, "intensify", "This method uses the intensifying route operators on this local search object to improve the given solution. To limit the computational demands of intensification, the  overlap_tolerance argument can be used to limit the number of route pairs that are evaluated."], [5, 3, 1, 0, "neighbours", "Returns the granular neighbourhood currently used by the local search."], [5, 3, 1, 0, "search", "This method uses the node operators on this local search object to improve the given solution."], [5, 3, 1, 0, "set_neighbours", "Convenience method to replace the current granular neighbourhood used by the local search object."]], "pyvrp.search.LocalSearch.LocalSearch.__call__": [[5, 2, 2, 0, "cost_evaluator", "Cost evaluator to use."], [5, 2, 2, 0, "solution", "The solution to improve through local search."]], "pyvrp.search.LocalSearch.LocalSearch.__init__": [[5, 2, 2, 0, "data", "Data object describing the problem to be solved."], [5, 2, 2, 0, "neighbours", "List of lists that defines the local search neighbourhood."], [5, 2, 2, 0, "rng", "Random number generator."]], "pyvrp.search.LocalSearch.LocalSearch.add_node_operator": [[5, 2, 2, 0, "op", "The node operator to add to this local search object."]], "pyvrp.search.LocalSearch.LocalSearch.add_route_operator": [[5, 2, 2, 0, "op", "The route operator to add to this local search object."]], "pyvrp.search.LocalSearch.LocalSearch.intensify": [[5, 2, 2, 0, "cost_evaluator", "Cost evaluator to use."], [5, 2, 2, 0, "overlap_tolerance", "This method evaluates improving moves between route pairs. To limit computational efforts, by default not all route pairs are considered: only those route pairs that share some overlap when considering their center's angle to the center of all clients. This parameter controls the amount of overlap needed before two routes are evaluated."], [5, 2, 2, 0, "solution", "The solution to improve."]], "pyvrp.search.LocalSearch.LocalSearch.search": [[5, 2, 2, 0, "cost_evaluator", "Cost evaluator to use."], [5, 2, 2, 0, "solution", "The solution to improve."]], "pyvrp.search.LocalSearch.LocalSearch.set_neighbours": [[5, 2, 2, 0, "neighbours", "A new granular neighbourhood."]], "pyvrp.search.SearchMethod": [[5, 1, 1, 0, "SearchMethod", "Protocol that search methods must implement."]], "pyvrp.search.SearchMethod.SearchMethod": [[5, 3, 1, 0, "__call__", "Search around the given solution, and returns a new solution that is hopefully better."]], "pyvrp.search.SearchMethod.SearchMethod.__call__": [[5, 2, 2, 0, "cost_evaluator", "Cost evaluator to use when evaluating improvements."], [5, 2, 2, 0, "solution", "The solution to improve."]], "pyvrp.search._search": [[5, 1, 1, 0, "Exchange10", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange11", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange20", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange21", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange22", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange30", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange31", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange32", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "Exchange33", "The (N, M)-exchange operators exchange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [5, 1, 1, 0, "NodeOperator", "!! processed by numpydoc !!"], [5, 1, 1, 0, "RouteOperator", "!! processed by numpydoc !!"], [5, 1, 1, 0, "SwapRoutes", "This operator evaluates exchanging the visits of two routes U and V."], [5, 1, 1, 0, "SwapStar", "Explores the SWAP* neighbourhood of R6fbb5e500902-1. The SWAP* neighbourhood explores free form re-insertions of clients U and V in the given routes (so the clients are exchanged between routes, but they are not necessarily inserted in the place of the other exchanged client)."], [5, 1, 1, 0, "SwapTails", "Given two nodes U and V, tests whether replacing the arc of U to its successor n(U) and V to n(V) by U \\rightarrow n(V) and V \\rightarrow n(U) is an improving move."]], "pyvrp.search.neighbourhood": [[5, 1, 1, 0, "NeighbourhoodParams", "Configuration for calculating a granular neighbourhood."], [5, 6, 1, 0, "compute_neighbours", "Computes neighbours defining the neighbourhood for a problem instance."]], "pyvrp.search.neighbourhood.NeighbourhoodParams": [[5, 4, 1, 0, "nb_granular", "Number of other clients that are in each client's granular neighbourhood. This parameter determines the size of the overall neighbourhood."], [5, 4, 1, 0, "symmetric_neighbours", "Whether to symmetrise the neighbourhood structure. This ensures that when edge (i, j) is in, then so is (j, i). Note that this is not the same as symmetric_proximity."], [5, 4, 1, 0, "symmetric_proximity", "Whether to calculate a symmetric proximity matrix. This ensures edge (i, j) is given the same weight as (j, i)."], [5, 4, 1, 0, "weight_time_warp", "Weight given to the minimum time warp aspect of the proximity calculation. A large time warp indicates the clients are far apart in duration/time."], [5, 4, 1, 0, "weight_wait_time", "Weight given to the minimum wait time aspect of the proximity calculation. A large wait time indicates the clients are far apart in duration/time."]], "pyvrp.search.neighbourhood.compute_neighbours": [[5, 2, 2, 0, "data", "ProblemData for which to compute the neighbourhood."], [5, 2, 2, 0, "params", "NeighbourhoodParams that define how the neighbourhood is computed."]], "pyvrp.show_versions": [[3, 6, 1, 0, "show_versions", "This function prints version information that is useful when filing bug reports."]], "pyvrp.solve": [[3, 1, 1, 0, "SolveParams", "Solver parameters for PyVRP's hybrid genetic search algorithm."], [3, 6, 1, 0, "solve", "Solves the given problem data instance."]], "pyvrp.solve.SolveParams.__init__": [[3, 2, 2, 0, "genetic", "Genetic algorithm parameters."], [3, 2, 2, 0, "neighbourhood", "Neighbourhood parameters."], [3, 2, 2, 0, "node_ops", "Node operators to use in the search."], [3, 2, 2, 0, "penalty", "Penalty parameters."], [3, 2, 2, 0, "population", "Population parameters."], [3, 2, 2, 0, "route_ops", "Route operators to use in the search."]], "pyvrp.solve.SolveParams": [[3, 3, 1, 0, "from_file", "Loads the solver parameters from a TOML file."]], "pyvrp.solve.solve": [[3, 2, 2, 0, "collect_stats", "Whether to collect statistics about the solver's progress. Default True."], [3, 2, 2, 0, "data", "Problem data instance to solve."], [3, 2, 2, 0, "display", "Whether to display information about the solver progress. Default False. Progress information is only available when collect_stats is also set, which it is by default."], [3, 2, 2, 0, "params", "Solver parameters to use. If not provided, a default will be used."], [3, 2, 2, 0, "seed", "Seed value to use for the random number stream. Default 0."], [3, 2, 2, 0, "stop", "Stopping criterion to use."]], "pyvrp.stop": [[6, 0, 0, 1, "MaxIterations", ""], [6, 0, 0, 1, "MaxRuntime", ""], [6, 0, 0, 1, "MultipleCriteria", ""], [6, 0, 0, 1, "NoImprovement", ""], [6, 0, 0, 1, "StoppingCriterion", ""]], "pyvrp.stop.MaxIterations": [[6, 1, 1, 0, "MaxIterations", "Criterion that stops after a maximum number of iterations."]], "pyvrp.stop.MaxRuntime": [[6, 1, 1, 0, "MaxRuntime", "Criterion that stops after a specified maximum runtime (in seconds)."]], "pyvrp.stop.MultipleCriteria": [[6, 1, 1, 0, "MultipleCriteria", "Simple aggregate class that manages multiple stopping criteria at once."]], "pyvrp.stop.NoImprovement": [[6, 1, 1, 0, "NoImprovement", "Criterion that stops if the best solution has not been improved for a fixed number of iterations."]], "pyvrp.stop.NoImprovement.NoImprovement.__init__": [[6, 2, 2, 0, "max_iterations", "The maximum number of non-improving iterations."]], "pyvrp.stop.StoppingCriterion": [[6, 1, 1, 0, "StoppingCriterion", "Protocol that stopping criteria must implement."]], "pyvrp.stop.StoppingCriterion.StoppingCriterion": [[6, 3, 1, 0, "__call__", "When called, this stopping criterion should return True if the algorithm should stop, and False otherwise."]], "pyvrp.stop.StoppingCriterion.StoppingCriterion.__call__": [[6, 2, 2, 0, "best_cost", "Cost of current best solution."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:attribute", "5": "py:property", "6": "py:function", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"crossov": [0, 13], "oper": [0, 4, 5], "warn": [0, 12], "note": [0, 1, 3, 5, 8, 9, 10, 15, 19, 20], "divers": 1, "measur": 1, "plot": 2, "tool": 2, "pyvrp": [3, 13, 14, 15, 16], "hint": [3, 9, 14, 15, 19, 20], "repair": 4, "search": [5, 13], "method": [5, 13], "node": 5, "rout": [5, 20], "stop": 6, "criteria": 6, "benchmark": [7, 15], "contribut": 8, "set": 8, "up": 8, "local": [8, 18], "instal": [8, 18], "build": 8, "python": 8, "extens": 8, "commit": 8, "chang": 8, "support": [9, 20], "new": 9, "vrp": [9, 11, 12, 15, 20], "variant": [9, 20], "The": [10, 11, 13], "vrplib": 10, "format": 10, "specif": 10, "data": 10, "section": 10, "classic": 11, "capacit": [11, 12, 20], "read": 11, "instanc": 11, "solv": [11, 13], "time": [11, 12, 20], "window": [11, 12, 20], "larger": 11, "vrptw": 11, "conclus": [11, 13], "A": [12, 13, 19, 20], "quick": 12, "tutori": 12, "multi": [12, 20], "depot": [12, 20], "prize": [12, 20], "collect": [12, 20], "simultan": 12, "pickup": 12, "deliveri": 12, "us": 13, "": 13, "compon": 13, "tour": 13, "random": 13, "number": 13, "gener": 13, "solut": 13, "represent": 13, "evalu": 13, "popul": 13, "manag": 13, "genet": 13, "algorithm": 13, "function": 13, "content": 14, "get": [14, 17], "start": 14, "exampl": [14, 18], "api": 14, "refer": [14, 15], "develop": 14, "solver": 15, "cite": 16, "help": 17, "submit": 17, "bug": 17, "report": 17, "instruct": 18, "from": 18, "sourc": 18, "run": 18, "brief": [19, 20], "introduct": [19, 20], "hg": 19, "vehicl": 20, "problem": 20}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"Crossover operators": [[0, "crossover-operators"]], "Warning": [[0, null], [12, null]], "Note": [[0, null], [1, null], [1, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [3, null], [5, null], [8, null], [8, null], [9, null], [9, null], [10, null], [15, null], [19, null], [20, null], [20, null]], "Diversity measures": [[1, "diversity-measures"]], "Plotting tools": [[2, "plotting-tools"]], "PyVRP": [[3, "pyvrp"], [15, "pyvrp"]], "Hint": [[3, null], [9, null], [9, null], [9, null], [9, null], [9, null], [9, null], [14, null], [15, null], [19, null], [20, null]], "Repair operators": [[4, "repair-operators"]], "Search methods": [[5, "search-methods"]], "Node operators": [[5, "node-operators"]], "Route operators": [[5, "route-operators"]], "Stopping criteria": [[6, "stopping-criteria"]], "Benchmarking": [[7, "benchmarking"]], "Contributing": [[8, "contributing"]], "Setting up a local installation": [[8, "setting-up-a-local-installation"]], "Building the Python extensions": [[8, "building-the-python-extensions"]], "Committing changes": [[8, "committing-changes"]], "Supporting new VRP variants": [[9, "supporting-new-vrp-variants"]], "The VRPLIB format": [[10, "the-vrplib-format"]], "Specifications": [[10, "specifications"]], "Data sections": [[10, "data-sections"]], "Classic VRPs": [[11, "Classic-VRPs"]], "The capacitated VRP": [[11, "The-capacitated-VRP"]], "Reading the instance": [[11, "Reading-the-instance"], [11, "id1"]], "Solving the instance": [[11, "Solving-the-instance"], [11, "id2"]], "The VRP with time windows": [[11, "The-VRP-with-time-windows"]], "Solving a larger VRPTW instance": [[11, "Solving-a-larger-VRPTW-instance"]], "Conclusion": [[11, "Conclusion"], [13, "Conclusion"]], "A quick tutorial": [[12, "A-quick-tutorial"]], "Capacitated VRP": [[12, "Capacitated-VRP"]], "VRP with time windows": [[12, "VRP-with-time-windows"]], "Multi-depot VRP with time windows": [[12, "Multi-depot-VRP-with-time-windows"]], "Prize-collecting VRP": [[12, "Prize-collecting-VRP"]], "VRP with simultaneous pickup and delivery": [[12, "VRP-with-simultaneous-pickup-and-delivery"]], "Using PyVRP\u2019s components": [[13, "Using-PyVRP's-components"]], "A tour of PyVRP": [[13, "A-tour-of-PyVRP"]], "Random number generator": [[13, "Random-number-generator"]], "Search method": [[13, "Search-method"]], "Solution representation and evaluation": [[13, "Solution-representation-and-evaluation"]], "Population management": [[13, "Population-management"]], "The genetic algorithm and crossover": [[13, "The-genetic-algorithm-and-crossover"]], "The solve function": [[13, "The-solve-function"]], "Contents": [[14, "contents"]], "Getting started": [[14, null]], "Examples": [[14, null]], "API reference": [[14, null]], "Developing PyVRP": [[14, null]], "Benchmarks": [[15, "benchmarks"]], "Reference VRP solvers": [[15, "reference-vrp-solvers"]], "Citing PyVRP": [[16, "citing-pyvrp"]], "Getting help": [[17, "getting-help"]], "Submitting a bug report": [[17, "submitting-a-bug-report"]], "Installation instructions": [[18, "installation-instructions"]], "Installing from source": [[18, "installing-from-source"]], "Running the examples locally": [[18, "running-the-examples-locally"]], "A brief introduction to HGS": [[19, "a-brief-introduction-to-hgs"]], "A brief introduction to VRP": [[20, "a-brief-introduction-to-vrp"]], "Supported VRP variants": [[20, "supported-vrp-variants"]], "Capacitated vehicle routing problem": [[20, "capacitated-vehicle-routing-problem"]], "Vehicle routing problem with time windows": [[20, "vehicle-routing-problem-with-time-windows"]], "Prize-collecting vehicle routing problem": [[20, "prize-collecting-vehicle-routing-problem"]], "Multi-depot vehicle routing problem": [[20, "multi-depot-vehicle-routing-problem"]]}, "indexentries": {"module": [[0, "module-pyvrp.crossover"], [0, "module-pyvrp.crossover.ordered_crossover"], [0, "module-pyvrp.crossover.selective_route_exchange"], [1, "module-pyvrp.diversity"], [1, "module-pyvrp.diversity._diversity"], [2, "module-pyvrp.plotting"], [2, "module-pyvrp.plotting.plot_coordinates"], [2, "module-pyvrp.plotting.plot_demands"], [2, "module-pyvrp.plotting.plot_diversity"], [2, "module-pyvrp.plotting.plot_instance"], [2, "module-pyvrp.plotting.plot_objectives"], [2, "module-pyvrp.plotting.plot_result"], [2, "module-pyvrp.plotting.plot_route_schedule"], [2, "module-pyvrp.plotting.plot_runtimes"], [2, "module-pyvrp.plotting.plot_solution"], [2, "module-pyvrp.plotting.plot_time_windows"], [3, "module-pyvrp"], [3, "module-pyvrp.GeneticAlgorithm"], [3, "module-pyvrp.Model"], [3, "module-pyvrp.PenaltyManager"], [3, "module-pyvrp.Population"], [3, "module-pyvrp.Result"], [3, "module-pyvrp.Statistics"], [3, "module-pyvrp._pyvrp"], [3, "module-pyvrp.exceptions"], [3, "module-pyvrp.read"], [3, "module-pyvrp.show_versions"], [3, "module-pyvrp.solve"], [4, "module-pyvrp.repair"], [4, "module-pyvrp.repair._repair"], [5, "module-pyvrp.search"], [5, "module-pyvrp.search.LocalSearch"], [5, "module-pyvrp.search.SearchMethod"], [5, "module-pyvrp.search._search"], [5, "module-pyvrp.search.neighbourhood"], [6, "module-pyvrp.stop"], [6, "module-pyvrp.stop.MaxIterations"], [6, "module-pyvrp.stop.MaxRuntime"], [6, "module-pyvrp.stop.MultipleCriteria"], [6, "module-pyvrp.stop.NoImprovement"], [6, "module-pyvrp.stop.StoppingCriterion"]], "ordered_crossover() (in module pyvrp.crossover.ordered_crossover)": [[0, "pyvrp.crossover.ordered_crossover.ordered_crossover"]], "pyvrp.crossover": [[0, "module-pyvrp.crossover"]], "pyvrp.crossover.ordered_crossover": [[0, "module-pyvrp.crossover.ordered_crossover"]], "pyvrp.crossover.selective_route_exchange": [[0, "module-pyvrp.crossover.selective_route_exchange"]], "selective_route_exchange() (in module pyvrp.crossover.selective_route_exchange)": [[0, "pyvrp.crossover.selective_route_exchange.selective_route_exchange"]], "broken_pairs_distance() (in module pyvrp.diversity._diversity)": [[1, "pyvrp.diversity._diversity.broken_pairs_distance"]], "pyvrp.diversity": [[1, "module-pyvrp.diversity"]], "pyvrp.diversity._diversity": [[1, "module-pyvrp.diversity._diversity"]], "plot_coordinates() (in module pyvrp.plotting.plot_coordinates)": [[2, "pyvrp.plotting.plot_coordinates.plot_coordinates"]], "plot_demands() (in module pyvrp.plotting.plot_demands)": [[2, "pyvrp.plotting.plot_demands.plot_demands"]], "plot_diversity() (in module pyvrp.plotting.plot_diversity)": [[2, "pyvrp.plotting.plot_diversity.plot_diversity"]], "plot_instance() (in module pyvrp.plotting.plot_instance)": [[2, "pyvrp.plotting.plot_instance.plot_instance"]], "plot_objectives() (in module pyvrp.plotting.plot_objectives)": [[2, "pyvrp.plotting.plot_objectives.plot_objectives"]], "plot_result() (in module pyvrp.plotting.plot_result)": [[2, "pyvrp.plotting.plot_result.plot_result"]], "plot_route_schedule() (in module pyvrp.plotting.plot_route_schedule)": [[2, "pyvrp.plotting.plot_route_schedule.plot_route_schedule"]], "plot_runtimes() (in module pyvrp.plotting.plot_runtimes)": [[2, "pyvrp.plotting.plot_runtimes.plot_runtimes"]], "plot_solution() (in module pyvrp.plotting.plot_solution)": [[2, "pyvrp.plotting.plot_solution.plot_solution"]], "plot_time_windows() (in module pyvrp.plotting.plot_time_windows)": [[2, "pyvrp.plotting.plot_time_windows.plot_time_windows"]], "pyvrp.plotting": [[2, "module-pyvrp.plotting"]], "pyvrp.plotting.plot_coordinates": [[2, "module-pyvrp.plotting.plot_coordinates"]], "pyvrp.plotting.plot_demands": [[2, "module-pyvrp.plotting.plot_demands"]], "pyvrp.plotting.plot_diversity": [[2, "module-pyvrp.plotting.plot_diversity"]], "pyvrp.plotting.plot_instance": [[2, "module-pyvrp.plotting.plot_instance"]], "pyvrp.plotting.plot_objectives": [[2, "module-pyvrp.plotting.plot_objectives"]], "pyvrp.plotting.plot_result": [[2, "module-pyvrp.plotting.plot_result"]], "pyvrp.plotting.plot_route_schedule": [[2, "module-pyvrp.plotting.plot_route_schedule"]], "pyvrp.plotting.plot_runtimes": [[2, "module-pyvrp.plotting.plot_runtimes"]], "pyvrp.plotting.plot_solution": [[2, "module-pyvrp.plotting.plot_solution"]], "pyvrp.plotting.plot_time_windows": [[2, "module-pyvrp.plotting.plot_time_windows"]], "client (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.Client"]], "clientgroup (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.ClientGroup"]], "costevaluator (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.CostEvaluator"]], "depot (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.Depot"]], "dynamicbitset (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.DynamicBitset"]], "edge (class in pyvrp.model)": [[3, "pyvrp.Model.Edge"]], "emptysolutionwarning": [[3, "pyvrp.exceptions.EmptySolutionWarning"]], "geneticalgorithm (class in pyvrp.geneticalgorithm)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithm"]], "geneticalgorithmparams (class in pyvrp.geneticalgorithm)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithmParams"]], "model (class in pyvrp.model)": [[3, "pyvrp.Model.Model"]], "penaltymanager (class in pyvrp.penaltymanager)": [[3, "pyvrp.PenaltyManager.PenaltyManager"]], "penaltyparams (class in pyvrp.penaltymanager)": [[3, "pyvrp.PenaltyManager.PenaltyParams"]], "population (class in pyvrp.population)": [[3, "pyvrp.Population.Population"]], "populationparams (class in pyvrp.population)": [[3, "pyvrp.Population.PopulationParams"]], "problemdata (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.ProblemData"]], "randomnumbergenerator (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.RandomNumberGenerator"]], "result (class in pyvrp.result)": [[3, "pyvrp.Result.Result"]], "route (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.Route"]], "scalingwarning": [[3, "pyvrp.exceptions.ScalingWarning"]], "solution (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.Solution"]], "solveparams (class in pyvrp.solve)": [[3, "pyvrp.solve.SolveParams"]], "statistics (class in pyvrp.statistics)": [[3, "pyvrp.Statistics.Statistics"]], "tspwarning": [[3, "pyvrp.exceptions.TspWarning"]], "vehicletype (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.VehicleType"]], "__and__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__and__"]], "__call__() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.__call__"]], "__eq__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__eq__"]], "__getitem__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__getitem__"]], "__invert__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__invert__"]], "__iter__() (clientgroup method)": [[3, "pyvrp._pyvrp.ClientGroup.__iter__"]], "__iter__() (population method)": [[3, "pyvrp.Population.Population.__iter__"]], "__len__() (clientgroup method)": [[3, "pyvrp._pyvrp.ClientGroup.__len__"]], "__len__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__len__"]], "__len__() (population method)": [[3, "pyvrp.Population.Population.__len__"]], "__or__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__or__"]], "__setitem__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__setitem__"]], "__xor__() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.__xor__"]], "add() (population method)": [[3, "pyvrp.Population.Population.add"]], "add_client() (clientgroup method)": [[3, "pyvrp._pyvrp.ClientGroup.add_client"]], "add_client() (model method)": [[3, "pyvrp.Model.Model.add_client"]], "add_client_group() (model method)": [[3, "pyvrp.Model.Model.add_client_group"]], "add_depot() (model method)": [[3, "pyvrp.Model.Model.add_depot"]], "add_edge() (model method)": [[3, "pyvrp.Model.Model.add_edge"]], "add_vehicle_type() (model method)": [[3, "pyvrp.Model.Model.add_vehicle_type"]], "all() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.all"]], "any() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.any"]], "booster_cost_evaluator() (penaltymanager method)": [[3, "pyvrp.PenaltyManager.PenaltyManager.booster_cost_evaluator"]], "capacity (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.capacity"]], "centroid() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.centroid"]], "centroid() (route method)": [[3, "pyvrp._pyvrp.Route.centroid"]], "clear() (clientgroup method)": [[3, "pyvrp._pyvrp.ClientGroup.clear"]], "clear() (population method)": [[3, "pyvrp.Population.Population.clear"]], "clients (clientgroup attribute)": [[3, "pyvrp._pyvrp.ClientGroup.clients"]], "clients() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.clients"]], "collect_from() (statistics method)": [[3, "pyvrp.Statistics.Statistics.collect_from"]], "cost() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.cost"]], "cost() (result method)": [[3, "pyvrp.Result.Result.cost"]], "cost_evaluator() (penaltymanager method)": [[3, "pyvrp.PenaltyManager.PenaltyManager.cost_evaluator"]], "count() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.count"]], "data() (model method)": [[3, "pyvrp.Model.Model.data"]], "delivery (client attribute)": [[3, "pyvrp._pyvrp.Client.delivery"]], "delivery() (route method)": [[3, "pyvrp._pyvrp.Route.delivery"]], "depot (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.depot"]], "depot() (route method)": [[3, "pyvrp._pyvrp.Route.depot"]], "depots() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.depots"]], "dist() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.dist"]], "dist_penalty() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.dist_penalty"]], "distance() (route method)": [[3, "pyvrp._pyvrp.Route.distance"]], "distance() (solution method)": [[3, "pyvrp._pyvrp.Solution.distance"]], "distance_matrix() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.distance_matrix"]], "duration() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.duration"]], "duration() (route method)": [[3, "pyvrp._pyvrp.Route.duration"]], "duration_matrix() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.duration_matrix"]], "end_time() (route method)": [[3, "pyvrp._pyvrp.Route.end_time"]], "excess_distance() (route method)": [[3, "pyvrp._pyvrp.Route.excess_distance"]], "excess_distance() (solution method)": [[3, "pyvrp._pyvrp.Solution.excess_distance"]], "excess_load() (route method)": [[3, "pyvrp._pyvrp.Route.excess_load"]], "excess_load() (solution method)": [[3, "pyvrp._pyvrp.Solution.excess_load"]], "fixed_cost (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.fixed_cost"]], "fixed_vehicle_cost() (solution method)": [[3, "pyvrp._pyvrp.Solution.fixed_vehicle_cost"]], "from_csv() (statistics class method)": [[3, "pyvrp.Statistics.Statistics.from_csv"]], "from_data() (model class method)": [[3, "pyvrp.Model.Model.from_data"]], "from_file() (solveparams class method)": [[3, "pyvrp.solve.SolveParams.from_file"]], "group (client attribute)": [[3, "pyvrp._pyvrp.Client.group"]], "group() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.group"]], "groups (model property)": [[3, "pyvrp.Model.Model.groups"]], "groups() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.groups"]], "has_excess_distance() (route method)": [[3, "pyvrp._pyvrp.Route.has_excess_distance"]], "has_excess_distance() (solution method)": [[3, "pyvrp._pyvrp.Solution.has_excess_distance"]], "has_excess_load() (route method)": [[3, "pyvrp._pyvrp.Route.has_excess_load"]], "has_excess_load() (solution method)": [[3, "pyvrp._pyvrp.Solution.has_excess_load"]], "has_time_warp() (route method)": [[3, "pyvrp._pyvrp.Route.has_time_warp"]], "has_time_warp() (solution method)": [[3, "pyvrp._pyvrp.Solution.has_time_warp"]], "init_dist_penalty (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.init_dist_penalty"]], "init_load_penalty (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.init_load_penalty"]], "init_time_warp_penalty (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.init_time_warp_penalty"]], "is_complete() (solution method)": [[3, "pyvrp._pyvrp.Solution.is_complete"]], "is_feasible() (result method)": [[3, "pyvrp.Result.Result.is_feasible"]], "is_feasible() (route method)": [[3, "pyvrp._pyvrp.Route.is_feasible"]], "is_feasible() (solution method)": [[3, "pyvrp._pyvrp.Solution.is_feasible"]], "is_group_feasible() (solution method)": [[3, "pyvrp._pyvrp.Solution.is_group_feasible"]], "load_penalty() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.load_penalty"]], "location() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.location"]], "locations (model property)": [[3, "pyvrp.Model.Model.locations"]], "make_random() (solution method)": [[3, "pyvrp._pyvrp.Solution.make_random"]], "max() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.max"]], "max_distance (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.max_distance"]], "max_duration (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.max_duration"]], "min() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.min"]], "mutually_exclusive (clientgroup attribute)": [[3, "pyvrp._pyvrp.ClientGroup.mutually_exclusive"]], "name (client attribute)": [[3, "pyvrp._pyvrp.Client.name"]], "name (depot attribute)": [[3, "pyvrp._pyvrp.Depot.name"]], "name (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.name"]], "nb_iter_no_improvement (geneticalgorithmparams attribute)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithmParams.nb_iter_no_improvement"]], "neighbours() (solution method)": [[3, "pyvrp._pyvrp.Solution.neighbours"]], "none() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.none"]], "num_available (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.num_available"]], "num_clients (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_clients"]], "num_clients() (solution method)": [[3, "pyvrp._pyvrp.Solution.num_clients"]], "num_depots (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_depots"]], "num_feasible() (population method)": [[3, "pyvrp.Population.Population.num_feasible"]], "num_groups (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_groups"]], "num_infeasible() (population method)": [[3, "pyvrp.Population.Population.num_infeasible"]], "num_locations (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_locations"]], "num_missing_clients() (solution method)": [[3, "pyvrp._pyvrp.Solution.num_missing_clients"]], "num_routes() (solution method)": [[3, "pyvrp._pyvrp.Solution.num_routes"]], "num_vehicle_types (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_vehicle_types"]], "num_vehicles (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_vehicles"]], "penalised_cost() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.penalised_cost"]], "penalty_decrease (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.penalty_decrease"]], "penalty_increase (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.penalty_increase"]], "pickup (client attribute)": [[3, "pyvrp._pyvrp.Client.pickup"]], "pickup() (route method)": [[3, "pyvrp._pyvrp.Route.pickup"]], "prize (client attribute)": [[3, "pyvrp._pyvrp.Client.prize"]], "prizes() (route method)": [[3, "pyvrp._pyvrp.Route.prizes"]], "prizes() (solution method)": [[3, "pyvrp._pyvrp.Solution.prizes"]], "pyvrp": [[3, "module-pyvrp"]], "pyvrp.geneticalgorithm": [[3, "module-pyvrp.GeneticAlgorithm"]], "pyvrp.model": [[3, "module-pyvrp.Model"]], "pyvrp.penaltymanager": [[3, "module-pyvrp.PenaltyManager"]], "pyvrp.population": [[3, "module-pyvrp.Population"]], "pyvrp.result": [[3, "module-pyvrp.Result"]], "pyvrp.statistics": [[3, "module-pyvrp.Statistics"]], "pyvrp._pyvrp": [[3, "module-pyvrp._pyvrp"]], "pyvrp.exceptions": [[3, "module-pyvrp.exceptions"]], "pyvrp.read": [[3, "module-pyvrp.read"]], "pyvrp.show_versions": [[3, "module-pyvrp.show_versions"]], "pyvrp.solve": [[3, "module-pyvrp.solve"]], "rand() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.rand"]], "randint() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.randint"]], "read() (in module pyvrp.read)": [[3, "pyvrp.read.read"]], "read_solution() (in module pyvrp.read)": [[3, "pyvrp.read.read_solution"]], "register() (penaltymanager method)": [[3, "pyvrp.PenaltyManager.PenaltyManager.register"]], "release_time (client attribute)": [[3, "pyvrp._pyvrp.Client.release_time"]], "release_time() (route method)": [[3, "pyvrp._pyvrp.Route.release_time"]], "repair_booster (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.repair_booster"]], "repair_probability (geneticalgorithmparams attribute)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithmParams.repair_probability"]], "replace() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.replace"]], "required (client attribute)": [[3, "pyvrp._pyvrp.Client.required"]], "required (clientgroup attribute)": [[3, "pyvrp._pyvrp.ClientGroup.required"]], "reset() (dynamicbitset method)": [[3, "pyvrp._pyvrp.DynamicBitset.reset"]], "routes() (solution method)": [[3, "pyvrp._pyvrp.Solution.routes"]], "run() (geneticalgorithm method)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithm.run"]], "select() (population method)": [[3, "pyvrp.Population.Population.select"]], "service_duration (client attribute)": [[3, "pyvrp._pyvrp.Client.service_duration"]], "service_duration() (route method)": [[3, "pyvrp._pyvrp.Route.service_duration"]], "show_versions() (in module pyvrp.show_versions)": [[3, "pyvrp.show_versions.show_versions"]], "slack() (route method)": [[3, "pyvrp._pyvrp.Route.slack"]], "solutions_between_updates (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.solutions_between_updates"]], "solve() (model method)": [[3, "pyvrp.Model.Model.solve"]], "solve() (in module pyvrp.solve)": [[3, "pyvrp.solve.solve"]], "start_time() (route method)": [[3, "pyvrp._pyvrp.Route.start_time"]], "state() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.state"]], "target_feasible (penaltyparams attribute)": [[3, "pyvrp.PenaltyManager.PenaltyParams.target_feasible"]], "time_warp() (route method)": [[3, "pyvrp._pyvrp.Route.time_warp"]], "time_warp() (solution method)": [[3, "pyvrp._pyvrp.Solution.time_warp"]], "to_csv() (statistics method)": [[3, "pyvrp.Statistics.Statistics.to_csv"]], "tournament() (population method)": [[3, "pyvrp.Population.Population.tournament"]], "travel_duration() (route method)": [[3, "pyvrp._pyvrp.Route.travel_duration"]], "tw_early (client attribute)": [[3, "pyvrp._pyvrp.Client.tw_early"]], "tw_early (depot attribute)": [[3, "pyvrp._pyvrp.Depot.tw_early"]], "tw_early (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.tw_early"]], "tw_late (client attribute)": [[3, "pyvrp._pyvrp.Client.tw_late"]], "tw_late (depot attribute)": [[3, "pyvrp._pyvrp.Depot.tw_late"]], "tw_late (vehicletype attribute)": [[3, "pyvrp._pyvrp.VehicleType.tw_late"]], "tw_penalty() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.tw_penalty"]], "uncollected_prizes() (solution method)": [[3, "pyvrp._pyvrp.Solution.uncollected_prizes"]], "vehicle_type() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.vehicle_type"]], "vehicle_type() (route method)": [[3, "pyvrp._pyvrp.Route.vehicle_type"]], "vehicle_types (model property)": [[3, "pyvrp.Model.Model.vehicle_types"]], "vehicle_types() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.vehicle_types"]], "visits() (route method)": [[3, "pyvrp._pyvrp.Route.visits"]], "wait_duration() (route method)": [[3, "pyvrp._pyvrp.Route.wait_duration"]], "x (client attribute)": [[3, "pyvrp._pyvrp.Client.x"]], "x (depot attribute)": [[3, "pyvrp._pyvrp.Depot.x"]], "y (client attribute)": [[3, "pyvrp._pyvrp.Client.y"]], "y (depot attribute)": [[3, "pyvrp._pyvrp.Depot.y"]], "greedy_repair() (in module pyvrp.repair._repair)": [[4, "pyvrp.repair._repair.greedy_repair"]], "nearest_route_insert() (in module pyvrp.repair._repair)": [[4, "pyvrp.repair._repair.nearest_route_insert"]], "pyvrp.repair": [[4, "module-pyvrp.repair"]], "pyvrp.repair._repair": [[4, "module-pyvrp.repair._repair"]], "exchange10 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange10"]], "exchange11 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange11"]], "exchange20 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange20"]], "exchange21 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange21"]], "exchange22 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange22"]], "exchange30 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange30"]], "exchange31 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange31"]], "exchange32 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange32"]], "exchange33 (class in pyvrp.search._search)": [[5, "pyvrp.search._search.Exchange33"]], "localsearch (class in pyvrp.search.localsearch)": [[5, "pyvrp.search.LocalSearch.LocalSearch"]], "neighbourhoodparams (class in pyvrp.search.neighbourhood)": [[5, "pyvrp.search.neighbourhood.NeighbourhoodParams"]], "nodeoperator (class in pyvrp.search._search)": [[5, "pyvrp.search._search.NodeOperator"]], "routeoperator (class in pyvrp.search._search)": [[5, "pyvrp.search._search.RouteOperator"]], "searchmethod (class in pyvrp.search.searchmethod)": [[5, "pyvrp.search.SearchMethod.SearchMethod"]], "swaproutes (class in pyvrp.search._search)": [[5, "pyvrp.search._search.SwapRoutes"]], "swapstar (class in pyvrp.search._search)": [[5, "pyvrp.search._search.SwapStar"]], "swaptails (class in pyvrp.search._search)": [[5, "pyvrp.search._search.SwapTails"]], "__call__() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.__call__"]], "__call__() (searchmethod method)": [[5, "pyvrp.search.SearchMethod.SearchMethod.__call__"]], "add_node_operator() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.add_node_operator"]], "add_route_operator() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.add_route_operator"]], "compute_neighbours() (in module pyvrp.search.neighbourhood)": [[5, "pyvrp.search.neighbourhood.compute_neighbours"]], "intensify() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.intensify"]], "nb_granular (neighbourhoodparams attribute)": [[5, "pyvrp.search.neighbourhood.NeighbourhoodParams.nb_granular"]], "neighbours() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.neighbours"]], "pyvrp.search": [[5, "module-pyvrp.search"]], "pyvrp.search.localsearch": [[5, "module-pyvrp.search.LocalSearch"]], "pyvrp.search.searchmethod": [[5, "module-pyvrp.search.SearchMethod"]], "pyvrp.search._search": [[5, "module-pyvrp.search._search"]], "pyvrp.search.neighbourhood": [[5, "module-pyvrp.search.neighbourhood"]], "search() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.search"]], "set_neighbours() (localsearch method)": [[5, "pyvrp.search.LocalSearch.LocalSearch.set_neighbours"]], "symmetric_neighbours (neighbourhoodparams attribute)": [[5, "pyvrp.search.neighbourhood.NeighbourhoodParams.symmetric_neighbours"]], "symmetric_proximity (neighbourhoodparams attribute)": [[5, "pyvrp.search.neighbourhood.NeighbourhoodParams.symmetric_proximity"]], "weight_time_warp (neighbourhoodparams attribute)": [[5, "pyvrp.search.neighbourhood.NeighbourhoodParams.weight_time_warp"]], "weight_wait_time (neighbourhoodparams attribute)": [[5, "pyvrp.search.neighbourhood.NeighbourhoodParams.weight_wait_time"]], "maxiterations (class in pyvrp.stop.maxiterations)": [[6, "pyvrp.stop.MaxIterations.MaxIterations"]], "maxruntime (class in pyvrp.stop.maxruntime)": [[6, "pyvrp.stop.MaxRuntime.MaxRuntime"]], "multiplecriteria (class in pyvrp.stop.multiplecriteria)": [[6, "pyvrp.stop.MultipleCriteria.MultipleCriteria"]], "noimprovement (class in pyvrp.stop.noimprovement)": [[6, "pyvrp.stop.NoImprovement.NoImprovement"]], "stoppingcriterion (class in pyvrp.stop.stoppingcriterion)": [[6, "pyvrp.stop.StoppingCriterion.StoppingCriterion"]], "__call__() (stoppingcriterion method)": [[6, "pyvrp.stop.StoppingCriterion.StoppingCriterion.__call__"]], "pyvrp.stop": [[6, "module-pyvrp.stop"]], "pyvrp.stop.maxiterations": [[6, "module-pyvrp.stop.MaxIterations"]], "pyvrp.stop.maxruntime": [[6, "module-pyvrp.stop.MaxRuntime"]], "pyvrp.stop.multiplecriteria": [[6, "module-pyvrp.stop.MultipleCriteria"]], "pyvrp.stop.noimprovement": [[6, "module-pyvrp.stop.NoImprovement"]], "pyvrp.stop.stoppingcriterion": [[6, "module-pyvrp.stop.StoppingCriterion"]], "backhaul_section": [[10, "term-BACKHAUL_SECTION"]], "capacity": [[10, "term-CAPACITY"]], "demand_section": [[10, "term-DEMAND_SECTION"]], "depot_section": [[10, "term-DEPOT_SECTION"]], "dimension": [[10, "term-DIMENSION"]], "edge_weight_format": [[10, "term-EDGE_WEIGHT_FORMAT"]], "edge_weight_section": [[10, "term-EDGE_WEIGHT_SECTION"]], "edge_weight_type": [[10, "term-EDGE_WEIGHT_TYPE"]], "linehaul_section": [[10, "term-LINEHAUL_SECTION"]], "mutually_exclusive_group_section": [[10, "term-MUTUALLY_EXCLUSIVE_GROUP_SECTION"]], "node_coord_section": [[10, "term-NODE_COORD_SECTION"]], "prize_section": [[10, "term-PRIZE_SECTION"]], "release_time_section": [[10, "term-RELEASE_TIME_SECTION"]], "service_time_section": [[10, "term-SERVICE_TIME_SECTION"]], "time_window_section": [[10, "term-TIME_WINDOW_SECTION"]], "vehicles": [[10, "term-VEHICLES"]], "vehicles_depot_section": [[10, "term-VEHICLES_DEPOT_SECTION"]], "vehicles_max_distance": [[10, "term-VEHICLES_MAX_DISTANCE"]], "vehicles_max_duration": [[10, "term-VEHICLES_MAX_DURATION"]]}, "docurls": ["api/crossover.html", "api/diversity.html", "api/plotting.html", "api/pyvrp.html", "api/repair.html", "api/search.html", "api/stop.html", "dev/benchmarking.html", "dev/contributing.html", "dev/new_vrp_variants.html", "dev/supported_vrplib_fields.html", "examples/basic_vrps.html", "examples/quick_tutorial.html", "examples/using_pyvrp_components.html", "index.html", "setup/benchmarks.html", "setup/citing.html", "setup/getting_help.html", "setup/installation.html", "setup/introduction_to_hgs.html", "setup/introduction_to_vrp.html"]})